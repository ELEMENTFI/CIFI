{"version":3,"sources":["../source/PhoneInput.js"],"names":["React","PropTypes","InputSmart","InputBasic","usePhoneDigits","createInput","defaultMetadata","PhoneInput","ref","country","defaultCountry","useNationalFormatForDefaultCountryValue","value","onChange","metadata","smartCaret","international","withCountryCallingCode","rest","phoneDigits","setPhoneDigits","InputComponent","forwardRef","propTypes","type","string","autoComplete","func","isRequired","bool","inputComponent","elementType","object","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport InputSmart from './InputSmart'\r\nimport InputBasic from './InputBasic'\r\nimport usePhoneDigits from './usePhoneDigits'\r\n\r\nexport function createInput(defaultMetadata) {\r\n\tfunction PhoneInput({\r\n\t\tcountry,\r\n\t\tdefaultCountry,\r\n\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\tvalue,\r\n\t\tonChange,\r\n\t\tmetadata,\r\n\t\tsmartCaret,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\t// \"Phone digits\" includes not only \"digits\" but also a `+` sign.\r\n\t\tconst [\r\n\t\t\tphoneDigits,\r\n\t\t\tsetPhoneDigits\r\n\t\t] = usePhoneDigits({\r\n\t\t\tvalue,\r\n\t\t\tonChange,\r\n\t\t\tcountry,\r\n\t\t\tdefaultCountry,\r\n\t\t\tinternational,\r\n\t\t\twithCountryCallingCode,\r\n\t\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\t\tmetadata\r\n\t\t})\r\n\t\tconst InputComponent = smartCaret ? InputSmart : InputBasic\r\n\t\treturn (\r\n\t\t\t<InputComponent\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tmetadata={metadata}\r\n\t\t\t\tinternational={international}\r\n\t\t\t\twithCountryCallingCode={withCountryCallingCode}\r\n\t\t\t\tcountry={country || defaultCountry}\r\n\t\t\t\tvalue={phoneDigits}\r\n\t\t\t\tonChange={setPhoneDigits} />\r\n\t\t)\r\n\t}\r\n\r\n\tPhoneInput = React.forwardRef(PhoneInput)\r\n\r\n\tPhoneInput.propTypes = {\r\n\t\t/**\r\n\t\t * HTML `<input/>` `type` attribute.\r\n\t\t */\r\n\t\ttype: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * HTML `<input/>` `autocomplete` attribute.\r\n\t\t */\r\n\t\tautoComplete: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * The phone number (in E.164 format).\r\n\t\t * Examples: `undefined`, `\"+12\"`, `\"+12133734253\"`.\r\n\t\t */\r\n\t\tvalue: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * Updates the `value`.\r\n\t\t */\r\n\t\tonChange: PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * as a national phone number (example: `(213) 373-4253`),\r\n\t\t * or as an international phone number without \"country calling code\"\r\n\t\t * if `international` property is passed (example: `213 373 4253`).\r\n\t\t * Example: \"US\".\r\n\t\t * If no `country` is passed then `value`\r\n\t\t * is formatted as an international phone number.\r\n\t\t * (example: `+1 213 373 4253`)\r\n\t\t */\r\n\t\tcountry: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * when a user inputs a national phone number (example: `(213) 373-4253`).\r\n\t\t * The user can still input a phone number in international format.\r\n\t\t * Example: \"US\".\r\n\t\t * `country` and `defaultCountry` properties are mutually exclusive.\r\n\t\t */\r\n\t\tdefaultCountry: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * If `country` property is passed along with `international={true}` property\r\n\t\t * then the phone number will be input in \"international\" format for that `country`\r\n\t\t * (without \"country calling code\").\r\n\t\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t\t * (without \"country calling code\" `+1`).\r\n\t\t */\r\n\t\tinternational: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * If `country` and `international` properties are set,\r\n\t\t * then by default it won't include \"country calling code\" in the input field.\r\n\t\t * To change that, pass `withCountryCallingCode` property,\r\n\t\t * and it will include \"country calling code\" in the input field.\r\n\t\t */\r\n\t\twithCountryCallingCode: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * The `<input/>` component.\r\n\t\t */\r\n\t\tinputComponent: PropTypes.elementType,\r\n\r\n\t\t/**\r\n\t\t * By default, the caret position is being \"intelligently\" managed\r\n\t\t * while a user inputs a phone number.\r\n\t\t * This \"smart\" caret behavior can be turned off\r\n\t\t * by passing `smartCaret={false}` property.\r\n\t\t * This is just an \"escape hatch\" for any possible caret position issues.\r\n\t\t */\r\n\t\t// Is `true` by default.\r\n\t\tsmartCaret: PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * When `defaultCountry` is defined and the initial `value` corresponds to `defaultCountry`,\r\n\t\t * then the `value` will be formatted as a national phone number by default.\r\n\t\t * To format the initial `value` of `defaultCountry` as an international number instead\r\n\t\t * set `useNationalFormatForDefaultCountryValue` property to `true`.\r\n\t\t */\r\n\t\tuseNationalFormatForDefaultCountryValue: PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object.isRequired\r\n\t}\r\n\r\n\tPhoneInput.defaultProps = {\r\n\t\t/**\r\n\t\t * HTML `<input/>` `type=\"tel\"`.\r\n\t\t */\r\n\t\ttype: 'tel',\r\n\r\n\t\t/**\r\n\t\t * Remember (and autofill) the value as a phone number.\r\n\t\t */\r\n\t\tautoComplete: 'tel',\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n\t\t */\r\n\t\tsmartCaret: true,\r\n\r\n\t\t/**\r\n\t\t * Set to `true` to force international phone number format\r\n\t\t * (without \"country calling code\") when `country` is specified.\r\n\t\t */\r\n\t\t// international: false,\r\n\r\n\t\t/**\r\n\t\t * Prefer national format when formatting E.164 phone number `value`\r\n\t\t * corresponding to `defaultCountry`.\r\n\t\t */\r\n\t\tuseNationalFormatForDefaultCountryValue: true,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: defaultMetadata\r\n\t}\r\n\r\n\treturn PhoneInput\r\n}\r\n\r\nexport default createInput()"],"file":"PhoneInput.js"}