{"version":3,"sources":["../source/format.test.js"],"names":["expect","format","template_formatter","describe","it","formatter","test_caret_position","digit_index","caret_in_formatted","to","deep","equal","text","caret","undefined"],"mappings":"AAAA,SAASA,MAAT,QAAuB,MAAvB;AAEA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,kBAAP,MAA+B,6BAA/B;AAEAC,QAAQ,WAAW,YACnB;AACCC,EAAAA,EAAE,gCAAgC,YAClC;AACC,QAAMC,SAAS,GAAGH,kBAAkB,CAAC,iBAAD,CAApC;;AAEA,QAAMI,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,WAAD,EAAcC,kBAAd,EAC5B;AACCR,MAAAA,MAAM,CAACC,MAAM,CAEZ,YAFY,EAGZM,WAHY,EAIZF,SAJY,CAAP,CAAN,CAMCI,EAND,CAMIC,IANJ,CAMSC,KANT,CAOC;AACAC,QAAAA,IAAI,EAAE,iBADN;AAEAC,QAAAA,KAAK,EAAEL;AAFP,OAPD;AAWA,KAbD;;AAeAF,IAAAA,mBAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB;AACAA,IAAAA,mBAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB;AACAA,IAAAA,mBAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB;AAEAA,IAAAA,mBAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB;AACAA,IAAAA,mBAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB;AACAA,IAAAA,mBAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB;AAEAA,IAAAA,mBAAmB,CAAC,CAAD,EAAI,EAAJ,CAAnB;AACAA,IAAAA,mBAAmB,CAAC,CAAD,EAAI,EAAJ,CAAnB;AAEAA,IAAAA,mBAAmB,CAAC,CAAD,EAAI,EAAJ,CAAnB;AACAA,IAAAA,mBAAmB,CAAC,CAAD,EAAI,EAAJ,CAAnB,CA9BD,CAgCC;;AACAA,IAAAA,mBAAmB,CAAC,EAAD,EAAK,EAAL,CAAnB;AACA,GAnCC,CAAF;AAqCAF,EAAAA,EAAE,CAAC,yDAAD,EAA4D,YAC9D;AACCJ,IAAAA,MAAM,CAACC,MAAM,CAEZ,YAFY,EAGZ,CAHY,EAIZ,iBAJY,CAAP,CAAN,CAMCQ,EAND,CAMIC,IANJ,CAMSC,KANT,CAOC;AACAC,MAAAA,IAAI,EAAE,iBADN;AAEAC,MAAAA,KAAK,EAAE;AAFP,KAPD;AAWA,GAbC,CAAF;AAeAT,EAAAA,EAAE,CAAC,4CAAD,EAA+C,YACjD;AACCJ,IAAAA,MAAM,CAACC,MAAM,CAEZ,YAFY,EAGZa,SAHY,EAIZ,iBAJY,CAAP,CAAN,CAMCL,EAND,CAMIC,IANJ,CAMSC,KANT,CAOC;AACAC,MAAAA,IAAI,EAAE,iBADN;AAEAC,MAAAA,KAAK,EAAE;AAFP,KAPD;AAWA,GAbC,CAAF;AAeAT,EAAAA,EAAE,CAAC,gEAAD,EAAmE,YACrE;AACCJ,IAAAA,MAAM,CAACC,MAAM,CAEZ,YAFY,EAGZ,CAHY,EAIZ;AACA,gBAAM,CAAE,CALI,CAAP,CAAN,CAOCQ,EAPD,CAOIC,IAPJ,CAOSC,KAPT,CAQC;AACAC,MAAAA,IAAI,EAAE,YADN;AAEAC,MAAAA,KAAK,EAAE;AAFP,KARD;AAYA,GAdC,CAAF,CApED,CAoFC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA5GO,CAAR","sourcesContent":["import { expect } from 'chai'\r\n\r\nimport format from '../source/format'\r\nimport template_formatter from '../source/templateFormatter'\r\n\r\ndescribe(`format`, function()\r\n{\r\n\tit(`should format phone numbers`, function()\r\n\t{\r\n\t\tconst formatter = template_formatter('(xxx) xxx-xx-xx')\r\n\r\n\t\tconst test_caret_position = (digit_index, caret_in_formatted) =>\r\n\t\t{\r\n\t\t\texpect(format\r\n\t\t\t(\r\n\t\t\t\t'8005553535',\r\n\t\t\t\tdigit_index,\r\n\t\t\t\tformatter\r\n\t\t\t))\r\n\t\t\t.to.deep.equal\r\n\t\t\t({\r\n\t\t\t\ttext: '(800) 555-35-35',\r\n\t\t\t\tcaret: caret_in_formatted\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\ttest_caret_position(0, 1)\r\n\t\ttest_caret_position(1, 2)\r\n\t\ttest_caret_position(2, 3)\r\n\r\n\t\ttest_caret_position(3, 6)\r\n\t\ttest_caret_position(4, 7)\r\n\t\ttest_caret_position(5, 8)\r\n\r\n\t\ttest_caret_position(6, 10)\r\n\t\ttest_caret_position(7, 11)\r\n\r\n\t\ttest_caret_position(8, 13)\r\n\t\ttest_caret_position(9, 14)\r\n\r\n\t\t// After the last digit\r\n\t\ttest_caret_position(10, 15)\r\n\t})\r\n\r\n\tit('should autoconstruct template formatter from a template', function()\r\n\t{\r\n\t\texpect(format\r\n\t\t(\r\n\t\t\t'8005553535',\r\n\t\t\t0,\r\n\t\t\t'(xxx) xxx-xx-xx'\r\n\t\t))\r\n\t\t.to.deep.equal\r\n\t\t({\r\n\t\t\ttext: '(800) 555-35-35',\r\n\t\t\tcaret: 1\r\n\t\t})\r\n\t})\r\n\r\n\tit('should format value with no caret position', function()\r\n\t{\r\n\t\texpect(format\r\n\t\t(\r\n\t\t\t'8005553535',\r\n\t\t\tundefined,\r\n\t\t\t'(xxx) xxx-xx-xx'\r\n\t\t))\r\n\t\t.to.deep.equal\r\n\t\t({\r\n\t\t\ttext: '(800) 555-35-35',\r\n\t\t\tcaret: 15\r\n\t\t})\r\n\t})\r\n\r\n\tit('should format value with no template preserving caret position', function()\r\n\t{\r\n\t\texpect(format\r\n\t\t(\r\n\t\t\t'8005553535',\r\n\t\t\t2,\r\n\t\t\t// () => { text: '8005553535' }\r\n\t\t\t() => {}\r\n\t\t))\r\n\t\t.to.deep.equal\r\n\t\t({\r\n\t\t\ttext: '8005553535',\r\n\t\t\tcaret: 2\r\n\t\t})\r\n\t})\r\n\r\n\t// it('should position caret correctly with partially filled templates using spacers', function()\r\n\t// {\r\n\t// \texpect(format\r\n\t// \t({\r\n\t// \t\t'88005',\r\n\t// \t\t0\r\n\t// \t},\r\n\t// \t(value) =>\r\n\t// \t{\r\n\t// \t\tconst result =\r\n\t// \t\t{\r\n\t// \t\t\t'8 (800) 5  -  -  ',\r\n\t// \t\t\ttemplate: 'x (xxx) xxx-xx-xx'\r\n\t// \t\t}\r\n\t//\r\n\t// \t\treturn result\r\n\t// \t})\r\n\t// \t.to.deep.equal\r\n\t// \t({\r\n\t// \t\ttext: '(800) 555-35-35',\r\n\t// \t\tcaret: 1\r\n\t// \t})\r\n\t// })\r\n})"],"file":"format.test.js"}