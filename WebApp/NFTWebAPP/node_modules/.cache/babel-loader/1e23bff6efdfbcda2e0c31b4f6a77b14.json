{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport parsePhoneNumber_ from './parsePhoneNumber_';\nexport default function parsePhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return parsePhoneNumber_(text, options, metadata);\n}\nexport function normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n      _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n      arg_1 = _Array$prototype$slic2[0],\n      arg_2 = _Array$prototype$slic2[1],\n      arg_3 = _Array$prototype$slic2[2],\n      arg_4 = _Array$prototype$slic2[3];\n\n  var text;\n  var options;\n  var metadata; // If the phone number is passed as a string.\n  // `parsePhoneNumber('88005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    text = arg_1;\n  } else throw new TypeError('A text for parsing must be a string.'); // If \"default country\" argument is being passed then move it to `options`.\n  // `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\n\n  if (!arg_2 || typeof arg_2 === 'string') {\n    if (arg_4) {\n      options = arg_3;\n      metadata = arg_4;\n    } else {\n      options = undefined;\n      metadata = arg_3;\n    }\n\n    if (arg_2) {\n      options = _objectSpread({\n        defaultCountry: arg_2\n      }, options);\n    }\n  } // `defaultCountry` is not passed.\n  // Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n  else if (isObject(arg_2)) {\n      if (arg_3) {\n        options = arg_2;\n        metadata = arg_3;\n      } else {\n        metadata = arg_2;\n      }\n    } else throw new Error(\"Invalid second argument: \".concat(arg_2));\n\n  return {\n    text: text,\n    options: options,\n    metadata: metadata\n  };\n} // Otherwise istanbul would show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar isObject = function isObject(_) {\n  return _typeof(_) === 'object';\n};","map":{"version":3,"sources":["../source/parsePhoneNumber.js"],"names":["text","options","metadata","normalizeArguments","parsePhoneNumber_","arg_1","arg_2","arg_3","arg_4","Array","defaultCountry","isObject"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,iBAAA,MAAA,qBAAA;AAEA,eAAe,SAAA,gBAAA,GAA4B;AAAA,MAAA,mBAAA,GACNG,kBAAkB,CADZ,SACY,CADZ;AAAA,MAClCH,IADkC,GAAA,mBAAA,CAAA,IAAA;AAAA,MAC5BC,OAD4B,GAAA,mBAAA,CAAA,OAAA;AAAA,MACnBC,QADmB,GAAA,mBAAA,CAAA,QAAA;;AAE1C,SAAOE,iBAAiB,CAAA,IAAA,EAAA,OAAA,EAAxB,QAAwB,CAAxB;AACA;AAED,OAAO,SAAA,kBAAA,CAAA,IAAA,EACP;AAAA,MAAA,qBAAA,GACsCK,KAAK,CAALA,SAAAA,CAAAA,KAAAA,CAAAA,IAAAA,CADtC,IACsCA,CADtC;AAAA,MAAA,sBAAA,GAAA,cAAA,CAAA,qBAAA,EAAA,CAAA,CAAA;AAAA,MACQJ,KADR,GAAA,sBAAA,CAAA,CAAA,CAAA;AAAA,MACeC,KADf,GAAA,sBAAA,CAAA,CAAA,CAAA;AAAA,MACsBC,KADtB,GAAA,sBAAA,CAAA,CAAA,CAAA;AAAA,MAC6BC,KAD7B,GAAA,sBAAA,CAAA,CAAA,CAAA;;AAGC,MAAA,IAAA;AACA,MAAA,OAAA;AACA,MALD,QAKC,CALD,CAOC;AACA;;AACA,MAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AAC9BR,IAAAA,IAAI,GAAJA,KAAAA;AADD,GAAA,MAGK,MAAM,IAAA,SAAA,CAZZ,sCAYY,CAAN,CAZN,CAcC;AACA;;;AACA,MAAI,CAAA,KAAA,IAAU,OAAA,KAAA,KAAd,QAAA,EACA;AACC,QAAA,KAAA,EAAW;AACVC,MAAAA,OAAO,GAAPA,KAAAA;AACAC,MAAAA,QAAQ,GAARA,KAAAA;AAFD,KAAA,MAGO;AACND,MAAAA,OAAO,GAAPA,SAAAA;AACAC,MAAAA,QAAQ,GAARA,KAAAA;AACA;;AAED,QAAA,KAAA,EAAW;AACVD,MAAAA,OAAO,GAAA,aAAA,CAAA;AAAKS,QAAAA,cAAc,EAAEJ;AAArB,OAAA,EAAPL,OAAO,CAAPA;AACA;AAZF,GAAA,CAcA;AACA;AAfA,OAgBK,IAAIU,QAAQ,CAAZ,KAAY,CAAZ,EACL;AACC,UAAA,KAAA,EAAW;AACVV,QAAAA,OAAO,GAAPA,KAAAA;AACAC,QAAAA,QAAQ,GAARA,KAAAA;AAFD,OAAA,MAGO;AACNA,QAAAA,QAAQ,GAARA,KAAAA;AACA;AAPG,KAAA,MASA,MAAM,IAAA,KAAA,CAAA,4BAAA,MAAA,CAAN,KAAM,CAAA,CAAN;;AAEL,SAAO;AACNF,IAAAA,IAAI,EADE,IAAA;AAENC,IAAAA,OAAO,EAFD,OAAA;AAGNC,IAAAA,QAAQ,EAARA;AAHM,GAAP;EAOD;;AACA;;AACA,IAAMS,QAAQ,GAAG,SAAXA,QAAW,CAAA,CAAA,EAAC;AAAA,SAAI,OAAA,CAAA,CAAA,CAAA,KAAJ,QAAA;AAAlB,CAAA","sourcesContent":["import parsePhoneNumber_ from './parsePhoneNumber_'\r\n\r\nexport default function parsePhoneNumber() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn parsePhoneNumber_(text, options, metadata)\r\n}\r\n\r\nexport function normalizeArguments(args)\r\n{\r\n\tconst [arg_1, arg_2, arg_3, arg_4] = Array.prototype.slice.call(args)\r\n\r\n\tlet text\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `parsePhoneNumber('88005553535', ...)`.\r\n\tif (typeof arg_1 === 'string') {\r\n\t\ttext = arg_1\r\n\t}\r\n\telse throw new TypeError('A text for parsing must be a string.')\r\n\r\n\t// If \"default country\" argument is being passed then move it to `options`.\r\n\t// `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\r\n\tif (!arg_2 || typeof arg_2 === 'string')\r\n\t{\r\n\t\tif (arg_4) {\r\n\t\t\toptions = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t} else {\r\n\t\t\toptions = undefined\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\r\n\t\tif (arg_2) {\r\n\t\t\toptions = { defaultCountry: arg_2, ...options }\r\n\t\t}\r\n\t}\r\n\t// `defaultCountry` is not passed.\r\n\t// Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\r\n\telse if (isObject(arg_2))\r\n\t{\r\n\t\tif (arg_3) {\r\n\t\t\toptions  = arg_2\r\n\t\t\tmetadata = arg_3\r\n\t\t} else {\r\n\t\t\tmetadata = arg_2\r\n\t\t}\r\n\t}\r\n\telse throw new Error(`Invalid second argument: ${arg_2}`)\r\n\r\n\treturn {\r\n\t\ttext,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}\r\n\r\n// Otherwise istanbul would show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst isObject = _ => typeof _ === 'object'"]},"metadata":{},"sourceType":"module"}