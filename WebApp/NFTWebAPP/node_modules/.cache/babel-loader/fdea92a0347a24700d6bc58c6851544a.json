{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport findNumbers from './findNumbers';\nexport default function findPhoneNumbersInText(text, defaultCountry, options, metadata) {\n  var args = getArguments(defaultCountry, options, metadata);\n  return findNumbers(text, args.options, args.metadata);\n}\nexport function getArguments(defaultCountry, options, metadata) {\n  if (metadata) {\n    if (defaultCountry) {\n      options = _objectSpread({}, options, {\n        defaultCountry: defaultCountry\n      });\n    }\n  } else {\n    if (options) {\n      metadata = options;\n\n      if (defaultCountry) {\n        if (is_object(defaultCountry)) {\n          options = defaultCountry;\n        } else {\n          options = {\n            defaultCountry: defaultCountry\n          };\n        }\n      } else {\n        options = undefined;\n      }\n    } else {\n      metadata = defaultCountry;\n      options = undefined;\n    }\n  }\n\n  return {\n    options: _objectSpread({}, options, {\n      v2: true\n    }),\n    metadata: metadata\n  };\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar is_object = function is_object(_) {\n  return _typeof(_) === 'object';\n};","map":{"version":3,"sources":["../source/findPhoneNumbersInText.js"],"names":["args","getArguments","findNumbers","options","defaultCountry","metadata","is_object","v2"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,WAAA,MAAA,eAAA;AAEA,eAAe,SAAA,sBAAA,CAAA,IAAA,EAAA,cAAA,EAAA,OAAA,EAAA,QAAA,EAAyE;AACvF,MAAMA,IAAI,GAAGC,YAAY,CAAA,cAAA,EAAA,OAAA,EAAzB,QAAyB,CAAzB;AACA,SAAOC,WAAW,CAAA,IAAA,EAAOF,IAAI,CAAX,OAAA,EAAqBA,IAAI,CAA3C,QAAkB,CAAlB;AACA;AAED,OAAO,SAAA,YAAA,CAAA,cAAA,EAAA,OAAA,EAAA,QAAA,EAAyD;AAC/D,MAAA,QAAA,EAAc;AACb,QAAA,cAAA,EAAoB;AACnBG,MAAAA,OAAO,GAAA,aAAA,CAAA,EAAA,EAAA,OAAA,EAAA;AAENC,QAAAA,cAAc,EAAdA;AAFM,OAAA,CAAPD;AAIA;AANF,GAAA,MAOO;AACN,QAAA,OAAA,EAAa;AACZE,MAAAA,QAAQ,GAARA,OAAAA;;AACA,UAAA,cAAA,EAAoB;AACnB,YAAIC,SAAS,CAAb,cAAa,CAAb,EAA+B;AAC9BH,UAAAA,OAAO,GAAPA,cAAAA;AADD,SAAA,MAEO;AACNA,UAAAA,OAAO,GAAG;AAAEC,YAAAA,cAAc,EAAdA;AAAF,WAAVD;AACA;AALF,OAAA,MAMO;AACNA,QAAAA,OAAO,GAAPA,SAAAA;AACA;AAVF,KAAA,MAWO;AACNE,MAAAA,QAAQ,GAARA,cAAAA;AACAF,MAAAA,OAAO,GAAPA,SAAAA;AACA;AACD;;AACD,SAAO;AACNA,IAAAA,OAAO,EAAA,aAAA,CAAA,EAAA,EAAA,OAAA,EAAA;AAENI,MAAAA,EAAE,EAAE;AAFE,KAAA,CADD;AAKNF,IAAAA,QAAQ,EAARA;AALM,GAAP;EASD;AACA;;AACA;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAA,CAAA,EAAC;AAAA,SAAI,OAAA,CAAA,CAAA,CAAA,KAAJ,QAAA;AAAnB,CAAA","sourcesContent":["import findNumbers from './findNumbers'\r\n\r\nexport default function findPhoneNumbersInText(text, defaultCountry, options, metadata) {\r\n\tconst args = getArguments(defaultCountry, options, metadata)\r\n\treturn findNumbers(text, args.options, args.metadata)\r\n}\r\n\r\nexport function getArguments(defaultCountry, options, metadata) {\r\n\tif (metadata) {\r\n\t\tif (defaultCountry) {\r\n\t\t\toptions = {\r\n\t\t\t\t...options,\r\n\t\t\t\tdefaultCountry\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tif (options) {\r\n\t\t\tmetadata = options\r\n\t\t\tif (defaultCountry) {\r\n\t\t\t\tif (is_object(defaultCountry)) {\r\n\t\t\t\t\toptions = defaultCountry\r\n\t\t\t\t} else {\r\n\t\t\t\t\toptions = { defaultCountry }\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\toptions = undefined\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tmetadata = defaultCountry\r\n\t\t\toptions = undefined\r\n\t\t}\r\n\t}\r\n\treturn {\r\n\t\toptions: {\r\n\t\t\t...options,\r\n\t\t\tv2: true\r\n\t\t},\r\n\t\tmetadata\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'"]},"metadata":{},"sourceType":"module"}