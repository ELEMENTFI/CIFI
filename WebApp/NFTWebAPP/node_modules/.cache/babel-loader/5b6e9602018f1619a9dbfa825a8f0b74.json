{"ast":null,"code":"// Matches strings that look like dates using \"/\" as a separator.\n// Examples: 3/10/2011, 31/10/96 or 08/31/95.\nvar SLASH_SEPARATED_DATES = /(?:(?:[0-3]?\\d\\/[01]?\\d)|(?:[01]?\\d\\/[0-3]?\\d))\\/(?:[12]\\d)?\\d{2}/; // Matches timestamps.\n// Examples: \"2012-01-02 08:00\".\n// Note that the reg-ex does not include the\n// trailing \":\\d\\d\" -- that is covered by TIME_STAMPS_SUFFIX.\n\nvar TIME_STAMPS = /[12]\\d{3}[-/]?[01]\\d[-/]?[0-3]\\d +[0-2]\\d$/;\nvar TIME_STAMPS_SUFFIX_LEADING = /^:[0-5]\\d/;\nexport default function isValidPreCandidate(candidate, offset, text) {\n  // Skip a match that is more likely to be a date.\n  if (SLASH_SEPARATED_DATES.test(candidate)) {\n    return false;\n  } // Skip potential time-stamps.\n\n\n  if (TIME_STAMPS.test(candidate)) {\n    var followingText = text.slice(offset + candidate.length);\n\n    if (TIME_STAMPS_SUFFIX_LEADING.test(followingText)) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["../../source/findNumbers/isValidPreCandidate.js"],"names":["SLASH_SEPARATED_DATES","TIME_STAMPS","TIME_STAMPS_SUFFIX_LEADING","followingText","text","offset","candidate"],"mappings":"AAAA;AACA;AACA,IAAMA,qBAAqB,GAA3B,mEAAA,C,CAEA;AACA;AACA;AACA;;AACA,IAAMC,WAAW,GAAjB,4CAAA;AACA,IAAMC,0BAA0B,GAAhC,WAAA;AAEA,eAAe,SAAA,mBAAA,CAAA,SAAA,EAAA,MAAA,EAAA,IAAA,EACf;AACC;AACA,MAAIF,qBAAqB,CAArBA,IAAAA,CAAJ,SAAIA,CAAJ,EAA2C;AAC1C,WAAA,KAAA;AAHF,GAAA,CAMC;;;AACA,MAAIC,WAAW,CAAXA,IAAAA,CAAJ,SAAIA,CAAJ,EACA;AACC,QAAME,aAAa,GAAGC,IAAI,CAAJA,KAAAA,CAAWC,MAAM,GAAGC,SAAS,CAAnD,MAAsBF,CAAtB;;AACA,QAAIF,0BAA0B,CAA1BA,IAAAA,CAAJ,aAAIA,CAAJ,EAAoD;AACnD,aAAA,KAAA;AACA;AACD;;AAED,SAAA,IAAA;AACA","sourcesContent":["// Matches strings that look like dates using \"/\" as a separator.\r\n// Examples: 3/10/2011, 31/10/96 or 08/31/95.\r\nconst SLASH_SEPARATED_DATES = /(?:(?:[0-3]?\\d\\/[01]?\\d)|(?:[01]?\\d\\/[0-3]?\\d))\\/(?:[12]\\d)?\\d{2}/\r\n\r\n// Matches timestamps.\r\n// Examples: \"2012-01-02 08:00\".\r\n// Note that the reg-ex does not include the\r\n// trailing \":\\d\\d\" -- that is covered by TIME_STAMPS_SUFFIX.\r\nconst TIME_STAMPS = /[12]\\d{3}[-/]?[01]\\d[-/]?[0-3]\\d +[0-2]\\d$/\r\nconst TIME_STAMPS_SUFFIX_LEADING = /^:[0-5]\\d/\r\n\r\nexport default function isValidPreCandidate(candidate, offset, text)\r\n{\r\n\t// Skip a match that is more likely to be a date.\r\n\tif (SLASH_SEPARATED_DATES.test(candidate)) {\r\n\t\treturn false\r\n\t}\r\n\r\n\t// Skip potential time-stamps.\r\n\tif (TIME_STAMPS.test(candidate))\r\n\t{\r\n\t\tconst followingText = text.slice(offset + candidate.length)\r\n\t\tif (TIME_STAMPS_SUFFIX_LEADING.test(followingText)) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\treturn true\r\n}"]},"metadata":{},"sourceType":"module"}