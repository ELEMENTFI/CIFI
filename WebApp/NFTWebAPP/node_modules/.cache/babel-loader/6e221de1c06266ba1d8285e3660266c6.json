{"ast":null,"code":"var _jsxFileName = \"D:\\\\BosonLabsNFTPROJECT\\\\nftsecondprabha\\\\CIFI\\\\WebApp\\\\NFTWebAPP\\\\src\\\\AdminRoute.js\";\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AdminRoute = ({\n  component: Component,\n  ...rest\n}) => {\n  // <AdminRoute path=\"/backupdata\" component={Backup} />\n  const isAdminUser = () => {\n    const authToken = localStorage.getItem(\"authToken\");\n\n    if (authToken === null) {\n      return false;\n    } else {\n      return true; //   isAdmin(JSON.parse(authToken).user.email);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: props => isAdminUser() ?\n    /*#__PURE__*/\n    // true ? (\n    _jsxDEV(Component, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n      to: {\n        pathname: \"/\",\n        state: {\n          from: props.location\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n\n_c = AdminRoute;\nexport default AdminRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminRoute\");","map":{"version":3,"sources":["D:/BosonLabsNFTPROJECT/nftsecondprabha/CIFI/WebApp/NFTWebAPP/src/AdminRoute.js"],"names":["React","Route","Redirect","AdminRoute","component","Component","rest","isAdminUser","authToken","localStorage","getItem","props","pathname","state","from","location"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;;;AACA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwB,KAAGC;AAA3B,CAAD,KAAuC;AAEtD;AACF,QAAMC,WAAW,GAAG,MAAM;AACxB,UAAMC,SAAS,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAlB;;AACA,QAAIF,SAAS,KAAK,IAAlB,EAAwB;AACtB,aAAO,KAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAP,CADK,CAEP;AACC;AACF,GARD;;AAUA,sBACE,QAAC,KAAD,OACMF,IADN;AAEE,IAAA,MAAM,EAAGK,KAAD,IACNJ,WAAW;AAAA;AACT;AACA,YAAC,SAAD,OAAeI;AAAf;AAAA;AAAA;AAAA;AAAA,YAFS,gBAIT,QAAC,QAAD;AACE,MAAA,EAAE,EAAE;AACFC,QAAAA,QAAQ,EAAE,GADR;AAEFC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAEH,KAAK,CAACI;AAAd;AAFL;AADN;AAAA;AAAA;AAAA;AAAA;AAPN;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CA/BD;;KAAMZ,U;AAiCN,eAAeA,UAAf","sourcesContent":["import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nconst AdminRoute = ({ component: Component, ...rest }) => {\r\n\r\n    // <AdminRoute path=\"/backupdata\" component={Backup} />\r\n  const isAdminUser = () => {\r\n    const authToken = localStorage.getItem(\"authToken\");\r\n    if (authToken === null) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    //   isAdmin(JSON.parse(authToken).user.email);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        isAdminUser() ? (\r\n          // true ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: \"/\",\r\n              state: { from: props.location },\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default AdminRoute;"]},"metadata":{},"sourceType":"module"}