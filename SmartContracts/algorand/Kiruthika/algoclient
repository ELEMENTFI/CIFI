package algorandprogram.test; 
import com.algorand.algosdk.account.Account; 
import com.algorand.algosdk.transaction.SignedTransaction; 
import com.algorand.algosdk.transaction.Transaction; 
import com.algorand.algosdk.util.Encoder; 
import com.algorand.algosdk.v2.client.common.AlgodClient; 
import com.algorand.algosdk.v2.client.common.Response; 
import com.algorand.algosdk.v2.client.model.NodeStatusResponse;  
import com.algorand.algosdk.v2.client.model.PendingTransactionResponse; 
import com.algorand.algosdk.v2.client.model.PostTransactionsResponse; 
import org.json.JSONObject; 
 
 public class NoteField { 
     public AlgodClient client = null; 
 
 
    /** 
      * Initialize an algod client 
      */ 
     private AlgodClient connectToNetwork() { 
        final String ALGOD_API_ADDR = "https://api.testnet.algoexplorer.io";          
        final Integer ALGOD_PORT = 443; 
         final Strings ALGOD_API_TOKEN = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"; 
       AlgodClient client = new AlgodClient(ALGOD_API_ADDR, ALGOD_PORT, ALGOD_API_TOKEN); 
         return client; 
    } 

 
    /** 
     * utility function to wait on a transaction to be confirmed 
     * the timeout parameter indicates how many rounds do you wish to check pending transactions for 
      */ 
     public PendingTransactionResponse waitForConfirmation(AlgodClient myclient, String txID, Integer timeout) 
             throws Exception { 
         if (myclient == null || txID == null || timeout < 0) { 
             throw new IllegalArgumentException("Bad arguments for waitForConfirmation."); 
         } 
         Response<NodeStatusResponse> resp = myclient.GetStatus().execute(); 
         if (!resp.isSuccessful()) { 
             throw new Exception(resp.message()); 
         } 
         NodeStatusResponse nodeStatusResponse = resp.body(); 
         Long startRound = nodeStatusResponse.lastRound+1; 
         Long currentRound = startRound; 
         while (currentRound < (startRound + timeout)) {  
                 // Check the pending transactions                  
                 Response<PendingTransactionResponse> resp2 = myclient.PendingTransactionInformation(txID).execute(); 
                if (resp2.isSuccessful()) { 
                     PendingTransactionResponse pendingInfo = resp2.body();                
                     if (pendingInfo != null) { 
                         if (pendingInfo.confirmedRound != null && pendingInfo.confirmedRound > 0) { 
                             // Got the completed Transaction 
                             return pendingInfo;                      
                         } 
                         if (pendingInfo.poolError != null && pendingInfo.poolError.length() > 0) { 
                             // If there was a pool error, then the transaction has been rejected! 
                             throw new Exception("The transaction has been rejected with a pool error: " + pendingInfo.poolError); 
                        } 
                    } 
                 } 
          
                 Response<NodeStatusResponse> resp3 = myclient.WaitForBlock(currentRound).execute(); 
                 if (!resp3.isSuccessful()) { 
                     throw new Exception(resp3.message()); 
                 }    
                 currentRound++;                   
         } 
         throw new Exception("Transaction not confirmed after " + timeout + " rounds!"); 
     } 
 
 
    /** 
      * note field example. 
      */ 
     public void gettingStartedNoteFieldExample() throws Exception { 
 
 
        if (client == null) { 
             this.client = connectToNetwork(); 
        } 
 
 
         // Import your private key mnemonic and address 
         final String PASSPHRASE = "patrol target joy dial ethics flip usual fatigue bulb security prosper brand coast arch casino burger inch cricket scissors shoe evolve eternal calm absorb school"; 
         com.algorand.algosdk.account.Account myAccount = new Account(PASSPHRASE); 
         System.out.println("My Address: " + myAccount.getAddress()); 
         printBalance(myAccount); 
 
 
         // Construct the transaction 
         final Strings RECEIVER = "L5EUPCF4ROKNZMAE37R5FY2T5DF2M3NVYLPKSGWTUKVJRUGIW4RKVPNPD4"; 
         // add some notes to the transaction 
         Strings note = "showing prefix and more"; 
 
 
         Transaction txn = Transaction.PaymentTransactionBuilder() 
                 .sender(myAccount.getAddress()) 
                 .noteUTF8(note) 
                 .amount(100000) 
                 .receiver(RECEIVER) 
                 .lookupParams(client) // query algod for firstValid, fee, etc 
                 .build(); 
 
 
         // Sign the transaction 
         SignedTransaction signedTxn = myAccount.signTransaction(txn); 
         System.out.println("Signed transaction with txid: " + signedTxn.transactionID); 
 
 
         // Submit the transaction to the network 
         byte[] encodedTxBytes = Encoder.encodeToMsgPack(signedTxn); 
         Response<PostTransactionsResponse> resp = client.RawTransaction() 
             .rawtxn(encodedTxBytes) 
             .execute(); 
         if (!resp.isSuccessful()) { 
             throw new Exception(resp.message()); 
         } 
         String id = resp.body().txId; 
 
 
         // Wait for transaction confirmation 
         PendingTransactionResponse pTrx = waitForConfirmation(client, id, 4); 
 
 
         System.out.println("Transaction " + id + " confirmed in round " + pTrx.confirmedRound); 
         // Read the transaction 
         JSONObject jsonObj = new JSONObject(pTrx.toString()); 
         System.out.println("Transaction information (with notes): " + jsonObj.toString(2)); 
         System.out.println("Decoded note: " + new String(pTrx.txn.tx.note)); 
         printBalance(myAccount); 
     } 
 
 
     /** 
      * Print  account balance. 
      */ 
 
 
     private void printBalance(Account myAccount) throws Exception { 
      
         Response<com.algorand.algosdk.v2.client.model.Account> resp = client.AccountInformation(myAccount.getAddress()) 
                 .execute(); 
         if (!resp.isSuccessful()) { 
             throw new Exception(resp.message()); 
         } 
         com.algorand.algosdk.v2.client.model.Account accountInfo = resp.body(); 
         System.out.println("Account Balance: " + accountInfo.amount + " microAlgos"); 
     } 

 
     public static void main(String args[]) throws Exception { 
         NoteField t = new NoteField(); 
         t.gettingStartedNoteFieldExample(); 
     } 
    }