{"ast":null,"code":"/** Returns a regular expression quantifier with an upper and lower limit. */\nexport function limit(lower, upper) {\n  if (lower < 0 || upper <= 0 || upper < lower) {\n    throw new TypeError();\n  }\n\n  return \"{\".concat(lower, \",\").concat(upper, \"}\");\n}\n/**\r\n * Trims away any characters after the first match of {@code pattern} in {@code candidate},\r\n * returning the trimmed version.\r\n */\n\nexport function trimAfterFirstMatch(regexp, string) {\n  var index = string.search(regexp);\n\n  if (index >= 0) {\n    return string.slice(0, index);\n  }\n\n  return string;\n}\nexport function startsWith(string, substring) {\n  return string.indexOf(substring) === 0;\n}\nexport function endsWith(string, substring) {\n  return string.indexOf(substring, string.length - substring.length) === string.length - substring.length;\n}","map":{"version":3,"sources":["../../source/findNumbers/util.js"],"names":["lower","upper","index","string","substring"],"mappings":"AAAA;AACA,OAAO,SAAA,KAAA,CAAA,KAAA,EAAA,KAAA,EACP;AACC,MAAKA,KAAK,GAAN,CAACA,IAAeC,KAAK,IAArB,CAACD,IAA+BC,KAAK,GAAzC,KAAA,EAAoD;AACnD,UAAM,IAAN,SAAM,EAAN;AACA;;AACD,SAAA,IAAA,MAAA,CAAA,KAAA,EAAA,GAAA,EAAA,MAAA,CAAA,KAAA,EAAA,GAAA,CAAA;AACA;AAED;;;;;AAIA,OAAO,SAAA,mBAAA,CAAA,MAAA,EAAA,MAAA,EACP;AACC,MAAMC,KAAK,GAAGC,MAAM,CAANA,MAAAA,CAAd,MAAcA,CAAd;;AAEA,MAAID,KAAK,IAAT,CAAA,EAAgB;AACf,WAAOC,MAAM,CAANA,KAAAA,CAAAA,CAAAA,EAAP,KAAOA,CAAP;AACA;;AAED,SAAA,MAAA;AACA;AAED,OAAO,SAAA,UAAA,CAAA,MAAA,EAAA,SAAA,EACP;AACC,SAAOA,MAAM,CAANA,OAAAA,CAAAA,SAAAA,MAAP,CAAA;AACA;AAED,OAAO,SAAA,QAAA,CAAA,MAAA,EAAA,SAAA,EACP;AACC,SAAOA,MAAM,CAANA,OAAAA,CAAAA,SAAAA,EAA0BA,MAAM,CAANA,MAAAA,GAAgBC,SAAS,CAAnDD,MAAAA,MAAgEA,MAAM,CAANA,MAAAA,GAAgBC,SAAS,CAAhG,MAAA;AACA","sourcesContent":["/** Returns a regular expression quantifier with an upper and lower limit. */\r\nexport function limit(lower, upper)\r\n{\r\n\tif ((lower < 0) || (upper <= 0) || (upper < lower)) {\r\n\t\tthrow new TypeError()\r\n\t}\r\n\treturn `{${lower},${upper}}`\r\n}\r\n\r\n/**\r\n * Trims away any characters after the first match of {@code pattern} in {@code candidate},\r\n * returning the trimmed version.\r\n */\r\nexport function trimAfterFirstMatch(regexp, string)\r\n{\r\n\tconst index = string.search(regexp)\r\n\r\n\tif (index >= 0) {\r\n\t\treturn string.slice(0, index)\r\n\t}\r\n\r\n\treturn string\r\n}\r\n\r\nexport function startsWith(string, substring)\r\n{\r\n\treturn string.indexOf(substring) === 0\r\n}\r\n\r\nexport function endsWith(string, substring)\r\n{\r\n\treturn string.indexOf(substring, string.length - substring.length) === string.length - substring.length\r\n}\r\n"]},"metadata":{},"sourceType":"module"}