{"version":3,"sources":["../source/InputSmart.js"],"names":["React","useCallback","PropTypes","Input","AsYouType","parsePhoneNumberCharacter","getInputValuePrefix","removeInputValuePrefix","createInput","defaultMetadata","InputSmart","ref","country","international","withCountryCallingCode","metadata","rest","format","value","formatter","prefix","text","input","template","getTemplate","forwardRef","propTypes","string","bool","object","isRequired","defaultProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,SAAT,EAAoBC,yBAApB,QAAqD,wBAArD;AAEA,SAASC,mBAAT,EAA8BC,sBAA9B,QAA4D,4BAA5D;AAEA;;;;;AAIA,OAAO,SAASC,WAAT,CAAqBC,eAArB,EACP;AACC,WAASC,UAAT,OAMGC,GANH,EAMQ;AAAA,QALPC,OAKO,QALPA,OAKO;AAAA,QAJPC,aAIO,QAJPA,aAIO;AAAA,QAHPC,sBAGO,QAHPA,sBAGO;AAAA,QAFPC,QAEO,QAFPA,QAEO;AAAA,QADJC,IACI;;AACP,QAAMC,MAAM,GAAGhB,WAAW,CAAC,UAACiB,KAAD,EAAW;AACrC;AACA,UAAMC,SAAS,GAAG,IAAIf,SAAJ,CAAcQ,OAAd,EAAuBG,QAAvB,CAAlB;AACA,UAAMK,MAAM,GAAGd,mBAAmB,CAAC;AAClCM,QAAAA,OAAO,EAAPA,OADkC;AAElCC,QAAAA,aAAa,EAAbA,aAFkC;AAGlCC,QAAAA,sBAAsB,EAAtBA,sBAHkC;AAIlCC,QAAAA,QAAQ,EAARA;AAJkC,OAAD,CAAlC,CAHqC,CASrC;;AACA,UAAIM,IAAI,GAAGF,SAAS,CAACG,KAAV,CAAgBF,MAAM,GAAGF,KAAzB,CAAX;AACA,UAAIK,QAAQ,GAAGJ,SAAS,CAACK,WAAV,EAAf;;AACA,UAAIJ,MAAJ,EAAY;AACXC,QAAAA,IAAI,GAAGd,sBAAsB,CAACc,IAAD,EAAOD,MAAP,CAA7B,CADW,CAEX;;AACA,YAAIG,QAAJ,EAAc;AACbA,UAAAA,QAAQ,GAAGhB,sBAAsB,CAACgB,QAAD,EAAWH,MAAX,CAAjC;AACA;AACD;;AACD,aAAO;AACNC,QAAAA,IAAI,EAAJA,IADM;AAENE,QAAAA,QAAQ,EAARA;AAFM,OAAP;AAIA,KAvByB,EAuBvB,CAACX,OAAD,EAAUG,QAAV,CAvBuB,CAA1B;AAwBA,WACC,oBAAC,KAAD,eACKC,IADL;AAEC,MAAA,GAAG,EAAEL,GAFN;AAGC,MAAA,KAAK,EAAEN,yBAHR;AAIC,MAAA,MAAM,EAAEY;AAJT,OADD;AAOA;;AAEDP,EAAAA,UAAU,GAAGV,KAAK,CAACyB,UAAN,CAAiBf,UAAjB,CAAb;AAEAA,EAAAA,UAAU,CAACgB,SAAX,GAAuB;AACtB;;;;;;;;;;AAUAd,IAAAA,OAAO,EAAEV,SAAS,CAACyB,MAXG;;AAatB;;;;;;;;;;AAUAd,IAAAA,aAAa,EAAEX,SAAS,CAAC0B,IAvBH;;AAyBtB;;;;;;AAMAd,IAAAA,sBAAsB,EAAEZ,SAAS,CAAC0B,IA/BZ;;AAiCtB;;;AAGAb,IAAAA,QAAQ,EAAEb,SAAS,CAAC2B,MAAV,CAAiBC;AApCL,GAAvB;AAuCApB,EAAAA,UAAU,CAACqB,YAAX,GAA0B;AACzBhB,IAAAA,QAAQ,EAAEN;AADe,GAA1B;AAIA,SAAOC,UAAP;AACA;AAED,eAAeF,WAAW,EAA1B","sourcesContent":["import React, { useCallback } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Input from 'input-format/react'\r\nimport { AsYouType, parsePhoneNumberCharacter } from 'libphonenumber-js/core'\r\n\r\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix'\r\n\r\n/**\r\n * This input uses `input-format` library\r\n * for \"smart\" caret positioning.\r\n */\r\nexport function createInput(defaultMetadata)\r\n{\r\n\tfunction InputSmart({\r\n\t\tcountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tmetadata,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\tconst format = useCallback((value) => {\r\n\t\t\t// \"As you type\" formatter.\r\n\t\t\tconst formatter = new AsYouType(country, metadata)\r\n\t\t\tconst prefix = getInputValuePrefix({\r\n\t\t\t\tcountry,\r\n\t\t\t\tinternational,\r\n\t\t\t\twithCountryCallingCode,\r\n\t\t\t\tmetadata\r\n\t\t\t})\r\n\t\t\t// Format the number.\r\n\t\t\tlet text = formatter.input(prefix + value)\r\n\t\t\tlet template = formatter.getTemplate()\r\n\t\t\tif (prefix) {\r\n\t\t\t\ttext = removeInputValuePrefix(text, prefix)\r\n\t\t\t\t// `AsYouType.getTemplate()` can be `undefined`.\r\n\t\t\t\tif (template) {\r\n\t\t\t\t\ttemplate = removeInputValuePrefix(template, prefix)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\ttext,\r\n\t\t\t\ttemplate\r\n\t\t\t}\r\n\t\t}, [country, metadata])\r\n\t\treturn (\r\n\t\t\t<Input\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tparse={parsePhoneNumberCharacter}\r\n\t\t\t\tformat={format}/>\r\n\t\t)\r\n\t}\r\n\r\n\tInputSmart = React.forwardRef(InputSmart)\r\n\r\n\tInputSmart.propTypes = {\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * as a national phone number (e.g. `(800) 555 35 35`).\r\n\t\t * E.g. \"US\", \"RU\", etc.\r\n\t\t * If no `country` is passed then `value`\r\n\t\t * is formatted as an international phone number.\r\n\t\t * (e.g. `+7 800 555 35 35`)\r\n\t\t * Perhaps the `country` property should have been called `defaultCountry`\r\n\t\t * because if `value` is an international number then `country` is ignored.\r\n\t\t */\r\n\t\tcountry: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * If `country` property is passed along with `international={true}` property\r\n\t\t * then the phone number will be input in \"international\" format for that `country`\r\n\t\t * (without \"country calling code\").\r\n\t\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t\t * (without \"country calling code\" `+1`).\r\n\t\t */\r\n\t\tinternational: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * If `country` and `international` properties are set,\r\n\t\t * then by default it won't include \"country calling code\" in the input field.\r\n\t\t * To change that, pass `withCountryCallingCode` property,\r\n\t\t * and it will include \"country calling code\" in the input field.\r\n\t\t */\r\n\t\twithCountryCallingCode: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object.isRequired\r\n\t}\r\n\r\n\tInputSmart.defaultProps = {\r\n\t\tmetadata: defaultMetadata\r\n\t}\r\n\r\n\treturn InputSmart\r\n}\r\n\r\nexport default createInput()"],"file":"InputSmart.js"}