{"ast":null,"code":"import Metadata from '../metadata';\nimport matchesEntirely from './matchesEntirely';\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL']; // Finds out national phone number type (fixed line, mobile, etc)\n\nexport default function getNumberType(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {}; // When `parse()` returned `{}`\n  // meaning that the phone number is not a valid one.\n\n  if (!input.country) {\n    return;\n  }\n\n  metadata = new Metadata(metadata);\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode);\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // The following is copy-pasted from the original function:\n  // https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n  // Is this national number even valid for this country\n\n  if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n    return;\n  } // Is it fixed line number\n\n\n  if (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {\n    // Because duplicate regular expressions are removed\n    // to reduce metadata size, if \"mobile\" pattern is \"\"\n    // then it means it was removed due to being a duplicate of the fixed-line pattern.\n    //\n    if (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // v1 metadata.\n    // Legacy.\n    // Deprecated.\n\n\n    if (!metadata.type('MOBILE')) {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // Check if the number happens to qualify as both fixed line and mobile.\n    // (no such country in the minimal metadata set)\n\n    /* istanbul ignore if */\n\n\n    if (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {\n      return 'FIXED_LINE_OR_MOBILE';\n    }\n\n    return 'FIXED_LINE';\n  }\n\n  for (var _i = 0, _NON_FIXED_LINE_PHONE = NON_FIXED_LINE_PHONE_TYPES; _i < _NON_FIXED_LINE_PHONE.length; _i++) {\n    var type = _NON_FIXED_LINE_PHONE[_i];\n\n    if (isNumberTypeEqualTo(nationalNumber, type, metadata)) {\n      return type;\n    }\n  }\n}\nexport function isNumberTypeEqualTo(nationalNumber, type, metadata) {\n  type = metadata.type(type);\n\n  if (!type || !type.pattern()) {\n    return false;\n  } // Check if any possible number lengths are present;\n  // if so, we use them to avoid checking\n  // the validation pattern if they don't match.\n  // If they are absent, this means they match\n  // the general description, which we have\n  // already checked before a specific number type.\n\n\n  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n    return false;\n  }\n\n  return matchesEntirely(nationalNumber, type.pattern());\n}","map":{"version":3,"sources":["../../source/helpers/getNumberType.js"],"names":["NON_FIXED_LINE_PHONE_TYPES","options","input","metadata","nationalNumber","matchesEntirely","isNumberTypeEqualTo","type"],"mappings":"AAAA,OAAA,QAAA,MAAA,aAAA;AACA,OAAA,eAAA,MAAA,mBAAA;AAEA,IAAMA,0BAA0B,GAAG,CAAA,QAAA,EAAA,cAAA,EAAA,WAAA,EAAA,aAAA,EAAA,MAAA,EAAA,iBAAA,EAAA,OAAA,EAAA,KAAA,EAAnC,WAAmC,CAAnC,C,CAYA;;AACA,eAAe,SAAA,aAAA,CAAA,KAAA,EAAA,OAAA,EAAA,QAAA,EACf;AACC;AACA;AACAC,EAAAA,OAAO,GAAGA,OAAO,IAHlB,EAGCA,CAHD,CAKC;AACA;;AACA,MAAI,CAACC,KAAK,CAAV,OAAA,EAAoB;AACnB;AACA;;AAEDC,EAAAA,QAAQ,GAAG,IAAA,QAAA,CAAXA,QAAW,CAAXA;AAEAA,EAAAA,QAAQ,CAARA,mBAAAA,CAA6BD,KAAK,CAAlCC,OAAAA,EAA4CD,KAAK,CAAjDC,kBAAAA;AAEA,MAAMC,cAAc,GAAGH,OAAO,CAAPA,EAAAA,GAAaC,KAAK,CAAlBD,cAAAA,GAAoCC,KAAK,CAfjE,KAeC,CAfD,CAiBC;AACA;AAEA;;AACA,MAAI,CAACG,eAAe,CAAA,cAAA,EAAiBF,QAAQ,CAA7C,qBAAqCA,EAAjB,CAApB,EAAwE;AACvE;AAtBF,GAAA,CAyBC;;;AACA,MAAIG,mBAAmB,CAAA,cAAA,EAAA,YAAA,EAAvB,QAAuB,CAAvB,EAAiE;AAChE;AACA;AACA;AACA;AACA,QAAIH,QAAQ,CAARA,IAAAA,CAAAA,QAAAA,KAA2BA,QAAQ,CAARA,IAAAA,CAAAA,QAAAA,EAAAA,OAAAA,OAA/B,EAAA,EAAyE;AACxE,aAAA,sBAAA;AAN+D,KAAA,CAShE;AACA;AACA;;;AACA,QAAI,CAACA,QAAQ,CAARA,IAAAA,CAAL,QAAKA,CAAL,EAA8B;AAC7B,aAAA,sBAAA;AAb+D,KAAA,CAgBhE;AACA;;AACA;;;AACA,QAAIG,mBAAmB,CAAA,cAAA,EAAA,QAAA,EAAvB,QAAuB,CAAvB,EAA6D;AAC5D,aAAA,sBAAA;AACA;;AAED,WAAA,YAAA;AACA;;AAED,OAAA,IAAA,EAAA,GAAA,CAAA,EAAA,qBAAA,GAAA,0BAAA,EAAA,EAAA,GAAA,qBAAA,CAAA,MAAA,EAAA,EAAA,EAAA,EAA+C;AAA1C,QAAMC,IAAI,GAAA,qBAAA,CAAV,EAAU,CAAV;;AACJ,QAAID,mBAAmB,CAAA,cAAA,EAAA,IAAA,EAAvB,QAAuB,CAAvB,EAAyD;AACxD,aAAA,IAAA;AACA;AACD;AACD;AAED,OAAO,SAAA,mBAAA,CAAA,cAAA,EAAA,IAAA,EAAA,QAAA,EAA6D;AACnEC,EAAAA,IAAI,GAAGJ,QAAQ,CAARA,IAAAA,CAAPI,IAAOJ,CAAPI;;AACA,MAAI,CAAA,IAAA,IAAS,CAACA,IAAI,CAAlB,OAAcA,EAAd,EAA8B;AAC7B,WAAA,KAAA;AAHkE,GAAA,CAKnE;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIA,IAAI,CAAJA,eAAAA,MACHA,IAAI,CAAJA,eAAAA,GAAAA,OAAAA,CAA+BH,cAAc,CAA7CG,MAAAA,IADD,CAAA,EAC4D;AAC3D,WAAA,KAAA;AACA;;AACD,SAAOF,eAAe,CAAA,cAAA,EAAiBE,IAAI,CAA3C,OAAuCA,EAAjB,CAAtB;AACA","sourcesContent":["import Metadata from '../metadata'\r\nimport matchesEntirely from './matchesEntirely'\r\n\r\nconst NON_FIXED_LINE_PHONE_TYPES = [\r\n\t'MOBILE',\r\n\t'PREMIUM_RATE',\r\n\t'TOLL_FREE',\r\n\t'SHARED_COST',\r\n\t'VOIP',\r\n\t'PERSONAL_NUMBER',\r\n\t'PAGER',\r\n\t'UAN',\r\n\t'VOICEMAIL'\r\n]\r\n\r\n// Finds out national phone number type (fixed line, mobile, etc)\r\nexport default function getNumberType(input, options, metadata)\r\n{\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\t// When `parse()` returned `{}`\r\n\t// meaning that the phone number is not a valid one.\r\n\tif (!input.country) {\r\n\t\treturn\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tmetadata.selectNumberingPlan(input.country, input.countryCallingCode)\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// The following is copy-pasted from the original function:\r\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\r\n\r\n\t// Is this national number even valid for this country\r\n\tif (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Is it fixed line number\r\n\tif (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {\r\n\t\t// Because duplicate regular expressions are removed\r\n\t\t// to reduce metadata size, if \"mobile\" pattern is \"\"\r\n\t\t// then it means it was removed due to being a duplicate of the fixed-line pattern.\r\n\t\t//\r\n\t\tif (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// v1 metadata.\r\n\t\t// Legacy.\r\n\t\t// Deprecated.\r\n\t\tif (!metadata.type('MOBILE')) {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\r\n\t\t// (no such country in the minimal metadata set)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\treturn 'FIXED_LINE'\r\n\t}\r\n\r\n\tfor (const type of NON_FIXED_LINE_PHONE_TYPES) {\r\n\t\tif (isNumberTypeEqualTo(nationalNumber, type, metadata)) {\r\n\t\t\treturn type\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function isNumberTypeEqualTo(nationalNumber, type, metadata) {\r\n\ttype = metadata.type(type)\r\n\tif (!type || !type.pattern()) {\r\n\t\treturn false\r\n\t}\r\n\t// Check if any possible number lengths are present;\r\n\t// if so, we use them to avoid checking\r\n\t// the validation pattern if they don't match.\r\n\t// If they are absent, this means they match\r\n\t// the general description, which we have\r\n\t// already checked before a specific number type.\r\n\tif (type.possibleLengths() &&\r\n\t\ttype.possibleLengths().indexOf(nationalNumber.length) < 0) {\r\n\t\treturn false\r\n\t}\r\n\treturn matchesEntirely(nationalNumber, type.pattern())\r\n}"]},"metadata":{},"sourceType":"module"}