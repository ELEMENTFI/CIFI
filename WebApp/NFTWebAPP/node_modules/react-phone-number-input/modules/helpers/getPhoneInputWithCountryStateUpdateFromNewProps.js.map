{"version":3,"sources":["../../source/helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js"],"names":["getInitialPhoneDigits","getCountryForPartialE164Number","parsePhoneNumber","isCountrySupportedWithError","getSupportedCountries","getPhoneInputWithCountryStateUpdateFromNewProps","props","prevProps","state","metadata","countries","newDefaultCountry","defaultCountry","newValue","value","newReset","reset","international","displayInitialValueAsLocalNumber","initialValueFormat","prevDefaultCountry","prevValue","prevReset","country","hasUserSelectedACountry","_getInitialPhoneDigits","parameters","useNationalFormat","phoneDigits","undefined","isNewDefaultCountrySupported","noValueHasBeenEnteredByTheUser","noValueHasBeenEntered","phoneNumber","parsedCountry","supportedCountries","indexOf","hasUserSelectedACountryUpdate"],"mappings":"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","sourcesContent":["import {\r\n\tgetInitialPhoneDigits,\r\n\tgetCountryForPartialE164Number,\r\n\tparsePhoneNumber\r\n} from './phoneInputHelpers'\r\n\r\nimport {\r\n\tisCountrySupportedWithError,\r\n\tgetSupportedCountries\r\n} from './countries'\r\n\r\nexport default function getPhoneInputWithCountryStateUpdateFromNewProps(props, prevProps, state) {\r\n\tconst {\r\n\t\tmetadata,\r\n\t\tcountries,\r\n\t\tdefaultCountry: newDefaultCountry,\r\n\t\tvalue: newValue,\r\n\t\treset: newReset,\r\n\t\tinternational,\r\n\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t// superceded by `initialValueFormat` property.\r\n\t\tdisplayInitialValueAsLocalNumber,\r\n\t\tinitialValueFormat\r\n\t} = props\r\n\r\n\tconst {\r\n\t\tdefaultCountry: prevDefaultCountry,\r\n\t\tvalue: prevValue,\r\n\t\treset: prevReset\r\n\t} = prevProps\r\n\r\n\tconst {\r\n\t\tcountry,\r\n\t\tvalue,\r\n\t\t// If the user has already manually selected a country\r\n\t\t// then don't override that already selected country\r\n\t\t// if the `defaultCountry` property changes.\r\n\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\t\thasUserSelectedACountry\r\n\t} = state\r\n\r\n\tconst _getInitialPhoneDigits = (parameters) => getInitialPhoneDigits({\r\n\t\t...parameters,\r\n\t\tinternational,\r\n\t\tuseNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\r\n\t\tmetadata\r\n\t})\r\n\r\n\t// Some users requested a way to reset the component\r\n\t// (both number `<input/>` and country `<select/>`).\r\n\t// Whenever `reset` property changes both number `<input/>`\r\n\t// and country `<select/>` are reset.\r\n\t// It's not implemented as some instance `.reset()` method\r\n\t// because `ref` is forwarded to `<input/>`.\r\n\t// It's also not replaced with just resetting `country` on\r\n\t// external `value` reset, because a user could select a country\r\n\t// and then not input any `value`, and so the selected country\r\n\t// would be \"stuck\", if not using this `reset` property.\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\r\n\tif (newReset !== prevReset) {\r\n\t\treturn {\r\n\t\t\tphoneDigits: _getInitialPhoneDigits({\r\n\t\t\t\tvalue: undefined,\r\n\t\t\t\tdefaultCountry: newDefaultCountry\r\n\t\t\t}),\r\n\t\t\tvalue: undefined,\r\n\t\t\tcountry: newDefaultCountry,\r\n\t\t\thasUserSelectedACountry: undefined\r\n\t\t}\r\n\t}\r\n\r\n\t// `value` is the value currently shown in the component:\r\n\t// it's stored in the component's `state`, and it's not the `value` property.\r\n\t// `prevValue` is \"previous `value` property\".\r\n\t// `newValue` is \"new `value` property\".\r\n\r\n\t// If the default country changed\r\n\t// (e.g. in case of ajax GeoIP detection after page loaded)\r\n\t// then select it, but only if the user hasn't already manually\r\n\t// selected a country, and no phone number has been manually entered so far.\r\n\t// Because if the user has already started inputting a phone number\r\n\t// then they're okay with no country being selected at all (\"International\")\r\n\t// and they don't want to be disturbed, don't want their input to be screwed, etc.\r\n\tif (newDefaultCountry !== prevDefaultCountry) {\r\n\t\tconst isNewDefaultCountrySupported = !newDefaultCountry || isCountrySupportedWithError(newDefaultCountry, metadata)\r\n\t\tconst noValueHasBeenEnteredByTheUser = (\r\n\t\t\t// By default, \"no value has been entered\" means `value` is `undefined`.\r\n\t\t\t!value ||\r\n\t\t\t// When `international` is `true`, and some country has been pre-selected,\r\n\t\t\t// then the `<input/>` contains a pre-filled value of `+${countryCallingCode}${leadingDigits}`,\r\n\t\t\t// so in case of `international` being `true`, \"the user hasn't entered anything\" situation\r\n\t\t\t// doesn't just mean `value` is `undefined`, but could also mean `value` is `+${countryCallingCode}`.\r\n\t\t\t(international && value === _getInitialPhoneDigits({\r\n\t\t\t\tvalue: undefined,\r\n\t\t\t\tdefaultCountry: prevDefaultCountry\r\n\t\t\t}))\r\n\t\t)\r\n\t\t// Only update the `defaultCountry` property if no phone number\r\n\t\t// has been entered by the user or pre-set by the application.\r\n\t\tconst noValueHasBeenEntered = !newValue && noValueHasBeenEnteredByTheUser\r\n\t\tif (!hasUserSelectedACountry && isNewDefaultCountrySupported && noValueHasBeenEntered) {\r\n\t\t\treturn {\r\n\t\t\t\tcountry: newDefaultCountry,\r\n\t\t\t\t// If `phoneDigits` is empty, then automatically select the new `country`\r\n\t\t\t\t// and set `phoneDigits` to `+{getCountryCallingCode(newCountry)}`.\r\n\t\t\t\t// The code assumes that \"no phone number has been entered by the user\",\r\n\t\t\t\t// and no `value` property has been passed, so the `phoneNumber` parameter\r\n\t\t\t\t// of `_getInitialPhoneDigits({ value, phoneNumber, ... })` is `undefined`.\r\n\t\t\t\tphoneDigits: _getInitialPhoneDigits({\r\n\t\t\t\t\tvalue: undefined,\r\n\t\t\t\t\tdefaultCountry: newDefaultCountry\r\n\t\t\t\t}),\r\n\t\t\t\t// `value` is `undefined` and it stays so.\r\n\t\t\t\tvalue: undefined\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If a new `value` is set externally.\r\n\t// (e.g. as a result of an ajax API request\r\n\t//  to get user's phone after page loaded)\r\n\t// The first part — `newValue !== prevValue` —\r\n\t// is basically `props.value !== prevProps.value`\r\n\t// so it means \"if value property was changed externally\".\r\n\t// The second part — `newValue !== value` —\r\n\t// is for ignoring the `getDerivedStateFromProps()` call\r\n\t// which happens in `this.onChange()` right after `this.setState()`.\r\n\t// If this `getDerivedStateFromProps()` call isn't ignored\r\n\t// then the country flag would reset on each input.\r\n\tif (newValue !== prevValue && newValue !== value) {\r\n\t\tlet phoneNumber\r\n\t\tlet parsedCountry\r\n\t\tif (newValue) {\r\n\t\t\tphoneNumber = parsePhoneNumber(newValue, metadata)\r\n\t\t\tconst supportedCountries = getSupportedCountries(countries, metadata)\r\n\t\t\tif (phoneNumber && phoneNumber.country) {\r\n\t\t\t\t// Ignore `else` because all countries are supported in metadata.\r\n\t\t\t\t/* istanbul ignore next */\r\n\t\t\t\tif (!supportedCountries || supportedCountries.indexOf(phoneNumber.country) >= 0) {\r\n\t\t\t\t\tparsedCountry = phoneNumber.country\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tparsedCountry = getCountryForPartialE164Number(newValue, {\r\n\t\t\t\t\tcountry: undefined,\r\n\t\t\t\t\tcountries: supportedCountries,\r\n\t\t\t\t\tmetadata\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet hasUserSelectedACountryUpdate\r\n\t\tif (!newValue) {\r\n\t\t\t// Reset `hasUserSelectedACountry` flag in `state`.\r\n\t\t\thasUserSelectedACountryUpdate = {\r\n\t\t\t\thasUserSelectedACountry: undefined\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\t...hasUserSelectedACountryUpdate,\r\n\t\t\tphoneDigits: _getInitialPhoneDigits({\r\n\t\t\t\tphoneNumber,\r\n\t\t\t\tvalue: newValue,\r\n\t\t\t\tdefaultCountry: newDefaultCountry\r\n\t\t\t}),\r\n\t\t\tvalue: newValue,\r\n\t\t\tcountry: newValue ? parsedCountry : newDefaultCountry\r\n\t\t}\r\n\t}\r\n\r\n\t// `defaultCountry` didn't change.\r\n\t// `value` didn't change.\r\n\t// `phoneDigits` didn't change, because `value` didn't change.\r\n\t//\r\n\t// So no need to update state.\r\n}"],"file":"getPhoneInputWithCountryStateUpdateFromNewProps.js"}