{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport compare from './tools/semver-compare'; // Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\n\nvar V2 = '1.0.18'; // Added \"idd_prefix\" and \"default_idd_prefix\".\n\nvar V3 = '1.2.0'; // Moved `001` country code to \"nonGeographic\" section of metadata.\n\nvar V4 = '1.7.35';\nvar DEFAULT_EXT_PREFIX = ' ext. ';\nvar CALLING_CODE_REG_EXP = /^\\d+$/;\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\n\nvar Metadata = /*#__PURE__*/function () {\n  function Metadata(metadata) {\n    _classCallCheck(this, Metadata);\n\n    validateMetadata(metadata);\n    this.metadata = metadata;\n    setVersion.call(this, metadata);\n  }\n\n  _createClass(Metadata, [{\n    key: \"getCountries\",\n    value: function getCountries() {\n      return Object.keys(this.metadata.countries).filter(function (_) {\n        return _ !== '001';\n      });\n    }\n  }, {\n    key: \"getCountryMetadata\",\n    value: function getCountryMetadata(countryCode) {\n      return this.metadata.countries[countryCode];\n    }\n  }, {\n    key: \"nonGeographic\",\n    value: function nonGeographic() {\n      if (this.v1 || this.v2 || this.v3) return; // `nonGeographical` was a typo.\n      // It's present in metadata generated from `1.7.35` to `1.7.37`.\n\n      return this.metadata.nonGeographic || this.metadata.nonGeographical;\n    }\n  }, {\n    key: \"hasCountry\",\n    value: function hasCountry(country) {\n      return this.getCountryMetadata(country) !== undefined;\n    }\n  }, {\n    key: \"hasCallingCode\",\n    value: function hasCallingCode(callingCode) {\n      if (this.getCountryCodesForCallingCode(callingCode)) {\n        return true;\n      }\n\n      if (this.nonGeographic()) {\n        if (this.nonGeographic()[callingCode]) {\n          return true;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"isNonGeographicCallingCode\",\n    value: function isNonGeographicCallingCode(callingCode) {\n      if (this.nonGeographic()) {\n        return this.nonGeographic()[callingCode] ? true : false;\n      } else {\n        return this.getCountryCodesForCallingCode(callingCode) ? false : true;\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"country\",\n    value: function country(countryCode) {\n      return this.selectNumberingPlan(countryCode);\n    }\n  }, {\n    key: \"selectNumberingPlan\",\n    value: function selectNumberingPlan(countryCode, callingCode) {\n      // Supports just passing `callingCode` as the first argument.\n      if (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\n        callingCode = countryCode;\n        countryCode = null;\n      }\n\n      if (countryCode && countryCode !== '001') {\n        if (!this.hasCountry(countryCode)) {\n          throw new Error(\"Unknown country: \".concat(countryCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this);\n      } else if (callingCode) {\n        if (!this.hasCallingCode(callingCode)) {\n          throw new Error(\"Unknown calling code: \".concat(callingCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this);\n      } else {\n        this.numberingPlan = undefined;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getCountryCodesForCallingCode\",\n    value: function getCountryCodesForCallingCode(callingCode) {\n      var countryCodes = this.countryCallingCodes()[callingCode];\n\n      if (countryCodes) {\n        // Metadata before V4 included \"non-geographic entity\" calling codes\n        // inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\n        // Now the semantics of `country_calling_codes` has changed:\n        // it's specifically for \"countries\" now.\n        // Older versions of custom metadata will simply skip parsing\n        // \"non-geographic entity\" phone numbers with new versions\n        // of this library: it's not considered a bug,\n        // because such numbers are extremely rare,\n        // and developers extremely rarely use custom metadata.\n        if (countryCodes.length === 1 && countryCodes[0].length === 3) {\n          return;\n        }\n\n        return countryCodes;\n      }\n    }\n  }, {\n    key: \"getCountryCodeForCallingCode\",\n    value: function getCountryCodeForCallingCode(callingCode) {\n      var countryCodes = this.getCountryCodesForCallingCode(callingCode);\n\n      if (countryCodes) {\n        return countryCodes[0];\n      }\n    }\n  }, {\n    key: \"getNumberingPlanMetadata\",\n    value: function getNumberingPlanMetadata(callingCode) {\n      var countryCode = this.getCountryCodeForCallingCode(callingCode);\n\n      if (countryCode) {\n        return this.getCountryMetadata(countryCode);\n      }\n\n      if (this.nonGeographic()) {\n        var metadata = this.nonGeographic()[callingCode];\n\n        if (metadata) {\n          return metadata;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return this.metadata.countries['001'];\n        }\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"countryCallingCode\",\n    value: function countryCallingCode() {\n      return this.numberingPlan.callingCode();\n    } // Deprecated.\n\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      return this.numberingPlan.IDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      return this.numberingPlan.defaultIDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      return this.numberingPlan.nationalNumberPattern();\n    } // Deprecated.\n\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      return this.numberingPlan.possibleLengths();\n    } // Deprecated.\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      return this.numberingPlan.formats();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      return this.numberingPlan.nationalPrefixForParsing();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.numberingPlan.nationalPrefixTransformRule();\n    } // Deprecated.\n\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.numberingPlan.leadingDigits();\n    } // Deprecated.\n\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      return this.numberingPlan.hasTypes();\n    } // Deprecated.\n\n  }, {\n    key: \"type\",\n    value: function type(_type) {\n      return this.numberingPlan.type(_type);\n    } // Deprecated.\n\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      return this.numberingPlan.ext();\n    }\n  }, {\n    key: \"countryCallingCodes\",\n    value: function countryCallingCodes() {\n      if (this.v1) return this.metadata.country_phone_code_to_countries;\n      return this.metadata.country_calling_codes;\n    } // Deprecated.\n\n  }, {\n    key: \"chooseCountryByCountryCallingCode\",\n    value: function chooseCountryByCountryCallingCode(callingCode) {\n      return this.selectNumberingPlan(callingCode);\n    }\n  }, {\n    key: \"hasSelectedNumberingPlan\",\n    value: function hasSelectedNumberingPlan() {\n      return this.numberingPlan !== undefined;\n    }\n  }]);\n\n  return Metadata;\n}();\n\nexport { Metadata as default };\n\nvar NumberingPlan = /*#__PURE__*/function () {\n  function NumberingPlan(metadata, globalMetadataObject) {\n    _classCallCheck(this, NumberingPlan);\n\n    this.globalMetadataObject = globalMetadataObject;\n    this.metadata = metadata;\n    setVersion.call(this, globalMetadataObject.metadata);\n  }\n\n  _createClass(NumberingPlan, [{\n    key: \"callingCode\",\n    value: function callingCode() {\n      return this.metadata[0];\n    } // Formatting information for regions which share\n    // a country calling code is contained by only one region\n    // for performance reasons. For example, for NANPA region\n    // (\"North American Numbering Plan Administration\",\n    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n    // it will be contained in the metadata for `US`.\n\n  }, {\n    key: \"getDefaultCountryMetadataForRegion\",\n    value: function getDefaultCountryMetadataForRegion() {\n      return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode());\n    }\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[1];\n    }\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[12];\n    }\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      if (this.v1 || this.v2) return this.metadata[1];\n      return this.metadata[2];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.v1) return;\n      return this.metadata[this.v2 ? 2 : 3];\n    }\n  }, {\n    key: \"_getFormats\",\n    value: function _getFormats(metadata) {\n      return metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n    } // For countries of the same region (e.g. NANPA)\n    // formats are all stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      var _this = this;\n\n      var formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n      return formats.map(function (_) {\n        return new Format(_, _this);\n      });\n    }\n  }, {\n    key: \"nationalPrefix\",\n    value: function nationalPrefix() {\n      return this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n    }\n  }, {\n    key: \"_getNationalPrefixFormattingRule\",\n    value: function _getNationalPrefixFormattingRule(metadata) {\n      return metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n    } // For countries of the same region (e.g. NANPA)\n    // national prefix formatting rule is stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"_nationalPrefixForParsing\",\n    value: function _nationalPrefixForParsing() {\n      return this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7];\n    }\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      // If `national_prefix_for_parsing` is not set explicitly,\n      // then infer it from `national_prefix` (if any)\n      return this._nationalPrefixForParsing() || this.nationalPrefix();\n    }\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n    }\n  }, {\n    key: \"_getNationalPrefixIsOptionalWhenFormatting\",\n    value: function _getNationalPrefixIsOptionalWhenFormatting() {\n      return !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n    } // For countries of the same region (e.g. NANPA)\n    // \"national prefix is optional when formatting\" flag is\n    // stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n    }\n  }, {\n    key: \"types\",\n    value: function types() {\n      return this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n    }\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      // Versions 1.2.0 - 1.2.4: can be `[]`.\n\n      /* istanbul ignore next */\n      if (this.types() && this.types().length === 0) {\n        return false;\n      } // Versions <= 1.2.4: can be `undefined`.\n      // Version >= 1.2.5: can be `0`.\n\n\n      return !!this.types();\n    }\n  }, {\n    key: \"type\",\n    value: function type(_type2) {\n      if (this.hasTypes() && getType(this.types(), _type2)) {\n        return new Type(getType(this.types(), _type2), this);\n      }\n    }\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      if (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n      return this.metadata[13] || DEFAULT_EXT_PREFIX;\n    }\n  }]);\n\n  return NumberingPlan;\n}();\n\nvar Format = /*#__PURE__*/function () {\n  function Format(format, metadata) {\n    _classCallCheck(this, Format);\n\n    this._format = format;\n    this.metadata = metadata;\n  }\n\n  _createClass(Format, [{\n    key: \"pattern\",\n    value: function pattern() {\n      return this._format[0];\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      return this._format[1];\n    }\n  }, {\n    key: \"leadingDigitsPatterns\",\n    value: function leadingDigitsPatterns() {\n      return this._format[2] || [];\n    }\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._format[3] || this.metadata.nationalPrefixFormattingRule();\n    }\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    }\n  }, {\n    key: \"nationalPrefixIsMandatoryWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\n      // National prefix is omitted if there's no national prefix formatting rule\n      // set for this country, or when the national prefix formatting rule\n      // contains no national prefix itself, or when this rule is set but\n      // national prefix is optional for this phone number format\n      // (and it is not enforced explicitly)\n      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    } // Checks whether national prefix formatting rule contains national prefix.\n\n  }, {\n    key: \"usesNationalPrefix\",\n    value: function usesNationalPrefix() {\n      return this.nationalPrefixFormattingRule() && // Check that national prefix formatting rule is not a \"dummy\" one.\n      !FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule()) // In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\n      // when `national_prefix_formatting_rule` is not present.\n      // So, `true` or `false` are returned explicitly here, so that\n      // `0` number isn't returned.\n      ? true : false;\n    }\n  }, {\n    key: \"internationalFormat\",\n    value: function internationalFormat() {\n      return this._format[5] || this.format();\n    }\n  }]);\n\n  return Format;\n}();\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\n\n\nvar FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/;\n\nvar Type = /*#__PURE__*/function () {\n  function Type(type, metadata) {\n    _classCallCheck(this, Type);\n\n    this.type = type;\n    this.metadata = metadata;\n  }\n\n  _createClass(Type, [{\n    key: \"pattern\",\n    value: function pattern() {\n      if (this.metadata.v1) return this.type;\n      return this.type[0];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.metadata.v1) return;\n      return this.type[1] || this.metadata.possibleLengths();\n    }\n  }]);\n\n  return Type;\n}();\n\nfunction getType(types, type) {\n  switch (type) {\n    case 'FIXED_LINE':\n      return types[0];\n\n    case 'MOBILE':\n      return types[1];\n\n    case 'TOLL_FREE':\n      return types[2];\n\n    case 'PREMIUM_RATE':\n      return types[3];\n\n    case 'PERSONAL_NUMBER':\n      return types[4];\n\n    case 'VOICEMAIL':\n      return types[5];\n\n    case 'UAN':\n      return types[6];\n\n    case 'PAGER':\n      return types[7];\n\n    case 'VOIP':\n      return types[8];\n\n    case 'SHARED_COST':\n      return types[9];\n  }\n}\n\nexport function validateMetadata(metadata) {\n  if (!metadata) {\n    throw new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n  } // `country_phone_code_to_countries` was renamed to\n  // `country_calling_codes` in `1.0.18`.\n\n\n  if (!is_object(metadata) || !is_object(metadata.countries)) {\n    throw new Error(\"[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got \".concat(is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata, \".\"));\n  }\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar is_object = function is_object(_) {\n  return _typeof(_) === 'object';\n}; // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\n\nvar type_of = function type_of(_) {\n  return _typeof(_);\n};\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\n\n\nexport function getExtPrefix(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).ext();\n  }\n\n  return DEFAULT_EXT_PREFIX;\n}\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\n\nexport function getCountryCallingCode(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).countryCallingCode();\n  }\n\n  throw new Error(\"Unknown country: \".concat(country));\n}\nexport function isSupportedCountry(country, metadata) {\n  // metadata = new Metadata(metadata)\n  // return metadata.hasCountry(country)\n  return metadata.countries[country] !== undefined;\n}\n\nfunction setVersion(metadata) {\n  var version = metadata.version;\n\n  if (typeof version === 'number') {\n    this.v1 = version === 1;\n    this.v2 = version === 2;\n    this.v3 = version === 3;\n    this.v4 = version === 4;\n  } else {\n    if (!version) {\n      this.v1 = true;\n    } else if (compare(version, V3) === -1) {\n      this.v2 = true;\n    } else if (compare(version, V4) === -1) {\n      this.v3 = true;\n    } else {\n      this.v4 = true;\n    }\n  }\n} // const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\n// function isCountryCode(countryCode) {\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\n// }","map":{"version":3,"sources":["../source/metadata.js"],"names":["V2","V3","V4","DEFAULT_EXT_PREFIX","CALLING_CODE_REG_EXP","Metadata","validateMetadata","setVersion","_","countryCode","country","callingCode","countryCodes","metadata","type","NumberingPlan","globalMetadataObject","formats","getType","Format","FIRST_GROUP_ONLY_PREFIX_PATTERN","Type","types","is_object","Object","type_of","version","compare"],"mappings":"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","sourcesContent":["import compare from './tools/semver-compare'\r\n\r\n// Added \"possibleLengths\" and renamed\r\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\r\nconst V2 = '1.0.18'\r\n\r\n// Added \"idd_prefix\" and \"default_idd_prefix\".\r\nconst V3 = '1.2.0'\r\n\r\n// Moved `001` country code to \"nonGeographic\" section of metadata.\r\nconst V4 = '1.7.35'\r\n\r\nconst DEFAULT_EXT_PREFIX = ' ext. '\r\n\r\nconst CALLING_CODE_REG_EXP = /^\\d+$/\r\n\r\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\r\nexport default class Metadata {\r\n\tconstructor(metadata) {\r\n\t\tvalidateMetadata(metadata)\r\n\t\tthis.metadata = metadata\r\n\t\tsetVersion.call(this, metadata)\r\n\t}\r\n\r\n\tgetCountries() {\r\n\t\treturn Object.keys(this.metadata.countries).filter(_ => _ !== '001')\r\n\t}\r\n\r\n\tgetCountryMetadata(countryCode) {\r\n\t\treturn this.metadata.countries[countryCode]\r\n\t}\r\n\r\n\tnonGeographic() {\r\n\t\tif (this.v1 || this.v2 || this.v3) return\r\n\t\t// `nonGeographical` was a typo.\r\n\t\t// It's present in metadata generated from `1.7.35` to `1.7.37`.\r\n\t\treturn this.metadata.nonGeographic || this.metadata.nonGeographical\r\n\t}\r\n\r\n\thasCountry(country) {\r\n\t\treturn this.getCountryMetadata(country) !== undefined\r\n\t}\r\n\r\n\thasCallingCode(callingCode) {\r\n\t\tif (this.getCountryCodesForCallingCode(callingCode)) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\tif (this.nonGeographic()[callingCode]) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// A hacky workaround for old custom metadata (generated before V4).\r\n\t\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\t\tif (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tisNonGeographicCallingCode(callingCode) {\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\treturn this.nonGeographic()[callingCode] ? true : false\r\n\t\t} else {\r\n\t\t\treturn this.getCountryCodesForCallingCode(callingCode) ? false : true\r\n\t\t}\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tcountry(countryCode) {\r\n\t\treturn this.selectNumberingPlan(countryCode)\r\n\t}\r\n\r\n\tselectNumberingPlan(countryCode, callingCode) {\r\n\t\t// Supports just passing `callingCode` as the first argument.\r\n\t\tif (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\r\n\t\t\tcallingCode = countryCode\r\n\t\t\tcountryCode = null\r\n\t\t}\r\n\t\tif (countryCode && countryCode !== '001') {\r\n\t\t\tif (!this.hasCountry(countryCode)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${countryCode}`)\r\n\t\t\t}\r\n\t\t\tthis.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this)\r\n\t\t} else if (callingCode) {\r\n\t\t\tif (!this.hasCallingCode(callingCode)) {\r\n\t\t\t\tthrow new Error(`Unknown calling code: ${callingCode}`)\r\n\t\t\t}\r\n\t\t\tthis.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this)\r\n\t\t} else {\r\n\t\t\tthis.numberingPlan = undefined\r\n\t\t}\r\n\t\treturn this\r\n\t}\r\n\r\n\tgetCountryCodesForCallingCode(callingCode) {\r\n\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\tif (countryCodes) {\r\n\t\t\t// Metadata before V4 included \"non-geographic entity\" calling codes\r\n\t\t\t// inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\r\n\t\t\t// Now the semantics of `country_calling_codes` has changed:\r\n\t\t\t// it's specifically for \"countries\" now.\r\n\t\t\t// Older versions of custom metadata will simply skip parsing\r\n\t\t\t// \"non-geographic entity\" phone numbers with new versions\r\n\t\t\t// of this library: it's not considered a bug,\r\n\t\t\t// because such numbers are extremely rare,\r\n\t\t\t// and developers extremely rarely use custom metadata.\r\n\t\t\tif (countryCodes.length === 1 && countryCodes[0].length === 3) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\treturn countryCodes\r\n\t\t}\r\n\t}\r\n\r\n\tgetCountryCodeForCallingCode(callingCode) {\r\n\t\tconst countryCodes = this.getCountryCodesForCallingCode(callingCode)\r\n\t\tif (countryCodes) {\r\n\t\t\treturn countryCodes[0]\r\n\t\t}\r\n\t}\r\n\r\n\tgetNumberingPlanMetadata(callingCode) {\r\n\t\tconst countryCode = this.getCountryCodeForCallingCode(callingCode)\r\n\t\tif (countryCode) {\r\n\t\t\treturn this.getCountryMetadata(countryCode)\r\n\t\t}\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\tconst metadata = this.nonGeographic()[callingCode]\r\n\t\t\tif (metadata) {\r\n\t\t\t\treturn metadata\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// A hacky workaround for old custom metadata (generated before V4).\r\n\t\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\t\tif (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\r\n\t\t\t\treturn this.metadata.countries['001']\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tcountryCallingCode() {\r\n\t\treturn this.numberingPlan.callingCode()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tIDDPrefix() {\r\n\t\treturn this.numberingPlan.IDDPrefix()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tdefaultIDDPrefix() {\r\n\t\treturn this.numberingPlan.defaultIDDPrefix()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalNumberPattern() {\r\n\t\treturn this.numberingPlan.nationalNumberPattern()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tpossibleLengths() {\r\n\t\treturn this.numberingPlan.possibleLengths()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tformats() {\r\n\t\treturn this.numberingPlan.formats()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalPrefixForParsing() {\r\n\t\treturn this.numberingPlan.nationalPrefixForParsing()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalPrefixTransformRule() {\r\n\t\treturn this.numberingPlan.nationalPrefixTransformRule()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tleadingDigits() {\r\n\t\treturn this.numberingPlan.leadingDigits()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\thasTypes() {\r\n\t\treturn this.numberingPlan.hasTypes()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\ttype(type) {\r\n\t\treturn this.numberingPlan.type(type)\r\n\t}\r\n\r\n\t// Deprecated.\r\n\text() {\r\n\t\treturn this.numberingPlan.ext()\r\n\t}\r\n\r\n\tcountryCallingCodes() {\r\n\t\tif (this.v1) return this.metadata.country_phone_code_to_countries\r\n\t\treturn this.metadata.country_calling_codes\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tchooseCountryByCountryCallingCode(callingCode) {\r\n\t\treturn this.selectNumberingPlan(callingCode)\r\n\t}\r\n\r\n\thasSelectedNumberingPlan() {\r\n\t\treturn this.numberingPlan !== undefined\r\n\t}\r\n}\r\n\r\nclass NumberingPlan {\r\n\tconstructor(metadata, globalMetadataObject) {\r\n\t\tthis.globalMetadataObject = globalMetadataObject\r\n\t\tthis.metadata = metadata\r\n\t\tsetVersion.call(this, globalMetadataObject.metadata)\r\n\t}\r\n\r\n\tcallingCode() {\r\n\t\treturn this.metadata[0]\r\n\t}\r\n\r\n\t// Formatting information for regions which share\r\n\t// a country calling code is contained by only one region\r\n\t// for performance reasons. For example, for NANPA region\r\n\t// (\"North American Numbering Plan Administration\",\r\n\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\r\n\t// it will be contained in the metadata for `US`.\r\n\tgetDefaultCountryMetadataForRegion() {\r\n\t\treturn this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode())\r\n\t}\r\n\r\n\tIDDPrefix() {\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.metadata[1]\r\n\t}\r\n\r\n\tdefaultIDDPrefix() {\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.metadata[12]\r\n\t}\r\n\r\n\tnationalNumberPattern() {\r\n\t\tif (this.v1 || this.v2) return this.metadata[1]\r\n\t\treturn this.metadata[2]\r\n\t}\r\n\r\n\tpossibleLengths() {\r\n\t\tif (this.v1) return\r\n\t\treturn this.metadata[this.v2 ? 2 : 3]\r\n\t}\r\n\r\n\t_getFormats(metadata) {\r\n\t\treturn metadata[this.v1 ? 2 : this.v2 ? 3 : 4]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// formats are all stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tformats() {\r\n\t\tconst formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || []\r\n\t\treturn formats.map(_ => new Format(_, this))\r\n\t}\r\n\r\n\tnationalPrefix() {\r\n\t\treturn this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5]\r\n\t}\r\n\r\n\t_getNationalPrefixFormattingRule(metadata) {\r\n\t\treturn metadata[this.v1 ? 4 : this.v2 ? 5 : 6]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// national prefix formatting rule is stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixFormattingRule() {\r\n\t\treturn this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\t_nationalPrefixForParsing() {\r\n\t\treturn this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7]\r\n\t}\r\n\r\n\tnationalPrefixForParsing() {\r\n\t\t// If `national_prefix_for_parsing` is not set explicitly,\r\n\t\t// then infer it from `national_prefix` (if any)\r\n\t\treturn this._nationalPrefixForParsing() || this.nationalPrefix()\r\n\t}\r\n\r\n\tnationalPrefixTransformRule() {\r\n\t\treturn this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8]\r\n\t}\r\n\r\n\t_getNationalPrefixIsOptionalWhenFormatting() {\r\n\t\treturn !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// \"national prefix is optional when formatting\" flag is\r\n\t// stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixIsOptionalWhenFormattingInNationalFormat() {\r\n\t\treturn this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) ||\r\n\t\t\tthis._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\tleadingDigits() {\r\n\t\treturn this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10]\r\n\t}\r\n\r\n\ttypes() {\r\n\t\treturn this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11]\r\n\t}\r\n\r\n\thasTypes() {\r\n\t\t// Versions 1.2.0 - 1.2.4: can be `[]`.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (this.types() && this.types().length === 0) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// Versions <= 1.2.4: can be `undefined`.\r\n\t\t// Version >= 1.2.5: can be `0`.\r\n\t\treturn !!this.types()\r\n\t}\r\n\r\n\ttype(type) {\r\n\t\tif (this.hasTypes() && getType(this.types(), type)) {\r\n\t\t\treturn new Type(getType(this.types(), type), this)\r\n\t\t}\r\n\t}\r\n\r\n\text() {\r\n\t\tif (this.v1 || this.v2) return DEFAULT_EXT_PREFIX\r\n\t\treturn this.metadata[13] || DEFAULT_EXT_PREFIX\r\n\t}\r\n}\r\n\r\nclass Format {\r\n\tconstructor(format, metadata) {\r\n\t\tthis._format = format\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern() {\r\n\t\treturn this._format[0]\r\n\t}\r\n\r\n\tformat() {\r\n\t\treturn this._format[1]\r\n\t}\r\n\r\n\tleadingDigitsPatterns() {\r\n\t\treturn this._format[2] || []\r\n\t}\r\n\r\n\tnationalPrefixFormattingRule() {\r\n\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule()\r\n\t}\r\n\r\n\tnationalPrefixIsOptionalWhenFormattingInNationalFormat() {\r\n\t\treturn !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat()\r\n\t}\r\n\r\n\tnationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\r\n\t\t// National prefix is omitted if there's no national prefix formatting rule\r\n\t\t// set for this country, or when the national prefix formatting rule\r\n\t\t// contains no national prefix itself, or when this rule is set but\r\n\t\t// national prefix is optional for this phone number format\r\n\t\t// (and it is not enforced explicitly)\r\n\t\treturn this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat()\r\n\t}\r\n\r\n\t// Checks whether national prefix formatting rule contains national prefix.\r\n\tusesNationalPrefix() {\r\n\t\treturn this.nationalPrefixFormattingRule() &&\r\n\t\t\t// Check that national prefix formatting rule is not a \"dummy\" one.\r\n\t\t\t!FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule())\r\n\t\t\t// In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\r\n\t\t\t// when `national_prefix_formatting_rule` is not present.\r\n\t\t\t// So, `true` or `false` are returned explicitly here, so that\r\n\t\t\t// `0` number isn't returned.\r\n\t\t\t? true\r\n\t\t\t: false\r\n\t}\r\n\r\n\tinternationalFormat() {\r\n\t\treturn this._format[5] || this.format()\r\n\t}\r\n}\r\n\r\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\r\nconst FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/\r\n\r\nclass Type {\r\n\tconstructor(type, metadata) {\r\n\t\tthis.type = type\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern() {\r\n\t\tif (this.metadata.v1) return this.type\r\n\t\treturn this.type[0]\r\n\t}\r\n\r\n\tpossibleLengths() {\r\n\t\tif (this.metadata.v1) return\r\n\t\treturn this.type[1] || this.metadata.possibleLengths()\r\n\t}\r\n}\r\n\r\nfunction getType(types, type) {\r\n\tswitch (type) {\r\n\t\tcase 'FIXED_LINE':\r\n\t\t\treturn types[0]\r\n\t\tcase 'MOBILE':\r\n\t\t\treturn types[1]\r\n\t\tcase 'TOLL_FREE':\r\n\t\t\treturn types[2]\r\n\t\tcase 'PREMIUM_RATE':\r\n\t\t\treturn types[3]\r\n\t\tcase 'PERSONAL_NUMBER':\r\n\t\t\treturn types[4]\r\n\t\tcase 'VOICEMAIL':\r\n\t\t\treturn types[5]\r\n\t\tcase 'UAN':\r\n\t\t\treturn types[6]\r\n\t\tcase 'PAGER':\r\n\t\t\treturn types[7]\r\n\t\tcase 'VOIP':\r\n\t\t\treturn types[8]\r\n\t\tcase 'SHARED_COST':\r\n\t\t\treturn types[9]\r\n\t}\r\n}\r\n\r\nexport function validateMetadata(metadata) {\r\n\tif (!metadata) {\r\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.')\r\n\t}\r\n\r\n\t// `country_phone_code_to_countries` was renamed to\r\n\t// `country_calling_codes` in `1.0.18`.\r\n\tif (!is_object(metadata) || !is_object(metadata.countries)) {\r\n\t\tthrow new Error(`[libphonenumber-js] \\`metadata\\` argument was passed but it's not a valid metadata. Must be an object having \\`.countries\\` child object property. Got ${is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata}.`)\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst type_of = _ => typeof _\r\n\r\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\r\nexport function getExtPrefix(country, metadata) {\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).ext()\r\n\t}\r\n\treturn DEFAULT_EXT_PREFIX\r\n}\r\n\r\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\r\nexport function getCountryCallingCode(country, metadata) {\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).countryCallingCode()\r\n\t}\r\n\tthrow new Error(`Unknown country: ${country}`)\r\n}\r\n\r\nexport function isSupportedCountry(country, metadata) {\r\n\t// metadata = new Metadata(metadata)\r\n\t// return metadata.hasCountry(country)\r\n\treturn metadata.countries[country] !== undefined\r\n}\r\n\r\nfunction setVersion(metadata) {\r\n\tconst { version } = metadata\r\n\tif (typeof version === 'number') {\r\n\t\tthis.v1 = version === 1\r\n\t\tthis.v2 = version === 2\r\n\t\tthis.v3 = version === 3\r\n\t\tthis.v4 = version === 4\r\n\t} else {\r\n\t\tif (!version) {\r\n\t\t\tthis.v1 = true\r\n\t\t} else if (compare(version, V3) === -1) {\r\n\t\t\tthis.v2 = true\r\n\t\t} else if (compare(version, V4) === -1) {\r\n\t\t\tthis.v3 = true\r\n\t\t} else {\r\n\t\t\tthis.v4 = true\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\r\n// function isCountryCode(countryCode) {\r\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\r\n// }"]},"metadata":{},"sourceType":"module"}