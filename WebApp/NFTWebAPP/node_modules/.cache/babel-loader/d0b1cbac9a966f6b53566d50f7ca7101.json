{"ast":null,"code":"import isValidNumber from '../validate_';\nimport parseDigits from '../helpers/parseDigits';\nimport { startsWith, endsWith } from './util';\n/**\r\n * Leniency when finding potential phone numbers in text segments\r\n * The levels here are ordered in increasing strictness.\r\n */\n\nexport default {\n  /**\r\n   * Phone numbers accepted are \"possible\", but not necessarily \"valid\".\r\n   */\n  POSSIBLE: function POSSIBLE(number, candidate, metadata) {\n    return true;\n  },\n\n  /**\r\n   * Phone numbers accepted are \"possible\" and \"valid\".\r\n   * Numbers written in national format must have their national-prefix\r\n   * present if it is usually written for a number of this type.\r\n   */\n  VALID: function VALID(number, candidate, metadata) {\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidate.toString(), metadata)) {\n      return false;\n    } // Skipped for simplicity.\n    // return isNationalPrefixPresentIfRequired(number, metadata)\n\n\n    return true;\n  },\n\n  /**\r\n   * Phone numbers accepted are \"valid\" and\r\n   * are grouped in a possible way for this locale. For example, a US number written as\r\n   * \"65 02 53 00 00\" and \"650253 0000\" are not accepted at this leniency level, whereas\r\n   * \"650 253 0000\", \"650 2530000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol in the national significant number\r\n   * are also dropped at this level.\r\n   *\r\n   * Warning: This level might result in lower coverage especially for regions outside of\r\n   * country code \"+1\". If you are not sure about which level to use,\r\n   * email the discussion group libphonenumber-discuss@googlegroups.com.\r\n   */\n  STRICT_GROUPING: function STRICT_GROUPING(number, candidate, metadata, regExpCache) {\n    var candidateString = candidate.toString();\n\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsRemainGrouped, regExpCache);\n  },\n\n  /**\r\n   * Phone numbers accepted are {@linkplain PhoneNumberUtil#isValidNumber(PhoneNumber) valid} and\r\n   * are grouped in the same way that we would have formatted it, or as a single block. For\r\n   * example, a US number written as \"650 2530000\" is not accepted at this leniency level, whereas\r\n   * \"650 253 0000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol are also dropped at this level.\r\n   * <p>\r\n   * Warning: This level might result in lower coverage especially for regions outside of country\r\n   * code \"+1\". If you are not sure about which level to use, email the discussion group\r\n   * libphonenumber-discuss@googlegroups.com.\r\n   */\n  EXACT_GROUPING: function EXACT_GROUPING(number, candidate, metadata, regExpCache) {\n    var candidateString = candidate.toString();\n\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsAreExactlyPresent, regExpCache);\n  }\n};\n\nfunction containsOnlyValidXChars(number, candidate, metadata) {\n  // The characters 'x' and 'X' can be (1) a carrier code, in which case they always precede the\n  // national significant number or (2) an extension sign, in which case they always precede the\n  // extension number. We assume a carrier code is more than 1 digit, so the first case has to\n  // have more than 1 consecutive 'x' or 'X', whereas the second case can only have exactly 1 'x'\n  // or 'X'. We ignore the character if it appears as the last character of the string.\n  for (var index = 0; index < candidate.length - 1; index++) {\n    var charAtIndex = candidate.charAt(index);\n\n    if (charAtIndex === 'x' || charAtIndex === 'X') {\n      var charAtNextIndex = candidate.charAt(index + 1);\n\n      if (charAtNextIndex === 'x' || charAtNextIndex === 'X') {\n        // This is the carrier code case, in which the 'X's always precede the national\n        // significant number.\n        index++;\n\n        if (util.isNumberMatch(number, candidate.substring(index)) != MatchType.NSN_MATCH) {\n          return false;\n        } // This is the extension sign case, in which the 'x' or 'X' should always precede the\n        // extension number.\n\n      } else if (parseDigits(candidate.substring(index)) !== number.ext) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction isNationalPrefixPresentIfRequired(number, _metadata) {\n  // First, check how we deduced the country code. If it was written in international format, then\n  // the national prefix is not required.\n  if (number.getCountryCodeSource() != 'FROM_DEFAULT_COUNTRY') {\n    return true;\n  }\n\n  var phoneNumberRegion = util.getRegionCodeForCountryCode(number.getCountryCode());\n  var metadata = util.getMetadataForRegion(phoneNumberRegion);\n\n  if (metadata == null) {\n    return true;\n  } // Check if a national prefix should be present when formatting this number.\n\n\n  var nationalNumber = util.getNationalSignificantNumber(number);\n  var formatRule = util.chooseFormattingPatternForNumber(metadata.numberFormats(), nationalNumber); // To do this, we check that a national prefix formatting rule was present\n  // and that it wasn't just the first-group symbol ($1) with punctuation.\n\n  if (formatRule && formatRule.getNationalPrefixFormattingRule().length > 0) {\n    if (formatRule.getNationalPrefixOptionalWhenFormatting()) {\n      // The national-prefix is optional in these cases, so we don't need to check if it was\n      // present.\n      return true;\n    }\n\n    if (PhoneNumberUtil.formattingRuleHasFirstGroupOnly(formatRule.getNationalPrefixFormattingRule())) {\n      // National Prefix not needed for this number.\n      return true;\n    } // Normalize the remainder.\n\n\n    var rawInputCopy = PhoneNumberUtil.normalizeDigitsOnly(number.getRawInput()); // Check if we found a national prefix and/or carrier code at the start of the raw input, and\n    // return the result.\n\n    return util.maybeStripNationalPrefixAndCarrierCode(rawInputCopy, metadata, null);\n  }\n\n  return true;\n}\n\nexport function containsMoreThanOneSlashInNationalNumber(number, candidate) {\n  var firstSlashInBodyIndex = candidate.indexOf('/');\n\n  if (firstSlashInBodyIndex < 0) {\n    // No slashes, this is okay.\n    return false;\n  } // Now look for a second one.\n\n\n  var secondSlashInBodyIndex = candidate.indexOf('/', firstSlashInBodyIndex + 1);\n\n  if (secondSlashInBodyIndex < 0) {\n    // Only one slash, this is okay.\n    return false;\n  } // If the first slash is after the country calling code, this is permitted.\n\n\n  var candidateHasCountryCode = number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN || number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITHOUT_PLUS_SIGN;\n\n  if (candidateHasCountryCode && PhoneNumberUtil.normalizeDigitsOnly(candidate.substring(0, firstSlashInBodyIndex)) === String(number.getCountryCode())) {\n    // Any more slashes and this is illegal.\n    return candidate.slice(secondSlashInBodyIndex + 1).indexOf('/') >= 0;\n  }\n\n  return true;\n}\n\nfunction checkNumberGroupingIsValid(number, candidate, metadata, checkGroups, regExpCache) {\n  var normalizedCandidate = normalizeDigits(candidate, true\n  /* keep non-digits */\n  );\n  var formattedNumberGroups = getNationalNumberGroups(metadata, number, null);\n\n  if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n    return true;\n  } // If this didn't pass, see if there are any alternate formats that match, and try them instead.\n\n\n  var alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode());\n  var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n\n  if (alternateFormats) {\n    for (var _iterator = alternateFormats.numberFormats(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var alternateFormat = _ref;\n\n      if (alternateFormat.leadingDigitsPatterns().length > 0) {\n        // There is only one leading digits pattern for alternate formats.\n        var leadingDigitsRegExp = regExpCache.getPatternForRegExp('^' + alternateFormat.leadingDigitsPatterns()[0]);\n\n        if (!leadingDigitsRegExp.test(nationalSignificantNumber)) {\n          // Leading digits don't match; try another one.\n          continue;\n        }\n      }\n\n      formattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat);\n\n      if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n/**\r\n * Helper method to get the national-number part of a number, formatted without any national\r\n * prefix, and return it as a set of digit blocks that would be formatted together following\r\n * standard formatting rules.\r\n */\n\n\nfunction getNationalNumberGroups(metadata, number, formattingPattern) {\n  if (formattingPattern) {\n    // We format the NSN only, and split that according to the separator.\n    var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n    return util.formatNsnUsingPattern(nationalSignificantNumber, formattingPattern, 'RFC3966', metadata).split('-');\n  } // This will be in the format +CC-DG1-DG2-DGX;ext=EXT where DG1..DGX represents groups of digits.\n\n\n  var rfc3966Format = formatNumber(number, 'RFC3966', metadata); // We remove the extension part from the formatted string before splitting it into different\n  // groups.\n\n  var endIndex = rfc3966Format.indexOf(';');\n\n  if (endIndex < 0) {\n    endIndex = rfc3966Format.length;\n  } // The country-code will have a '-' following it.\n\n\n  var startIndex = rfc3966Format.indexOf('-') + 1;\n  return rfc3966Format.slice(startIndex, endIndex).split('-');\n}\n\nfunction allNumberGroupsAreExactlyPresent(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  var candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN); // Set this to the last group, skipping it if the number has an extension.\n\n  var candidateNumberGroupIndex = number.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1; // First we check if the national significant number is formatted as a block.\n  // We use contains and not equals, since the national significant number may be present with\n  // a prefix such as a national number prefix, or the country code itself.\n\n  if (candidateGroups.length == 1 || candidateGroups[candidateNumberGroupIndex].contains(util.getNationalSignificantNumber(number))) {\n    return true;\n  } // Starting from the end, go through in reverse, excluding the first group, and check the\n  // candidate and number groups are the same.\n\n\n  var formattedNumberGroupIndex = formattedNumberGroups.length - 1;\n\n  while (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0) {\n    if (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex]) {\n      return false;\n    }\n\n    formattedNumberGroupIndex--;\n    candidateNumberGroupIndex--;\n  } // Now check the first group. There may be a national prefix at the start, so we only check\n  // that the candidate group ends with the formatted number group.\n\n\n  return candidateNumberGroupIndex >= 0 && endsWith(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]);\n}\n\nfunction allNumberGroupsRemainGrouped(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  var fromIndex = 0;\n\n  if (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY) {\n    // First skip the country code if the normalized candidate contained it.\n    var countryCode = String(number.getCountryCode());\n    fromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length();\n  } // Check each group of consecutive digits are not broken into separate groupings in the\n  // {@code normalizedCandidate} string.\n\n\n  for (var i = 0; i < formattedNumberGroups.length; i++) {\n    // Fails if the substring of {@code normalizedCandidate} starting from {@code fromIndex}\n    // doesn't contain the consecutive digits in formattedNumberGroups[i].\n    fromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex);\n\n    if (fromIndex < 0) {\n      return false;\n    } // Moves {@code fromIndex} forward.\n\n\n    fromIndex += formattedNumberGroups[i].length();\n\n    if (i == 0 && fromIndex < normalizedCandidate.length()) {\n      // We are at the position right after the NDC. We get the region used for formatting\n      // information based on the country code in the phone number, rather than the number itself,\n      // as we do not need to distinguish between different countries with the same country\n      // calling code and this is faster.\n      var region = util.getRegionCodeForCountryCode(number.getCountryCode());\n\n      if (util.getNddPrefixForRegion(region, true) != null && Character.isDigit(normalizedCandidate.charAt(fromIndex))) {\n        // This means there is no formatting symbol after the NDC. In this case, we only\n        // accept the number if there is no formatting symbol at all in the number, except\n        // for extensions. This is only important for countries with national prefixes.\n        var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n        return startsWith(normalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length), nationalSignificantNumber);\n      }\n    }\n  } // The check here makes sure that we haven't mistakenly already used the extension to\n  // match the last group of the subscriber number. Note the extension cannot have\n  // formatting in-between digits.\n\n\n  return normalizedCandidate.slice(fromIndex).contains(number.getExtension());\n}","map":{"version":3,"sources":["../../source/findNumbers/Leniency.js"],"names":["POSSIBLE","VALID","isValidNumber","containsOnlyValidXChars","candidate","STRICT_GROUPING","candidateString","containsMoreThanOneSlashInNationalNumber","isNationalPrefixPresentIfRequired","checkNumberGroupingIsValid","EXACT_GROUPING","index","charAtIndex","charAtNextIndex","util","MatchType","parseDigits","number","phoneNumberRegion","metadata","nationalNumber","formatRule","PhoneNumberUtil","rawInputCopy","firstSlashInBodyIndex","secondSlashInBodyIndex","candidateHasCountryCode","CountryCodeSource","String","normalizedCandidate","normalizeDigits","formattedNumberGroups","getNationalNumberGroups","checkGroups","alternateFormats","MetadataManager","nationalSignificantNumber","alternateFormat","leadingDigitsRegExp","regExpCache","rfc3966Format","formatNumber","endIndex","startIndex","candidateGroups","candidateNumberGroupIndex","formattedNumberGroupIndex","endsWith","fromIndex","countryCode","i","region","Character","startsWith"],"mappings":"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","sourcesContent":["import isValidNumber from '../validate_'\r\nimport parseDigits from '../helpers/parseDigits'\r\n\r\nimport {\r\n\tstartsWith,\r\n\tendsWith\r\n} from './util'\r\n\r\n/**\r\n * Leniency when finding potential phone numbers in text segments\r\n * The levels here are ordered in increasing strictness.\r\n */\r\nexport default\r\n{\r\n\t/**\r\n\t * Phone numbers accepted are \"possible\", but not necessarily \"valid\".\r\n\t */\r\n\tPOSSIBLE(number, candidate, metadata)\r\n\t{\r\n\t\treturn true\r\n\t},\r\n\r\n\t/**\r\n\t * Phone numbers accepted are \"possible\" and \"valid\".\r\n\t * Numbers written in national format must have their national-prefix\r\n\t * present if it is usually written for a number of this type.\r\n\t */\r\n\tVALID(number, candidate, metadata)\r\n\t{\r\n\t\tif (!isValidNumber(number, undefined, metadata) ||\r\n\t\t\t!containsOnlyValidXChars(number, candidate.toString(), metadata))\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n    // Skipped for simplicity.\r\n\t\t// return isNationalPrefixPresentIfRequired(number, metadata)\r\n    return true\r\n  },\r\n\r\n\t/**\r\n\t * Phone numbers accepted are \"valid\" and\r\n\t * are grouped in a possible way for this locale. For example, a US number written as\r\n\t * \"65 02 53 00 00\" and \"650253 0000\" are not accepted at this leniency level, whereas\r\n\t * \"650 253 0000\", \"650 2530000\" or \"6502530000\" are.\r\n\t * Numbers with more than one '/' symbol in the national significant number\r\n\t * are also dropped at this level.\r\n\t *\r\n\t * Warning: This level might result in lower coverage especially for regions outside of\r\n\t * country code \"+1\". If you are not sure about which level to use,\r\n\t * email the discussion group libphonenumber-discuss@googlegroups.com.\r\n\t */\r\n\tSTRICT_GROUPING(number, candidate, metadata, regExpCache)\r\n\t{\r\n\t\tconst candidateString = candidate.toString()\r\n\r\n\t\tif (!isValidNumber(number, undefined, metadata)\r\n\t\t\t|| !containsOnlyValidXChars(number, candidateString, metadata)\r\n\t\t\t|| containsMoreThanOneSlashInNationalNumber(number, candidateString)\r\n\t\t\t|| !isNationalPrefixPresentIfRequired(number, metadata))\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\treturn checkNumberGroupingIsValid\r\n\t\t(\r\n\t\t\tnumber,\r\n\t\t\tcandidate,\r\n\t\t\tmetadata,\r\n\t\t\tallNumberGroupsRemainGrouped,\r\n\t\t\tregExpCache\r\n\t\t)\r\n  },\r\n\r\n\t/**\r\n\t * Phone numbers accepted are {@linkplain PhoneNumberUtil#isValidNumber(PhoneNumber) valid} and\r\n\t * are grouped in the same way that we would have formatted it, or as a single block. For\r\n\t * example, a US number written as \"650 2530000\" is not accepted at this leniency level, whereas\r\n\t * \"650 253 0000\" or \"6502530000\" are.\r\n\t * Numbers with more than one '/' symbol are also dropped at this level.\r\n\t * <p>\r\n\t * Warning: This level might result in lower coverage especially for regions outside of country\r\n\t * code \"+1\". If you are not sure about which level to use, email the discussion group\r\n\t * libphonenumber-discuss@googlegroups.com.\r\n\t */\r\n\tEXACT_GROUPING(number, candidate, metadata, regExpCache)\r\n\t{\r\n\t\tconst candidateString = candidate.toString()\r\n\r\n\t\tif (!isValidNumber(number, undefined, metadata)\r\n\t\t\t|| !containsOnlyValidXChars(number, candidateString, metadata)\r\n\t\t\t|| containsMoreThanOneSlashInNationalNumber(number, candidateString)\r\n\t\t\t|| !isNationalPrefixPresentIfRequired(number, metadata))\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\treturn checkNumberGroupingIsValid\r\n\t\t(\r\n\t\t\tnumber,\r\n\t\t\tcandidate,\r\n\t\t\tmetadata,\r\n\t\t\tallNumberGroupsAreExactlyPresent,\r\n\t\t\tregExpCache\r\n\t\t)\r\n\t}\r\n}\r\n\r\nfunction containsOnlyValidXChars(number, candidate, metadata)\r\n{\r\n  // The characters 'x' and 'X' can be (1) a carrier code, in which case they always precede the\r\n  // national significant number or (2) an extension sign, in which case they always precede the\r\n  // extension number. We assume a carrier code is more than 1 digit, so the first case has to\r\n  // have more than 1 consecutive 'x' or 'X', whereas the second case can only have exactly 1 'x'\r\n  // or 'X'. We ignore the character if it appears as the last character of the string.\r\n  for (let index = 0; index < candidate.length - 1; index++)\r\n  {\r\n    const charAtIndex = candidate.charAt(index)\r\n\r\n    if (charAtIndex === 'x' || charAtIndex === 'X')\r\n    {\r\n      const charAtNextIndex = candidate.charAt(index + 1)\r\n\r\n      if (charAtNextIndex === 'x' || charAtNextIndex === 'X')\r\n      {\r\n        // This is the carrier code case, in which the 'X's always precede the national\r\n        // significant number.\r\n        index++\r\n        if (util.isNumberMatch(number, candidate.substring(index)) != MatchType.NSN_MATCH)\r\n        {\r\n          return false\r\n        }\r\n\t      // This is the extension sign case, in which the 'x' or 'X' should always precede the\r\n\t      // extension number.\r\n      }\r\n      else if (parseDigits(candidate.substring(index)) !== number.ext)\r\n      {\r\n        return false\r\n      }\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nfunction isNationalPrefixPresentIfRequired(number, _metadata)\r\n{\r\n  // First, check how we deduced the country code. If it was written in international format, then\r\n  // the national prefix is not required.\r\n  if (number.getCountryCodeSource() != 'FROM_DEFAULT_COUNTRY')\r\n  {\r\n    return true\r\n  }\r\n\r\n  const phoneNumberRegion = util.getRegionCodeForCountryCode(number.getCountryCode())\r\n\r\n  const metadata = util.getMetadataForRegion(phoneNumberRegion)\r\n  if (metadata == null)\r\n  {\r\n    return true\r\n  }\r\n\r\n  // Check if a national prefix should be present when formatting this number.\r\n  const nationalNumber = util.getNationalSignificantNumber(number)\r\n  const formatRule = util.chooseFormattingPatternForNumber(metadata.numberFormats(), nationalNumber)\r\n\r\n  // To do this, we check that a national prefix formatting rule was present\r\n  // and that it wasn't just the first-group symbol ($1) with punctuation.\r\n  if (formatRule && formatRule.getNationalPrefixFormattingRule().length > 0)\r\n  {\r\n    if (formatRule.getNationalPrefixOptionalWhenFormatting())\r\n    {\r\n      // The national-prefix is optional in these cases, so we don't need to check if it was\r\n      // present.\r\n      return true\r\n    }\r\n\r\n    if (PhoneNumberUtil.formattingRuleHasFirstGroupOnly(\r\n        formatRule.getNationalPrefixFormattingRule()))\r\n    {\r\n      // National Prefix not needed for this number.\r\n      return true\r\n    }\r\n\r\n    // Normalize the remainder.\r\n    const rawInputCopy = PhoneNumberUtil.normalizeDigitsOnly(number.getRawInput())\r\n\r\n    // Check if we found a national prefix and/or carrier code at the start of the raw input, and\r\n    // return the result.\r\n    return util.maybeStripNationalPrefixAndCarrierCode(rawInputCopy, metadata, null)\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nexport function containsMoreThanOneSlashInNationalNumber(number, candidate)\r\n{\r\n  const firstSlashInBodyIndex = candidate.indexOf('/')\r\n  if (firstSlashInBodyIndex < 0)\r\n  {\r\n    // No slashes, this is okay.\r\n    return false\r\n  }\r\n\r\n  // Now look for a second one.\r\n  const secondSlashInBodyIndex = candidate.indexOf('/', firstSlashInBodyIndex + 1)\r\n  if (secondSlashInBodyIndex < 0)\r\n  {\r\n    // Only one slash, this is okay.\r\n    return false\r\n  }\r\n\r\n  // If the first slash is after the country calling code, this is permitted.\r\n  const candidateHasCountryCode =\r\n      (number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN\r\n       || number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITHOUT_PLUS_SIGN)\r\n\r\n  if (candidateHasCountryCode\r\n      && PhoneNumberUtil.normalizeDigitsOnly(candidate.substring(0, firstSlashInBodyIndex))\r\n          === String(number.getCountryCode()))\r\n  {\r\n    // Any more slashes and this is illegal.\r\n    return candidate.slice(secondSlashInBodyIndex + 1).indexOf('/') >= 0\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nfunction checkNumberGroupingIsValid(\r\n  number,\r\n  candidate,\r\n  metadata,\r\n  checkGroups,\r\n  regExpCache\r\n) {\r\n  const normalizedCandidate = normalizeDigits(candidate, true /* keep non-digits */)\r\n  let formattedNumberGroups = getNationalNumberGroups(metadata, number, null)\r\n  if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\r\n    return true\r\n  }\r\n\r\n  // If this didn't pass, see if there are any alternate formats that match, and try them instead.\r\n  const alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode())\r\n  const nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n\r\n  if (alternateFormats) {\r\n    for (const alternateFormat of alternateFormats.numberFormats()) {\r\n      if (alternateFormat.leadingDigitsPatterns().length > 0) {\r\n        // There is only one leading digits pattern for alternate formats.\r\n        const leadingDigitsRegExp = regExpCache.getPatternForRegExp('^' + alternateFormat.leadingDigitsPatterns()[0])\r\n        if (!leadingDigitsRegExp.test(nationalSignificantNumber)) {\r\n          // Leading digits don't match; try another one.\r\n          continue\r\n        }\r\n      }\r\n      formattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat)\r\n      if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\r\n        return true\r\n      }\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n/**\r\n * Helper method to get the national-number part of a number, formatted without any national\r\n * prefix, and return it as a set of digit blocks that would be formatted together following\r\n * standard formatting rules.\r\n */\r\nfunction getNationalNumberGroups(\r\n\tmetadata,\r\n\tnumber,\r\n\tformattingPattern\r\n) {\r\n  if (formattingPattern) {\r\n    // We format the NSN only, and split that according to the separator.\r\n    const nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n    return util.formatNsnUsingPattern(nationalSignificantNumber,\r\n                                      formattingPattern, 'RFC3966', metadata).split('-')\r\n\t}\r\n\r\n  // This will be in the format +CC-DG1-DG2-DGX;ext=EXT where DG1..DGX represents groups of digits.\r\n  const rfc3966Format = formatNumber(number, 'RFC3966', metadata)\r\n\r\n  // We remove the extension part from the formatted string before splitting it into different\r\n  // groups.\r\n  let endIndex = rfc3966Format.indexOf(';')\r\n  if (endIndex < 0) {\r\n    endIndex = rfc3966Format.length\r\n  }\r\n\r\n  // The country-code will have a '-' following it.\r\n  const startIndex = rfc3966Format.indexOf('-') + 1\r\n  return rfc3966Format.slice(startIndex, endIndex).split('-')\r\n}\r\n\r\nfunction allNumberGroupsAreExactlyPresent\r\n(\r\n\tmetadata,\r\n\tnumber,\r\n\tnormalizedCandidate,\r\n\tformattedNumberGroups\r\n)\r\n{\r\n  const candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN)\r\n\r\n  // Set this to the last group, skipping it if the number has an extension.\r\n  let candidateNumberGroupIndex =\r\n      number.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1\r\n\r\n  // First we check if the national significant number is formatted as a block.\r\n  // We use contains and not equals, since the national significant number may be present with\r\n  // a prefix such as a national number prefix, or the country code itself.\r\n  if (candidateGroups.length == 1\r\n      || candidateGroups[candidateNumberGroupIndex].contains(\r\n          util.getNationalSignificantNumber(number)))\r\n  {\r\n    return true\r\n  }\r\n\r\n  // Starting from the end, go through in reverse, excluding the first group, and check the\r\n  // candidate and number groups are the same.\r\n  let formattedNumberGroupIndex = (formattedNumberGroups.length - 1)\r\n  while (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0)\r\n  {\r\n    if (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex])\r\n    {\r\n      return false\r\n    }\r\n    formattedNumberGroupIndex--\r\n    candidateNumberGroupIndex--\r\n  }\r\n\r\n  // Now check the first group. There may be a national prefix at the start, so we only check\r\n  // that the candidate group ends with the formatted number group.\r\n  return (candidateNumberGroupIndex >= 0\r\n      && endsWith(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]))\r\n}\r\n\r\n\r\nfunction allNumberGroupsRemainGrouped\r\n(\r\n\tmetadata,\r\n\tnumber,\r\n\tnormalizedCandidate,\r\n\tformattedNumberGroups\r\n)\r\n{\r\n  let fromIndex = 0\r\n  if (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY)\r\n  {\r\n    // First skip the country code if the normalized candidate contained it.\r\n    const countryCode = String(number.getCountryCode())\r\n    fromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length()\r\n  }\r\n\r\n  // Check each group of consecutive digits are not broken into separate groupings in the\r\n  // {@code normalizedCandidate} string.\r\n  for (let i = 0; i < formattedNumberGroups.length; i++)\r\n  {\r\n    // Fails if the substring of {@code normalizedCandidate} starting from {@code fromIndex}\r\n    // doesn't contain the consecutive digits in formattedNumberGroups[i].\r\n    fromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex)\r\n    if (fromIndex < 0) {\r\n      return false\r\n    }\r\n    // Moves {@code fromIndex} forward.\r\n    fromIndex += formattedNumberGroups[i].length()\r\n    if (i == 0 && fromIndex < normalizedCandidate.length())\r\n    {\r\n      // We are at the position right after the NDC. We get the region used for formatting\r\n      // information based on the country code in the phone number, rather than the number itself,\r\n      // as we do not need to distinguish between different countries with the same country\r\n      // calling code and this is faster.\r\n      const region = util.getRegionCodeForCountryCode(number.getCountryCode())\r\n      if (util.getNddPrefixForRegion(region, true) != null\r\n          && Character.isDigit(normalizedCandidate.charAt(fromIndex))) {\r\n        // This means there is no formatting symbol after the NDC. In this case, we only\r\n        // accept the number if there is no formatting symbol at all in the number, except\r\n        // for extensions. This is only important for countries with national prefixes.\r\n        const nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n        return startsWith\r\n        (\r\n      \t  normalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length),\r\n           nationalSignificantNumber\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  // The check here makes sure that we haven't mistakenly already used the extension to\r\n  // match the last group of the subscriber number. Note the extension cannot have\r\n  // formatting in-between digits.\r\n  return normalizedCandidate.slice(fromIndex).contains(number.getExtension())\r\n}"]},"metadata":{},"sourceType":"module"}