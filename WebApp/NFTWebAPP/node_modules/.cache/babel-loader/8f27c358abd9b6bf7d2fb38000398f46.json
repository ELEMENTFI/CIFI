{"ast":null,"code":"import { count_occurences } from './helpers';\nexport default function closeBraces(retained_template, template) {\n  var placeholder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'x';\n  var empty_placeholder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ' ';\n  var cut_before = retained_template.length;\n  var opening_braces = count_occurences('(', retained_template);\n  var closing_braces = count_occurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n\n  while (dangling_braces > 0 && cut_before < template.length) {\n    retained_template += template[cut_before].replace(placeholder, empty_placeholder);\n\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n\n    cut_before++;\n  }\n\n  return retained_template;\n}","map":{"version":3,"sources":["../source/closeBraces.js"],"names":["placeholder","empty_placeholder","cut_before","retained_template","opening_braces","count_occurences","closing_braces","dangling_braces","template"],"mappings":"AAAA,SAAA,gBAAA,QAAA,WAAA;AAEA,eAAe,SAAA,WAAA,CAAA,iBAAA,EAAA,QAAA,EACf;AAAA,MADiEA,WACjE,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAD+E,GAC/E;AAAA,MADoFC,iBACpF,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GADwG,GACxG;AACC,MAAIC,UAAU,GAAGC,iBAAiB,CAAlC,MAAA;AAEA,MAAMC,cAAc,GAAGC,gBAAgB,CAAA,GAAA,EAAvC,iBAAuC,CAAvC;AACA,MAAMC,cAAc,GAAGD,gBAAgB,CAAA,GAAA,EAAvC,iBAAuC,CAAvC;AAEA,MAAIE,eAAe,GAAGH,cAAc,GAApC,cAAA;;AAEA,SAAOG,eAAe,GAAfA,CAAAA,IAAuBL,UAAU,GAAGM,QAAQ,CAAnD,MAAA,EACA;AACCL,IAAAA,iBAAiB,IAAIK,QAAQ,CAARA,UAAQ,CAARA,CAAAA,OAAAA,CAAAA,WAAAA,EAArBL,iBAAqBK,CAArBL;;AAEA,QAAIK,QAAQ,CAARA,UAAQ,CAARA,KAAJ,GAAA,EACA;AACCD,MAAAA,eAAe;AACf;;AAEDL,IAAAA,UAAU;AACV;;AAED,SAAA,iBAAA;AACA","sourcesContent":["import { count_occurences } from './helpers'\r\n\r\nexport default function closeBraces(retained_template, template, placeholder = 'x', empty_placeholder = ' ')\r\n{\r\n\tlet cut_before = retained_template.length\r\n\r\n\tconst opening_braces = count_occurences('(', retained_template)\r\n\tconst closing_braces = count_occurences(')', retained_template)\r\n\r\n\tlet dangling_braces = opening_braces - closing_braces\r\n\r\n\twhile (dangling_braces > 0 && cut_before < template.length)\r\n\t{\r\n\t\tretained_template += template[cut_before].replace(placeholder, empty_placeholder)\r\n\r\n\t\tif (template[cut_before] === ')')\r\n\t\t{\r\n\t\t\tdangling_braces--\r\n\t\t}\r\n\r\n\t\tcut_before++\r\n\t}\r\n\r\n\treturn retained_template\r\n}\r\n"]},"metadata":{},"sourceType":"module"}