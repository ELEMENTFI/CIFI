{"version":3,"sources":["../source/InputBasic.js"],"names":["React","useCallback","PropTypes","parseIncompletePhoneNumber","formatIncompletePhoneNumber","getInputValuePrefix","removeInputValuePrefix","createInput","defaultMetadata","InputBasic","ref","value","onChange","country","international","withCountryCallingCode","metadata","Input","inputComponent","rest","prefix","_onChange","event","newValue","target","newValueFormatted","format","indexOf","slice","forwardRef","propTypes","string","isRequired","func","bool","object","elementType","defaultProps"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core'\r\n\r\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix'\r\n\r\nexport function createInput(defaultMetadata) {\r\n\t/**\r\n\t * `InputBasic`'s caret is not as \"smart\" as the default `inputComponent`'s\r\n\t * but still works good enough. When erasing or inserting digits in the middle\r\n\t * of a phone number the caret usually jumps to the end: this is the expected\r\n\t * behaviour and it's the workaround for the [Samsung Galaxy smart caret positioning bug](https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n\t */\r\n\tfunction InputBasic({\r\n\t\tvalue,\r\n\t\tonChange,\r\n\t\tcountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tmetadata,\r\n\t\tinputComponent: Input,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\tconst prefix = getInputValuePrefix({\r\n\t\t\tcountry,\r\n\t\t\tinternational,\r\n\t\t\twithCountryCallingCode,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tconst _onChange = useCallback((event) => {\r\n\t\t\tlet newValue = parseIncompletePhoneNumber(event.target.value)\r\n\t\t\t// By default, if a value is something like `\"(123)\"`\r\n\t\t\t// then Backspace would only erase the rightmost brace\r\n\t\t\t// becoming something like `\"(123\"`\r\n\t\t\t// which would give the same `\"123\"` value\r\n\t\t\t// which would then be formatted back to `\"(123)\"`\r\n\t\t\t// and so a user wouldn't be able to erase the phone number.\r\n\t\t\t// Working around this issue with this simple hack.\r\n\t\t\tif (newValue === value) {\r\n\t\t\t\tconst newValueFormatted = format(prefix, newValue, country, metadata)\r\n\t\t\t\tif (newValueFormatted.indexOf(event.target.value) === 0) {\r\n\t\t\t\t\t// Trim the last digit (or plus sign).\r\n\t\t\t\t\tnewValue = newValue.slice(0, -1)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tonChange(newValue)\r\n\t\t}, [prefix, value, onChange, country, metadata])\r\n\r\n\t\treturn (\r\n\t\t\t<Input\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tvalue={format(prefix, value, country, metadata)}\r\n\t\t\t\tonChange={_onChange}/>\r\n\t\t)\r\n\t}\r\n\r\n\tInputBasic = React.forwardRef(InputBasic)\r\n\r\n\tInputBasic.propTypes = {\r\n\t\t/**\r\n\t\t * The parsed phone number.\r\n\t\t * \"Parsed\" not in a sense of \"E.164\"\r\n\t\t * but rather in a sense of \"having only\r\n\t\t * digits and possibly a leading plus character\".\r\n\t\t * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t\t */\r\n\t\tvalue: PropTypes.string.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Updates the `value`.\r\n\t\t */\r\n\t\tonChange: PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * as a national phone number (e.g. `(800) 555 35 35`).\r\n\t\t * E.g. \"US\", \"RU\", etc.\r\n\t\t * If no `country` is passed then `value`\r\n\t\t * is formatted as an international phone number.\r\n\t\t * (e.g. `+7 800 555 35 35`)\r\n\t\t * Perhaps the `country` property should have been called `defaultCountry`\r\n\t\t * because if `value` is an international number then `country` is ignored.\r\n\t\t */\r\n\t\tcountry : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * If `country` property is passed along with `international={true}` property\r\n\t\t * then the phone number will be input in \"international\" format for that `country`\r\n\t\t * (without \"country calling code\").\r\n\t\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t\t * (without \"country calling code\" `+1`).\r\n\t\t */\r\n\t\tinternational: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * If `country` and `international` properties are set,\r\n\t\t * then by default it won't include \"country calling code\" in the input field.\r\n\t\t * To change that, pass `withCountryCallingCode` property,\r\n\t\t * and it will include \"country calling code\" in the input field.\r\n\t\t */\r\n\t\twithCountryCallingCode: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object.isRequired,\r\n\r\n\t\t/**\r\n\t\t * The `<input/>` component.\r\n\t\t */\r\n\t\tinputComponent: PropTypes.elementType.isRequired\r\n\t}\r\n\r\n\tInputBasic.defaultProps = {\r\n\t\tmetadata: defaultMetadata,\r\n\t\tinputComponent: 'input'\r\n\t}\r\n\r\n\treturn InputBasic\r\n}\r\n\r\nexport default createInput()\r\n\r\nfunction format(prefix, value, country, metadata) {\r\n\treturn removeInputValuePrefix(\r\n\t\tformatIncompletePhoneNumber(\r\n\t\t\tprefix + value,\r\n\t\t\tcountry,\r\n\t\t\tmetadata\r\n\t\t),\r\n\t\tprefix\r\n\t)\r\n}"],"file":"InputBasic.js"}