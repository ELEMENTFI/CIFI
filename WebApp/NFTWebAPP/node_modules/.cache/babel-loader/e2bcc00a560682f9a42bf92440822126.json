{"ast":null,"code":"// Copy-pasted from `PhoneNumberMatcher.js`.\nimport { PLUS_CHARS } from '../constants';\nimport { limit } from './util';\nimport { isLatinLetter, isInvalidPunctuationSymbol } from './utf-8';\nvar OPENING_PARENS = \"(\\\\[\\uFF08\\uFF3B\";\nvar CLOSING_PARENS = \")\\\\]\\uFF09\\uFF3D\";\nvar NON_PARENS = \"[^\".concat(OPENING_PARENS).concat(CLOSING_PARENS, \"]\");\nexport var LEAD_CLASS = \"[\".concat(OPENING_PARENS).concat(PLUS_CHARS, \"]\"); // Punctuation that may be at the start of a phone number - brackets and plus signs.\n\nvar LEAD_CLASS_LEADING = new RegExp('^' + LEAD_CLASS); // Limit on the number of pairs of brackets in a phone number.\n\nvar BRACKET_PAIR_LIMIT = limit(0, 3);\n/**\r\n * Pattern to check that brackets match. Opening brackets should be closed within a phone number.\r\n * This also checks that there is something inside the brackets. Having no brackets at all is also\r\n * fine.\r\n *\r\n * An opening bracket at the beginning may not be closed, but subsequent ones should be.  It's\r\n * also possible that the leading bracket was dropped, so we shouldn't be surprised if we see a\r\n * closing bracket first. We limit the sets of brackets in a phone number to four.\r\n */\n\nvar MATCHING_BRACKETS_ENTIRE = new RegExp('^' + \"(?:[\" + OPENING_PARENS + \"])?\" + \"(?:\" + NON_PARENS + \"+\" + \"[\" + CLOSING_PARENS + \"])?\" + NON_PARENS + \"+\" + \"(?:[\" + OPENING_PARENS + \"]\" + NON_PARENS + \"+[\" + CLOSING_PARENS + \"])\" + BRACKET_PAIR_LIMIT + NON_PARENS + \"*\" + '$');\n/**\r\n * Matches strings that look like publication pages. Example:\r\n * <pre>Computing Complete Answers to Queries in the Presence of Limited Access Patterns.\r\n * Chen Li. VLDB J. 12(3): 211-227 (2003).</pre>\r\n *\r\n * The string \"211-227 (2003)\" is not a telephone number.\r\n */\n\nvar PUB_PAGES = /\\d{1,5}-+\\d{1,5}\\s{0,4}\\(\\d{1,4}/;\nexport default function isValidCandidate(candidate, offset, text, leniency) {\n  // Check the candidate doesn't contain any formatting\n  // which would indicate that it really isn't a phone number.\n  if (!MATCHING_BRACKETS_ENTIRE.test(candidate) || PUB_PAGES.test(candidate)) {\n    return;\n  } // If leniency is set to VALID or stricter, we also want to skip numbers that are surrounded\n  // by Latin alphabetic characters, to skip cases like abc8005001234 or 8005001234def.\n\n\n  if (leniency !== 'POSSIBLE') {\n    // If the candidate is not at the start of the text,\n    // and does not start with phone-number punctuation,\n    // check the previous character.\n    if (offset > 0 && !LEAD_CLASS_LEADING.test(candidate)) {\n      var previousChar = text[offset - 1]; // We return null if it is a latin letter or an invalid punctuation symbol.\n\n      if (isInvalidPunctuationSymbol(previousChar) || isLatinLetter(previousChar)) {\n        return false;\n      }\n    }\n\n    var lastCharIndex = offset + candidate.length;\n\n    if (lastCharIndex < text.length) {\n      var nextChar = text[lastCharIndex];\n\n      if (isInvalidPunctuationSymbol(nextChar) || isLatinLetter(nextChar)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["../../source/findNumbers/isValidCandidate.js"],"names":["OPENING_PARENS","CLOSING_PARENS","NON_PARENS","LEAD_CLASS","LEAD_CLASS_LEADING","BRACKET_PAIR_LIMIT","limit","MATCHING_BRACKETS_ENTIRE","PUB_PAGES","leniency","offset","previousChar","text","isInvalidPunctuationSymbol","isLatinLetter","lastCharIndex","candidate","nextChar"],"mappings":"AAAA;AAEA,SAAA,UAAA,QAAA,cAAA;AACA,SAAA,KAAA,QAAA,QAAA;AAEA,SAAA,aAAA,EAAA,0BAAA,QAAA,SAAA;AAKA,IAAMA,cAAc,GAApB,kBAAA;AACA,IAAMC,cAAc,GAApB,kBAAA;AACA,IAAMC,UAAU,GAAA,KAAA,MAAA,CAAA,cAAA,EAAA,MAAA,CAAA,cAAA,EAAhB,GAAgB,CAAhB;AAEA,OAAO,IAAMC,UAAU,GAAA,IAAA,MAAA,CAAA,cAAA,EAAA,MAAA,CAAA,UAAA,EAAhB,GAAgB,CAAhB,C,CAEP;;AACA,IAAMC,kBAAkB,GAAG,IAAA,MAAA,CAAW,MAAtC,UAA2B,CAA3B,C,CAEA;;AACA,IAAMC,kBAAkB,GAAGC,KAAK,CAAA,CAAA,EAAhC,CAAgC,CAAhC;AAEA;;;;;;;;;;AASA,IAAMC,wBAAwB,GAAG,IAAA,MAAA,CAEhC,MAAA,MAAA,GAAA,cAAA,GAAA,KAAA,GAAA,KAAA,GAAA,UAAA,GAAA,GAAA,GAAA,GAAA,GAAA,cAAA,GAAA,KAAA,GAAA,UAAA,GAAA,GAAA,GAAA,MAAA,GAAA,cAAA,GAAA,GAAA,GAAA,UAAA,GAAA,IAAA,GAAA,cAAA,GAAA,IAAA,GAAA,kBAAA,GAAA,UAAA,GAAA,GAAA,GAFD,GAAiC,CAAjC;AAUA;;;;;;;;AAOA,IAAMC,SAAS,GAAf,kCAAA;AAEA,eAAe,SAAA,gBAAA,CAAA,SAAA,EAAA,MAAA,EAAA,IAAA,EAAA,QAAA,EACf;AACC;AACA;AACA,MAAI,CAACD,wBAAwB,CAAxBA,IAAAA,CAAD,SAACA,CAAD,IAA6CC,SAAS,CAATA,IAAAA,CAAjD,SAAiDA,CAAjD,EAA4E;AAC3E;AAJF,GAAA,CAOC;AACA;;;AACA,MAAIC,QAAQ,KAAZ,UAAA,EACA;AACC;AACA;AACA;AACA,QAAIC,MAAM,GAANA,CAAAA,IAAc,CAACN,kBAAkB,CAAlBA,IAAAA,CAAnB,SAAmBA,CAAnB,EACA;AACC,UAAMO,YAAY,GAAGC,IAAI,CAACF,MAAM,GADjC,CAC0B,CAAzB,CADD,CAEC;;AACA,UAAIG,0BAA0B,CAA1BA,YAA0B,CAA1BA,IAA4CC,aAAa,CAA7D,YAA6D,CAA7D,EAA6E;AAC5E,eAAA,KAAA;AACA;AACD;;AAED,QAAMC,aAAa,GAAGL,MAAM,GAAGM,SAAS,CAAxC,MAAA;;AACA,QAAID,aAAa,GAAGH,IAAI,CAAxB,MAAA,EACA;AACC,UAAMK,QAAQ,GAAGL,IAAI,CAArB,aAAqB,CAArB;;AACA,UAAIC,0BAA0B,CAA1BA,QAA0B,CAA1BA,IAAwCC,aAAa,CAAzD,QAAyD,CAAzD,EAAqE;AACpE,eAAA,KAAA;AACA;AACD;AACD;;AAED,SAAA,IAAA;AACA","sourcesContent":["// Copy-pasted from `PhoneNumberMatcher.js`.\r\n\r\nimport { PLUS_CHARS } from '../constants'\r\nimport { limit } from './util'\r\n\r\nimport {\r\n\tisLatinLetter,\r\n\tisInvalidPunctuationSymbol\r\n} from './utf-8'\r\n\r\nconst OPENING_PARENS = '(\\\\[\\uFF08\\uFF3B'\r\nconst CLOSING_PARENS = ')\\\\]\\uFF09\\uFF3D'\r\nconst NON_PARENS = `[^${OPENING_PARENS}${CLOSING_PARENS}]`\r\n\r\nexport const LEAD_CLASS = `[${OPENING_PARENS}${PLUS_CHARS}]`\r\n\r\n// Punctuation that may be at the start of a phone number - brackets and plus signs.\r\nconst LEAD_CLASS_LEADING = new RegExp('^' + LEAD_CLASS)\r\n\r\n// Limit on the number of pairs of brackets in a phone number.\r\nconst BRACKET_PAIR_LIMIT = limit(0, 3)\r\n\r\n/**\r\n * Pattern to check that brackets match. Opening brackets should be closed within a phone number.\r\n * This also checks that there is something inside the brackets. Having no brackets at all is also\r\n * fine.\r\n *\r\n * An opening bracket at the beginning may not be closed, but subsequent ones should be.  It's\r\n * also possible that the leading bracket was dropped, so we shouldn't be surprised if we see a\r\n * closing bracket first. We limit the sets of brackets in a phone number to four.\r\n */\r\nconst MATCHING_BRACKETS_ENTIRE = new RegExp\r\n(\r\n\t'^'\r\n\t+ \"(?:[\" + OPENING_PARENS + \"])?\" + \"(?:\" + NON_PARENS + \"+\" + \"[\" + CLOSING_PARENS + \"])?\"\r\n\t+ NON_PARENS + \"+\"\r\n\t+ \"(?:[\" + OPENING_PARENS + \"]\" + NON_PARENS + \"+[\" + CLOSING_PARENS + \"])\" + BRACKET_PAIR_LIMIT\r\n\t+ NON_PARENS + \"*\"\r\n\t+ '$'\r\n)\r\n\r\n/**\r\n * Matches strings that look like publication pages. Example:\r\n * <pre>Computing Complete Answers to Queries in the Presence of Limited Access Patterns.\r\n * Chen Li. VLDB J. 12(3): 211-227 (2003).</pre>\r\n *\r\n * The string \"211-227 (2003)\" is not a telephone number.\r\n */\r\nconst PUB_PAGES = /\\d{1,5}-+\\d{1,5}\\s{0,4}\\(\\d{1,4}/\r\n\r\nexport default function isValidCandidate(candidate, offset, text, leniency)\r\n{\r\n\t// Check the candidate doesn't contain any formatting\r\n\t// which would indicate that it really isn't a phone number.\r\n\tif (!MATCHING_BRACKETS_ENTIRE.test(candidate) || PUB_PAGES.test(candidate)) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// If leniency is set to VALID or stricter, we also want to skip numbers that are surrounded\r\n\t// by Latin alphabetic characters, to skip cases like abc8005001234 or 8005001234def.\r\n\tif (leniency !== 'POSSIBLE')\r\n\t{\r\n\t\t// If the candidate is not at the start of the text,\r\n\t\t// and does not start with phone-number punctuation,\r\n\t\t// check the previous character.\r\n\t\tif (offset > 0 && !LEAD_CLASS_LEADING.test(candidate))\r\n\t\t{\r\n\t\t\tconst previousChar = text[offset - 1]\r\n\t\t\t// We return null if it is a latin letter or an invalid punctuation symbol.\r\n\t\t\tif (isInvalidPunctuationSymbol(previousChar) || isLatinLetter(previousChar)) {\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst lastCharIndex = offset + candidate.length\r\n\t\tif (lastCharIndex < text.length)\r\n\t\t{\r\n\t\t\tconst nextChar = text[lastCharIndex]\r\n\t\t\tif (isInvalidPunctuationSymbol(nextChar) || isLatinLetter(nextChar)) {\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn true\r\n}"]},"metadata":{},"sourceType":"module"}