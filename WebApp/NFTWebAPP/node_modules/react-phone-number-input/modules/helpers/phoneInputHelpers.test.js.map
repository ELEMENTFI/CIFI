{"version":3,"sources":["../../source/helpers/phoneInputHelpers.test.js"],"names":["getPreSelectedCountry","getCountrySelectOptions","parsePhoneNumber","generateNationalNumberDigits","getPhoneDigitsForNewCountry","e164","getCountryForPartialE164Number","onPhoneDigitsChange","getInitialPhoneDigits","getCountryFromPossiblyIncompleteInternationalPhoneNumber","compareStrings","stripCountryCallingCode","getNationalSignificantNumberDigits","couldNumberBelongToCountry","trimNumber","metadata","describe","it","value","phoneNumber","countries","getAnyCountry","required","should","equal","expect","to","be","undefined","defaultCountry","country","phone","defaultLabels","countryNames","deep","label","addInternationalOption","ZZ","a","b","nationalNumber","prevCountry","newCountry","useNationalFormat","phoneDigits","countryRequired","prevPhoneDigits","limitMaxLength","international","countryCallingCodeEditable","onChange","number"],"mappings":"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","sourcesContent":["import {\r\n\tgetPreSelectedCountry,\r\n\tgetCountrySelectOptions,\r\n\tparsePhoneNumber,\r\n\tgenerateNationalNumberDigits,\r\n\tgetPhoneDigitsForNewCountry,\r\n\te164,\r\n\tgetCountryForPartialE164Number,\r\n\tonPhoneDigitsChange,\r\n\tgetInitialPhoneDigits,\r\n\t// Private functions\r\n\tgetCountryFromPossiblyIncompleteInternationalPhoneNumber,\r\n\tcompareStrings,\r\n\tstripCountryCallingCode,\r\n\tgetNationalSignificantNumberDigits,\r\n\tcouldNumberBelongToCountry,\r\n\ttrimNumber\r\n} from './phoneInputHelpers'\r\n\r\nimport metadata from 'libphonenumber-js/metadata.min.json'\r\n\r\ndescribe('phoneInputHelpers', () => {\r\n\tit('should get pre-selected country', () => {\r\n\t\t// Can't return \"International\". Return the first country available.\r\n\t\tgetPreSelectedCountry({\r\n\t\t\tvalue: '+11111111111',\r\n\t\t\tphoneNumber: {},\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tgetAnyCountry: () => 'US',\r\n\t\t\trequired: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('US')\r\n\r\n\t\t// Can return \"International\".\r\n\t\t// Country can't be derived from the phone number.\r\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/378\r\n\t\texpect(getPreSelectedCountry({\r\n\t\t\tvalue: '+11111111111',\r\n\t\t\tphoneNumber: {},\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tgetAnyCountry: () => 'US',\r\n\t\t\trequired: false,\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\t// Can return \"International\".\r\n\t\t// Country can't be derived from the phone number.\r\n\t\t// Has `defaultCountry`.\r\n\t\t// Has `value`.\r\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/378\r\n\t\texpect(getPreSelectedCountry({\r\n\t\t\tvalue: '+11111111111',\r\n\t\t\tphoneNumber: {},\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tcountries: ['RU', 'FR'],\r\n\t\t\trequired: false,\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\t// Can return \"International\".\r\n\t\t// Country can be derived from the phone number.\r\n\t\t// Has `defaultCountry`.\r\n\t\t// Has a valid partial `value`.\r\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/378\r\n\t\texpect(getPreSelectedCountry({\r\n\t\t\tvalue: '+7800',\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tcountries: ['RU', 'FR'],\r\n\t\t\trequired: false,\r\n\t\t\tmetadata\r\n\t\t})).to.equal('RU')\r\n\r\n\t\t// Derive country from the phone number.\r\n\t\tgetPreSelectedCountry({\r\n\t\t\tvalue: '+78005553535',\r\n\t\t\tphoneNumber: { country: 'RU', phone: '8005553535' },\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tgetAnyCountry: () => 'US',\r\n\t\t\trequired: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('RU')\r\n\r\n\t\t// Country derived from the phone number overrides the supplied one.\r\n\t\tgetPreSelectedCountry({\r\n\t\t\tvalue: '+78005553535',\r\n\t\t\tphoneNumber: { country: 'RU', phone: '8005553535' },\r\n\t\t\tdefaultCountry: 'US',\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\trequired: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('RU')\r\n\r\n\t\t// Only pre-select a country if it's in the available `countries` list.\r\n\t\tgetPreSelectedCountry({\r\n\t\t\tvalue: '+78005553535',\r\n\t\t\tphoneNumber: { country: 'RU', phone: '8005553535' },\r\n\t\t\tcountries: ['US', 'DE'],\r\n\t\t\tgetAnyCountry: () => 'US',\r\n\t\t\trequired: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('US')\r\n\r\n\t\texpect(getPreSelectedCountry({\r\n\t\t\tvalue: '+78005553535',\r\n\t\t\tphoneNumber: { country: 'RU', phone: '8005553535' },\r\n\t\t\tdefaultCountry: 'US',\r\n\t\t\tcountries: ['US', 'DE'],\r\n\t\t\trequired: false,\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\t})\r\n\r\n\tit('should generate country select options', () => {\r\n\t\tconst defaultLabels = {\r\n\t\t\t'RU': 'Russia (Россия)',\r\n\t\t\t'US': 'United States',\r\n\t\t\t'ZZ': 'International'\r\n\t\t}\r\n\r\n\t\t// Without custom country names.\r\n\t\tgetCountrySelectOptions({\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tcountryNames: defaultLabels\r\n\t\t}).should.deep.equal([{\r\n\t\t\tvalue: 'RU',\r\n\t\t\tlabel: 'Russia (Россия)'\r\n\t\t}, {\r\n\t\t\tvalue: 'US',\r\n\t\t\tlabel: 'United States'\r\n\t\t}])\r\n\r\n\t\t// With custom country names.\r\n\t\tgetCountrySelectOptions({\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tcountryNames: { ...defaultLabels, 'RU': 'Russia' }\r\n\t\t}).should.deep.equal([{\r\n\t\t\tvalue: 'RU',\r\n\t\t\tlabel: 'Russia'\r\n\t\t}, {\r\n\t\t\tvalue: 'US',\r\n\t\t\tlabel: 'United States'\r\n\t\t}])\r\n\r\n\t\t// Should substitute missing country names with country codes.\r\n\t\tgetCountrySelectOptions({\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tcountryNames: { ...defaultLabels, 'RU': undefined }\r\n\t\t}).should.deep.equal([{\r\n\t\t\tvalue: 'RU',\r\n\t\t\tlabel: 'RU'\r\n\t\t}, {\r\n\t\t\tvalue: 'US',\r\n\t\t\tlabel: 'United States'\r\n\t\t}])\r\n\r\n\t\t// With \"International\" (without custom country names).\r\n\t\tgetCountrySelectOptions({\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tcountryNames: defaultLabels,\r\n\t\t\taddInternationalOption: true\r\n\t\t}).should.deep.equal([{\r\n\t\t\tlabel: 'International'\r\n\t\t}, {\r\n\t\t\tvalue: 'RU',\r\n\t\t\tlabel: 'Russia (Россия)'\r\n\t\t}, {\r\n\t\t\tvalue: 'US',\r\n\t\t\tlabel: 'United States'\r\n\t\t}])\r\n\r\n\t\t// With \"International\" (with custom country names).\r\n\t\tgetCountrySelectOptions({\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tcountryNames: { ...defaultLabels, 'RU': 'Russia', ZZ: 'Intl' },\r\n\t\t\taddInternationalOption: true\r\n\t\t}).should.deep.equal([{\r\n\t\t\tlabel: 'Intl'\r\n\t\t}, {\r\n\t\t\tvalue: 'RU',\r\n\t\t\tlabel: 'Russia'\r\n\t\t}, {\r\n\t\t\tvalue: 'US',\r\n\t\t\tlabel: 'United States'\r\n\t\t}])\r\n\t})\r\n\r\n\tit('should generate country select options (custom `compareStrings`)', () => {\r\n\t\tconst defaultLabels = {\r\n\t\t\t'RU': 'Russia (Россия)',\r\n\t\t\t'US': 'United States',\r\n\t\t\t'ZZ': 'International'\r\n\t\t}\r\n\r\n\t\t// Without custom country names.\r\n\t\tgetCountrySelectOptions({\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tcountryNames: defaultLabels,\r\n\t\t\t// Reverse order.\r\n\t\t\tcompareStrings: (a, b) => a < b ? 1 : (a > b ? -1 : 0)\r\n\t\t}).should.deep.equal([{\r\n\t\t\tvalue: 'US',\r\n\t\t\tlabel: 'United States'\r\n\t\t}, {\r\n\t\t\tvalue: 'RU',\r\n\t\t\tlabel: 'Russia (Россия)'\r\n\t\t}])\r\n\t})\r\n\r\n\t// it('should generate country select options (Chinese locale)', () => {\r\n\t// \t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/20\r\n\t//\r\n\t// \tconst defaultLabels = {\r\n\t// \t\t'RU': 'Russia (Россия)',\r\n\t// \t\t'US': 'United States',\r\n\t// \t\t'ZZ': 'International'\r\n\t// \t}\r\n\t//\r\n\t// \t// Without custom country names.\r\n\t// \tgetCountrySelectOptions({\r\n\t// \t\tcountries: ['US', 'RU'],\r\n\t// \t\tcountryNames: defaultLabels,\r\n\t// \t\tcompareStringsLocales: 'zh-CN-u-co-pinyin'\r\n\t// \t}).should.deep.equal([{\r\n\t// \t\tvalue: 'US',\r\n\t// \t\tlabel: 'United States'\r\n\t// \t}, {\r\n\t// \t\tvalue: 'RU',\r\n\t// \t\tlabel: 'Russia (Россия)'\r\n\t// \t}])\r\n\t// })\r\n\r\n\tit('should parse phone numbers', () => {\r\n\t\tconst phoneNumber = parsePhoneNumber('+78005553535', metadata)\r\n\t\tphoneNumber.country.should.equal('RU')\r\n\t\tphoneNumber.nationalNumber.should.equal('8005553535')\r\n\r\n\t\t// No `value` passed.\r\n\t\texpect(parsePhoneNumber(null, metadata)).to.equal.undefined\r\n\t})\r\n\r\n\tit('should generate national number digits', () => {\r\n\t\tconst phoneNumber = parsePhoneNumber('+33509758351', metadata)\r\n\t\tgenerateNationalNumberDigits(phoneNumber).should.equal('0509758351')\r\n\t})\r\n\r\n\tit('should migrate parsed input for new country', () => {\r\n\t\t// No input. Returns `undefined`.\r\n\t\tgetPhoneDigitsForNewCountry('', {\r\n\t\t\tprevCountry: 'RU',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata,\r\n\t\t\tuseNationalFormat: true\r\n\t\t}).should.equal('')\r\n\r\n\t\t// Switching from \"International\" to a country\r\n\t\t// to which the phone number already belongs to.\r\n\t\t// No changes. Returns `undefined`.\r\n\t\tgetPhoneDigitsForNewCountry('+18005553535', {\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+18005553535')\r\n\r\n\t\t// Switching between countries. National number. No changes.\r\n\t\tgetPhoneDigitsForNewCountry('8005553535', {\r\n\t\t\tprevCountry: 'RU',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('8005553535')\r\n\r\n\t\t// Switching from \"International\" to a country. Calling code not matches. Resets parsed input.\r\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+1')\r\n\r\n\t\t// Switching from \"International\" to a country. Calling code matches. Doesn't reset parsed input.\r\n\t\tgetPhoneDigitsForNewCountry('+12223333333', {\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+12223333333')\r\n\r\n\t\t// Switching countries. International number. Calling code doesn't match.\r\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\r\n\t\t\tprevCountry: 'RU',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+1')\r\n\r\n\t\t// Switching countries. International number. Calling code matches.\r\n\t\tgetPhoneDigitsForNewCountry('+18005553535', {\r\n\t\t\tprevCountry: 'CA',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+18005553535')\r\n\r\n\t\t// Switching countries. International number.\r\n\t\t// Country calling code is longer than the amount of digits available.\r\n\t\tgetPhoneDigitsForNewCountry('+99', {\r\n\t\t\tprevCountry: 'KG',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+1')\r\n\r\n\t\t// Switching countries. International number. No such country code.\r\n\t\tgetPhoneDigitsForNewCountry('+99', {\r\n\t\t\tprevCountry: 'KG',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+1')\r\n\r\n\t\t// Switching to \"International\". National number.\r\n\t\tgetPhoneDigitsForNewCountry('8800555', {\r\n\t\t\tprevCountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+7800555')\r\n\r\n\t\t// Switching to \"International\". No national (significant) number digits entered.\r\n\t\tgetPhoneDigitsForNewCountry('8', {\r\n\t\t\tprevCountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('')\r\n\r\n\t\t// Switching to \"International\". International number. No changes.\r\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\r\n\t\t\tprevCountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+78005553535')\r\n\r\n\t\t// Prefer national format. Country matches. Leaves the \"national (significant) number\".\r\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\r\n\t\t\tnewCountry: 'RU',\r\n\t\t\tmetadata,\r\n\t\t\tuseNationalFormat: true\r\n\t\t}).should.equal('8005553535')\r\n\r\n\t\t// Prefer national format. Country doesn't match, but country calling code does. Leaves the \"national (significant) number\".\r\n\t\tgetPhoneDigitsForNewCountry('+12133734253', {\r\n\t\t\tnewCountry: 'CA',\r\n\t\t\tmetadata,\r\n\t\t\tuseNationalFormat: true\r\n\t\t}).should.equal('2133734253')\r\n\r\n\t\t// Prefer national format. Country doesn't match, neither does country calling code. Clears the value.\r\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata,\r\n\t\t\tuseNationalFormat: true\r\n\t\t}).should.equal('')\r\n\r\n\t\t// Force international format. `phoneDigits` is empty. From no country to a country.\r\n\t\tgetPhoneDigitsForNewCountry(null, {\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata,\r\n\t\t\tuseNationalFormat: false\r\n\t\t}).should.equal('+1')\r\n\r\n\t\t// Force international format. `phoneDigits` is not empty. From a country to a country with the same calling code.\r\n\t\tgetPhoneDigitsForNewCountry('+1222', {\r\n\t\t\tprevCountry: 'CA',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+1222')\r\n\r\n\t\t// Force international format. `phoneDigits` is not empty. From a country to a country with another calling code.\r\n\t\tgetPhoneDigitsForNewCountry('+1222', {\r\n\t\t\tprevCountry: 'CA',\r\n\t\t\tnewCountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+7')\r\n\r\n\t\t// Force international format. `phoneDigits` is not empty. From no country to a country.\r\n\t\tgetPhoneDigitsForNewCountry('+1222', {\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+1222')\r\n\t})\r\n\r\n\tit('should format phone number in e164', () =>\r\n\t{\r\n\t\t// No number.\r\n\t\texpect(e164()).to.be.undefined\r\n\r\n\t\t// International number. Just a '+' sign.\r\n\t\texpect(e164('+')).to.be.undefined\r\n\r\n\t\t// International number.\r\n\t\te164('+7800').should.equal('+7800')\r\n\r\n\t\t// National number. Without country.\r\n\t\texpect(e164('8800', null)).to.be.undefined\r\n\r\n\t\t// National number. With country. Just national prefix.\r\n\t\texpect(e164('8', 'RU', metadata)).to.be.undefined\r\n\r\n\t\t// National number. With country.\r\n\t\te164('8800', 'RU', metadata).should.equal('+7800')\r\n\t})\r\n\r\n\tit('should trim the phone number if it exceeds the maximum length', () =>\r\n\t{\r\n\t\t// // No number.\r\n\t\t// expect(trimNumber()).to.be.undefined\r\n\r\n\t\t// Empty number.\r\n\t\texpect(trimNumber('', 'RU', metadata)).to.equal('')\r\n\r\n\t\t// // International number. Without country.\r\n\t\t// trimNumber('+780055535351').should.equal('+780055535351')\r\n\r\n\t\t// // National number. Without country.\r\n\t\t// trimNumber('880055535351', null).should.equal('880055535351')\r\n\r\n\t\t// National number. Doesn't exceed the maximum length.\r\n\t\ttrimNumber('88005553535', 'RU', metadata).should.equal('88005553535')\r\n\t\t// National number. Exceeds the maximum length.\r\n\t\ttrimNumber('880055535351', 'RU', metadata).should.equal('88005553535')\r\n\r\n\t\t// International number. Doesn't exceed the maximum length.\r\n\t\ttrimNumber('+12135553535', 'US', metadata).should.equal('+12135553535')\r\n\t\t// International number. Exceeds the maximum length.\r\n\t\ttrimNumber('+121355535351', 'US', metadata).should.equal('+12135553535')\r\n\t})\r\n\r\n\tit('should get country for partial E.164 number', () =>\r\n\t{\r\n\t\t// Just a '+' sign.\r\n\t\tgetCountryForPartialE164Number('+', {\r\n\t\t\tcountry: 'RU',\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tmetadata\r\n\t\t}).should.equal('RU')\r\n\r\n\t\texpect(getCountryForPartialE164Number('+', {\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\t// A country can be derived.\r\n\t\tgetCountryForPartialE164Number('+78005553535', {\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tmetadata\r\n\t\t}).should.equal('RU')\r\n\r\n\t\t// A country can't be derived yet.\r\n\t\t// And the currently selected country doesn't fit the number.\r\n\t\texpect(getCountryForPartialE164Number('+7', {\r\n\t\t\tcountry: 'FR',\r\n\t\t\tcountries: ['FR', 'RU'],\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\texpect(getCountryForPartialE164Number('+12', {\r\n\t\t\tcountry: 'FR',\r\n\t\t\tcountries: ['FR', 'US'],\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\t// A country can't be derived yet.\r\n\t\t// And the currently selected country doesn't fit the number.\r\n\t\t// Bit \"International\" option is not available.\r\n\t\tgetCountryForPartialE164Number('+7', {\r\n\t\t\tcountry: 'FR',\r\n\t\t\tcountries: ['FR', 'RU'],\r\n\t\t\trequired: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('FR')\r\n\r\n\t\tgetCountryForPartialE164Number('+12', {\r\n\t\t\tcountry: 'FR',\r\n\t\t\tcountries: ['FR', 'US'],\r\n\t\t\trequired: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('FR')\r\n\t})\r\n\r\n\tit('should get country from possibly incomplete international phone number', () =>\r\n\t{\r\n\t\t// // `001` country calling code.\r\n\t\t// // Non-geographic numbering plan.\r\n\t\t// expect(getCountryFromPossiblyIncompleteInternationalPhoneNumber('+800', metadata)).to.be.undefined\r\n\r\n\t\t// Country can be derived.\r\n\t\tgetCountryFromPossiblyIncompleteInternationalPhoneNumber('+33', metadata).should.equal('FR')\r\n\r\n\t\t// Country can't be derived yet.\r\n\t\texpect(getCountryFromPossiblyIncompleteInternationalPhoneNumber('+12', metadata)).to.be.undefined\r\n\t})\r\n\r\n\tit('should compare strings', () =>\r\n\t{\r\n\t\tcompareStrings('aa', 'ab').should.equal(-1)\r\n\t\tcompareStrings('aa', 'aa').should.equal(0)\r\n\t\tcompareStrings('aac', 'aab').should.equal(1)\r\n\t})\r\n\r\n\tit('should strip country calling code from a number', () =>\r\n\t{\r\n\t\t// Number is longer than country calling code prefix.\r\n\t\tstripCountryCallingCode('+7800', 'RU', metadata).should.equal('800')\r\n\r\n\t\t// Number is shorter than (or equal to) country calling code prefix.\r\n\t\tstripCountryCallingCode('+3', 'FR', metadata).should.equal('')\r\n\t\tstripCountryCallingCode('+7', 'FR', metadata).should.equal('')\r\n\r\n\t\t// `country` doesn't fit the actual `number`.\r\n\t\t// Iterates through all available country calling codes.\r\n\t\tstripCountryCallingCode('+7800', 'FR', metadata).should.equal('800')\r\n\r\n\t\t// No `country`.\r\n\t\t// And the calling code doesn't belong to any country.\r\n\t\tstripCountryCallingCode('+999', null, metadata).should.equal('')\r\n\t})\r\n\r\n\tit('should get national significant number part', () =>\r\n\t{\r\n\t\t// International number.\r\n\t\tgetNationalSignificantNumberDigits('+7800555', null, metadata).should.equal('800555')\r\n\r\n\t\t// International number.\r\n\t\t// No national (significant) number digits.\r\n\t\texpect(getNationalSignificantNumberDigits('+', null, metadata)).to.be.undefined\r\n\t\texpect(getNationalSignificantNumberDigits('+7', null, metadata)).to.be.undefined\r\n\r\n\t\t// National number.\r\n\t\tgetNationalSignificantNumberDigits('8800555', 'RU', metadata).should.equal('800555')\r\n\r\n\t\t// National number.\r\n\t\t// No national (significant) number digits.\r\n\t\texpect(getNationalSignificantNumberDigits('8', 'RU', metadata)).to.be.undefined\r\n\t\texpect(getNationalSignificantNumberDigits('', 'RU', metadata)).to.be.undefined\r\n\t})\r\n\r\n\tit('should determine of a number could belong to a country', () =>\r\n\t{\r\n\t\t// Matching.\r\n\t\tcouldNumberBelongToCountry('+7800', 'RU', metadata).should.equal(true)\r\n\r\n\t\t// First digit already not matching.\r\n\t\tcouldNumberBelongToCountry('+7800', 'FR', metadata).should.equal(false)\r\n\r\n\t\t// First digit matching, second - not matching.\r\n\t\tcouldNumberBelongToCountry('+33', 'AM', metadata).should.equal(false)\r\n\r\n\t\t// Number is shorter than country calling code.\r\n\t\tcouldNumberBelongToCountry('+99', 'KG', metadata).should.equal(true)\r\n\t})\r\n\r\n\tit('should handle phone digits change (should choose new \"value\" based on phone digits)', () => {\r\n\t\tonPhoneDigitsChange('+', {\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('+', {\r\n\t\t\tmetadata,\r\n\t\t\tcountryRequired: true,\r\n\t\t\tgetAnyCountry: () => 'US'\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('+7', {\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+7',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+7'\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('+7', {\r\n\t\t\tmetadata,\r\n\t\t\tcountry: 'RU'\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+7',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('+78', {\r\n\t\t\tmetadata,\r\n\t\t\tcountry: 'RU'\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+78',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: '+78'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change', () => {\r\n\t\tonPhoneDigitsChange(undefined, {\r\n\t\t\tcountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: undefined,\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('', {\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('1213', {\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+1213',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+1213'\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('+1213', {\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+1213',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+1213'\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('213', {\r\n\t\t\tcountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '213',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+1213'\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('+78005553535', {\r\n\t\t\tcountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: '+78005553535'\r\n\t\t})\r\n\r\n\t\t// Won't reset an already selected country.\r\n\r\n\t\tonPhoneDigitsChange('+15555555555', {\r\n\t\t\tcountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+15555555555',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+15555555555'\r\n\t\t})\r\n\r\n\t\t// Should reset the country if it has likely been automatically\r\n\t\t// selected based on international phone number input\r\n\t\t// and the user decides to erase all input.\r\n\t\tonPhoneDigitsChange('', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\t// Should reset the country if it has likely been automatically\r\n\t\t// selected based on international phone number input\r\n\t\t// and the user decides to erase all input.\r\n\t\t// Should reset to default country.\r\n\t\tonPhoneDigitsChange('', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tdefaultCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\t// Should reset the country if it has likely been automatically\r\n\t\t// selected based on international phone number input\r\n\t\t// and the user decides to erase all input up to the `+` sign.\r\n\t\tonPhoneDigitsChange('+', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (limitMaxLength: true)', () => {\r\n\t\tonPhoneDigitsChange('21337342530',{\r\n\t\t\tcountry: 'US',\r\n\t\t\tlimitMaxLength: true,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '2133734253',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+12133734253'\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('+121337342530', {\r\n\t\t\tcountry: 'US',\r\n\t\t\tlimitMaxLength: true,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+12133734253',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+12133734253'\r\n\t\t})\r\n\r\n\t\t// This case is intentionally ignored to simplify the code.\r\n\t\tonPhoneDigitsChange('+121337342530', {\r\n\t\t\tlimitMaxLength: true,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\t// phoneDigits: '+12133734253',\r\n\t\t\t// country: 'US',\r\n\t\t\t// value: '+12133734253'\r\n\t\t\tphoneDigits: '+121337342530',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+121337342530'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (`international: true`)', () => {\r\n\t\t// Shouldn't set `country` to `defaultCountry`\r\n\t\t// when erasing parsed input starting with a `+`\r\n\t\t// when `international` is `true`.\r\n\t\tonPhoneDigitsChange('', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tdefaultCountry: 'US',\r\n\t\t\tinternational: true,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\t// Should support forcing international phone number input format.\r\n\t\tonPhoneDigitsChange('2', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tinternational: true,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+2',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+2'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (`international: true` and `countryCallingCodeEditable: false`) (reset incompatible international input)', () => {\r\n\t\tonPhoneDigitsChange('+1', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tinternational: true,\r\n\t\t\tcountryCallingCodeEditable: false,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+7',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (`international: true` and `countryCallingCodeEditable: false`) (append national input)', () => {\r\n\t\tonPhoneDigitsChange('8', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tinternational: true,\r\n\t\t\tcountryCallingCodeEditable: false,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+78',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (`international: true` and `countryCallingCodeEditable: false`) (compatible input)', () => {\r\n\t\tonPhoneDigitsChange('+7', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tinternational: true,\r\n\t\t\tcountryCallingCodeEditable: false,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+7',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (`international: false`)', () => {\r\n\t\tconst onChange = (phoneDigits, prevPhoneDigits, country) => onPhoneDigitsChange(phoneDigits, {\r\n\t\t\tprevPhoneDigits,\r\n\t\t\tcountry,\r\n\t\t\tinternational: false,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Just country calling code.\r\n\t\tonChange('+7', '', 'RU').should.deep.equal({\r\n\t\t\tphoneDigits: '',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Country calling code and first digit.\r\n\t\tonChange('+78', '', 'RU').should.deep.equal({\r\n\t\t\tphoneDigits: '8',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Country calling code and first two digits.\r\n\t\tonChange('+121', '', 'US').should.deep.equal({\r\n\t\t\tphoneDigits: '21',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+121'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\tonChange('+78005553535', '', 'RU').should.deep.equal({\r\n\t\t\tphoneDigits: '88005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: '+78005553535'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Another country: just trims the `+`.\r\n\t\tonChange('+78005553535', '', 'US').should.deep.equal({\r\n\t\t\tphoneDigits: '78005553535',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+178005553535'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in national format.\r\n\t\tonChange('88005553535', '', 'RU').should.deep.equal({\r\n\t\t\tphoneDigits: '88005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: '+78005553535'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in national format.\r\n\t\tonChange('88005553535', '8800555353', 'RU').should.deep.equal({\r\n\t\t\tphoneDigits: '88005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: '+78005553535'\r\n\t\t})\r\n\r\n\t\t// Empty `phoneDigits`.\r\n\t\tonChange('', '88005553535', 'RU').should.deep.equal({\r\n\t\t\tphoneDigits: '',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (`international: false` and no country selected)', () => {\r\n\t\t// If `international` is `false` then it means that\r\n\t\t// \"International\" option should not be available,\r\n\t\t// so it doesn't handle the cases when it is available.\r\n\r\n\t\tconst onChange = (phoneDigits) => onPhoneDigitsChange(phoneDigits, {\r\n\t\t\tprevPhoneDigits: '',\r\n\t\t\tinternational: false,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// No country calling code.\r\n\t\tonChange('+').should.deep.equal({\r\n\t\t\tphoneDigits: '+',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Just country calling code.\r\n\t\tonChange('+7').should.deep.equal({\r\n\t\t\tphoneDigits: '+7',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+7'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Country calling code and first digit.\r\n\t\tonChange('+78').should.deep.equal({\r\n\t\t\tphoneDigits: '8',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Country calling code and first two digits.\r\n\t\tonChange('+3311').should.deep.equal({\r\n\t\t\tphoneDigits: '11',\r\n\t\t\tcountry: 'FR',\r\n\t\t\tvalue: '+3311'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Full number.\r\n\t\tonChange('+78005553535').should.deep.equal({\r\n\t\t\tphoneDigits: '88005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: '+78005553535'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should get initial parsed input', () => {\r\n\t\tgetInitialPhoneDigits({\r\n\t\t\tvalue: '+78005553535',\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tinternational: false,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+78005553535')\r\n\r\n\t\tgetInitialPhoneDigits({\r\n\t\t\tvalue: '+78005553535',\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tinternational: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+78005553535')\r\n\r\n\t\tgetInitialPhoneDigits({\r\n\t\t\tvalue: undefined,\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tinternational: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+7')\r\n\r\n\t\texpect(getInitialPhoneDigits({\r\n\t\t\tvalue: undefined,\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tinternational: false,\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\texpect(getInitialPhoneDigits({\r\n\t\t\tvalue: undefined,\r\n\t\t\tinternational: false,\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\t})\r\n\r\n\tit('should get initial parsed input (has `phoneNumber` that has `country`)', () => {\r\n\t\tconst phoneNumber = parsePhoneNumber('+78005553535', metadata)\r\n\t\tgetInitialPhoneDigits({\r\n\t\t\tvalue: phoneNumber.number,\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tuseNationalFormat: true,\r\n\t\t\tphoneNumber,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('88005553535')\r\n\t})\r\n\r\n\tit('should get initial parsed input (has `phoneNumber` that has no `country`)', () => {\r\n\t\tconst phoneNumber = parsePhoneNumber('+870773111632', metadata)\r\n\t\tgetInitialPhoneDigits({\r\n\t\t\tvalue: phoneNumber.number,\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tuseNationalFormat: true,\r\n\t\t\tphoneNumber,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+870773111632')\r\n\t})\r\n})"],"file":"phoneInputHelpers.test.js"}