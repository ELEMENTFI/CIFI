{"ast":null,"code":"import stripIddPrefix from './stripIddPrefix';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './extractCountryCallingCodeFromInternationalNumberWithoutPlusSign';\nimport Metadata from '../metadata';\nimport { MAX_LENGTH_COUNTRY_CODE } from '../constants';\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\n\nexport default function extractCountryCallingCode(number, country, callingCode, metadata) {\n  if (!number) {\n    return {};\n  } // If this is not an international phone number,\n  // then either extract an \"IDD\" prefix, or extract a\n  // country calling code from a number by autocorrecting it\n  // by prepending a leading `+` in cases when it starts\n  // with the country calling code.\n  // https://wikitravel.org/en/International_dialling_prefix\n  // https://github.com/catamphetamine/libphonenumber-js/issues/376\n\n\n  if (number[0] !== '+') {\n    // Convert an \"out-of-country\" dialing phone number\n    // to a proper international phone number.\n    var numberWithoutIDD = stripIddPrefix(number, country, callingCode, metadata); // If an IDD prefix was stripped then\n    // convert the number to international one\n    // for subsequent parsing.\n\n    if (numberWithoutIDD && numberWithoutIDD !== number) {\n      number = '+' + numberWithoutIDD;\n    } else {\n      // Check to see if the number starts with the country calling code\n      // for the default country. If so, we remove the country calling code,\n      // and do some checks on the validity of the number before and after.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      if (country || callingCode) {\n        var _extractCountryCallin = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata),\n            countryCallingCode = _extractCountryCallin.countryCallingCode,\n            shorterNumber = _extractCountryCallin.number;\n\n        if (countryCallingCode) {\n          return {\n            countryCallingCode: countryCallingCode,\n            number: shorterNumber\n          };\n        }\n      }\n\n      return {\n        number: number\n      };\n    }\n  } // Fast abortion: country codes do not begin with a '0'\n\n\n  if (number[1] === '0') {\n    return {};\n  }\n\n  metadata = new Metadata(metadata); // The thing with country phone codes\n  // is that they are orthogonal to each other\n  // i.e. there's no such country phone code A\n  // for which country phone code B exists\n  // where B starts with A.\n  // Therefore, while scanning digits,\n  // if a valid country code is found,\n  // that means that it is the country code.\n  //\n\n  var i = 2;\n\n  while (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n    var _countryCallingCode = number.slice(1, i);\n\n    if (metadata.hasCallingCode(_countryCallingCode)) {\n      metadata.selectNumberingPlan(_countryCallingCode);\n      return {\n        countryCallingCode: _countryCallingCode,\n        number: number.slice(i)\n      };\n    }\n\n    i++;\n  }\n\n  return {};\n}","map":{"version":3,"sources":["../../source/helpers/extractCountryCallingCode.js"],"names":["number","numberWithoutIDD","stripIddPrefix","country","countryCallingCode","shorterNumber","extractCountryCallingCodeFromInternationalNumberWithoutPlusSign","metadata","i"],"mappings":"AAAA,OAAA,cAAA,MAAA,kBAAA;AACA,OAAA,+DAAA,MAAA,mEAAA;AACA,OAAA,QAAA,MAAA,aAAA;AACA,SAAA,uBAAA,QAAA,cAAA;AAEA;;;;;;;;;;;;;;;;;;;AAkBA,eAAe,SAAA,yBAAA,CAAA,MAAA,EAAA,OAAA,EAAA,WAAA,EAAA,QAAA,EAKb;AACD,MAAI,CAAJ,MAAA,EAAa;AACZ,WAAA,EAAA;AAFA,GAAA,CAKD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIA,MAAM,CAANA,CAAM,CAANA,KAAJ,GAAA,EAAuB;AACtB;AACA;AACA,QAAMC,gBAAgB,GAAGC,cAAc,CAAA,MAAA,EAAA,OAAA,EAAA,WAAA,EAHjB,QAGiB,CAAvC,CAHsB,CAItB;AACA;AACA;;AACA,QAAID,gBAAgB,IAAIA,gBAAgB,KAAxC,MAAA,EAAqD;AACpDD,MAAAA,MAAM,GAAG,MAATA,gBAAAA;AADD,KAAA,MAEO;AACN;AACA;AACA;AACA;AACA,UAAIG,OAAO,IAAX,WAAA,EAA4B;AAAA,YAAA,qBAAA,GAIvBG,+DAA+D,CAAA,MAAA,EAAA,OAAA,EAAA,WAAA,EAJxC,QAIwC,CAJxC;AAAA,YAE1BF,kBAF0B,GAAA,qBAAA,CAAA,kBAAA;AAAA,YAGlBC,aAHkB,GAAA,qBAAA,CAAA,MAAA;;AAU3B,YAAA,kBAAA,EAAwB;AACvB,iBAAO;AACND,YAAAA,kBAAkB,EADZ,kBAAA;AAENJ,YAAAA,MAAM,EAAEK;AAFF,WAAP;AAIA;AACD;;AACD,aAAO;AAAEL,QAAAA,MAAM,EAANA;AAAF,OAAP;AACA;AA5CD,GAAA,CA+CD;;;AACA,MAAIA,MAAM,CAANA,CAAM,CAANA,KAAJ,GAAA,EAAuB;AACtB,WAAA,EAAA;AACA;;AAEDO,EAAAA,QAAQ,GAAG,IAAA,QAAA,CApDV,QAoDU,CAAXA,CApDC,CAsDD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIC,CAAC,GAAL,CAAA;;AACA,SAAOA,CAAC,GAADA,CAAAA,IAAAA,uBAAAA,IAAoCA,CAAC,IAAIR,MAAM,CAAtD,MAAA,EAA+D;AAC9D,QAAMI,mBAAkB,GAAGJ,MAAM,CAANA,KAAAA,CAAAA,CAAAA,EAA3B,CAA2BA,CAA3B;;AACA,QAAIO,QAAQ,CAARA,cAAAA,CAAJ,mBAAIA,CAAJ,EAAiD;AAChDA,MAAAA,QAAQ,CAARA,mBAAAA,CAAAA,mBAAAA;AACA,aAAO;AACNH,QAAAA,kBAAkB,EADZ,mBAAA;AAENJ,QAAAA,MAAM,EAAEA,MAAM,CAANA,KAAAA,CAAAA,CAAAA;AAFF,OAAP;AAIA;;AACDQ,IAAAA,CAAC;AACD;;AAED,SAAA,EAAA;AACA","sourcesContent":["import stripIddPrefix from './stripIddPrefix'\r\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './extractCountryCallingCodeFromInternationalNumberWithoutPlusSign'\r\nimport Metadata from '../metadata'\r\nimport { MAX_LENGTH_COUNTRY_CODE } from '../constants'\r\n\r\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\r\nexport default function extractCountryCallingCode(\r\n\tnumber,\r\n\tcountry,\r\n\tcallingCode,\r\n\tmetadata\r\n) {\r\n\tif (!number) {\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// If this is not an international phone number,\r\n\t// then either extract an \"IDD\" prefix, or extract a\r\n\t// country calling code from a number by autocorrecting it\r\n\t// by prepending a leading `+` in cases when it starts\r\n\t// with the country calling code.\r\n\t// https://wikitravel.org/en/International_dialling_prefix\r\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\tif (number[0] !== '+') {\r\n\t\t// Convert an \"out-of-country\" dialing phone number\r\n\t\t// to a proper international phone number.\r\n\t\tconst numberWithoutIDD = stripIddPrefix(number, country, callingCode, metadata)\r\n\t\t// If an IDD prefix was stripped then\r\n\t\t// convert the number to international one\r\n\t\t// for subsequent parsing.\r\n\t\tif (numberWithoutIDD && numberWithoutIDD !== number) {\r\n\t\t\tnumber = '+' + numberWithoutIDD\r\n\t\t} else {\r\n\t\t\t// Check to see if the number starts with the country calling code\r\n\t\t\t// for the default country. If so, we remove the country calling code,\r\n\t\t\t// and do some checks on the validity of the number before and after.\r\n\t\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\t\t\tif (country || callingCode) {\r\n\t\t\t\tconst {\r\n\t\t\t\t\tcountryCallingCode,\r\n\t\t\t\t\tnumber: shorterNumber\r\n\t\t\t\t} = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(\r\n\t\t\t\t\tnumber,\r\n\t\t\t\t\tcountry,\r\n\t\t\t\t\tcallingCode,\r\n\t\t\t\t\tmetadata\r\n\t\t\t\t)\r\n\t\t\t\tif (countryCallingCode) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tcountryCallingCode,\r\n\t\t\t\t\t\tnumber: shorterNumber\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn { number }\r\n\t\t}\r\n\t}\r\n\r\n\t// Fast abortion: country codes do not begin with a '0'\r\n\tif (number[1] === '0') {\r\n\t\treturn {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// The thing with country phone codes\r\n\t// is that they are orthogonal to each other\r\n\t// i.e. there's no such country phone code A\r\n\t// for which country phone code B exists\r\n\t// where B starts with A.\r\n\t// Therefore, while scanning digits,\r\n\t// if a valid country code is found,\r\n\t// that means that it is the country code.\r\n\t//\r\n\tlet i = 2\r\n\twhile (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\r\n\t\tconst countryCallingCode = number.slice(1, i)\r\n\t\tif (metadata.hasCallingCode(countryCallingCode)) {\r\n\t\t\tmetadata.selectNumberingPlan(countryCallingCode)\r\n\t\t\treturn {\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\tnumber: number.slice(i)\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\r\n\treturn {}\r\n}"]},"metadata":{},"sourceType":"module"}