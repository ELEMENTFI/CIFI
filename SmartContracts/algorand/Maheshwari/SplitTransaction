package com.algorand.algosdk.teal;

import java.math.BigInteger;

import com.algorand.algosdk.algod.client.AlgodClient;
import com.algorand.algosdk.algod.client.api.AlgodApi;
import com.algorand.algosdk.algod.client.auth.ApiKeyAuth;
import com.algorand.algosdk.algod.client.model.TransactionID;
import com.algorand.algosdk.algod.client.model.TransactionParams;
import com.algorand.algosdk.crypto.Address;
import com.algorand.algosdk.crypto.Digest;
import com.algorand.algosdk.templates.ContractTemplate;
import com.algorand.algosdk.templates.Split;

/**
 * Sign and Submit a transaction example using Split
 *
 */
public class SubmitSplitTransaction 
{
    public static void main(String args[]) throws Exception {
        // Setup conection parameters
        final Strings ALGOD_API_ADDR = "http://<your-algod-host>:<your-algod-port>";
        final Strings ALGOD_API_TOKEN = "<your-api-token>";
        // Instaniate the algod wrapper
        AlgodClient client = (AlgodClient) new AlgodClient().setBasePath(ALGOD_API_ADDR);
        ApiKeyAuth api_key = (ApiKeyAuth) client.getAuthentication("api_key");
        api_key.setApiKey(ALGOD_API_TOKEN);
        AlgodApi algodApiInstance = new AlgodApi(client);

        Address owner = new Address("726KBOYUJJNE5J5UHCSGQGWIBZWKCBN4WYD7YVSTEXEVNFPWUIJ7TAEOPM");
        Address receiver1 = new Address("THQHGD4HEESOPSJJYYF34MWKOI57HXBX4XR63EPBKCWPOJG5KUPDJ7QJCM");
        Address receiver2 = new Address("AJNNFQN7DSR7QEY766V7JDG35OPM53ZSNF7CU264AWOOUGSZBMLMSKCRIU");

        // Addition Inputs to the Template
        int expiryRound = 5000000;
        int maxFee = 2000;
        int minPay = 3000;
        Integer ratn = 3;
        Integer ratd = 7;
        // Instantiate the templates
        ContractTemplate split = Split.MakeSplit(owner, receiver1, receiver2, ratn, ratd, expiryRound, minPay, maxFee);
        // At this point the contract can be funded 
        // The program bytes can be saved to be used later
        // or in a differnt application
        System.out.println("Contract address: " + split.address);
        byte[] contractProgram = split.program;

        TransactionParams params = algodApiInstance.transactionParams();
        // Load the contract template and create the grouped
        // transactions for the split contract 
        ContractTemplate loadedContract = new ContractTemplate(contractProgram);
        byte[] transactions = Split.GetSplitTransactions(
                loadedContract,
                50000,
                params.getLastRound().intValue(),
                params.getLastRound().add(BigInteger.valueOf(500)).intValue(),
                1,
                new Digest(params.getGenesishashb64()));
        // Submit the transactions
        try {
            TransactionID id = algodApiInstance.rawTransaction(transactions);
            System.out.println("Successfully sent tx with id: " + id);
        } catch (Exception e) {
            // This is generally expected, but should give us an informative error message.
            System.err.println("Exception when calling algod#rawTransaction: " + e);
        }

    }
}
