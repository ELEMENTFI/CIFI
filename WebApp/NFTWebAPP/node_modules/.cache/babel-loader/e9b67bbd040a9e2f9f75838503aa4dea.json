{"ast":null,"code":"// Gets <input/> selection bounds\nexport function getSelection(element) {\n  // If no selection, return nothing\n  if (element.selectionStart === element.selectionEnd) {\n    return;\n  }\n\n  return {\n    start: element.selectionStart,\n    end: element.selectionEnd\n  };\n} // Key codes\n\nexport var Keys = {\n  Backspace: 8,\n  Delete: 46\n}; // Finds out the operation to be intercepted and performed\n// based on the key down event `keyCode`.\n\nexport function getOperation(event) {\n  switch (event.keyCode) {\n    case Keys.Backspace:\n      return 'Backspace';\n\n    case Keys.Delete:\n      return 'Delete';\n  }\n} // Gets <input/> caret position\n\nexport function getCaretPosition(element) {\n  return element.selectionStart;\n} // Sets <input/> caret position\n\nexport function setCaretPosition(element, caret_position) {\n  // Sanity check\n  if (caret_position === undefined) {\n    return;\n  } // Set caret position.\n  // There has been an issue with caret positioning on Android devices.\n  // https://github.com/catamphetamine/input-format/issues/2\n  // I was revisiting this issue and looked for similar issues in other libraries.\n  // For example, there's [`text-mask`](https://github.com/text-mask/text-mask) library.\n  // They've had exactly the same issue when the caret seemingly refused to be repositioned programmatically.\n  // The symptoms were the same: whenever the caret passed through a non-digit character of a mask (a whitespace, a bracket, a dash, etc), it looked as if it placed itself one character before its correct position.\n  // https://github.com/text-mask/text-mask/issues/300\n  // They seem to have found a basic fix for it: calling `input.setSelectionRange()` in a timeout rather than instantly for Android devices.\n  // https://github.com/text-mask/text-mask/pull/400/files\n  // I've implemented the same workaround here.\n\n\n  if (isAndroid()) {\n    setTimeout(function () {\n      return element.setSelectionRange(caret_position, caret_position);\n    }, 0);\n  } else {\n    element.setSelectionRange(caret_position, caret_position);\n  }\n}\n\nfunction isAndroid() {\n  // `navigator` is not defined when running mocha tests.\n  if (typeof navigator !== 'undefined') {\n    return ANDROID_USER_AGENT_REG_EXP.test(navigator.userAgent);\n  }\n}\n\nvar ANDROID_USER_AGENT_REG_EXP = /Android/i;","map":{"version":3,"sources":["../source/dom.js"],"names":["element","start","end","selectionEnd","Keys","Backspace","Delete","event","caret_position","isAndroid","setTimeout","ANDROID_USER_AGENT_REG_EXP","navigator"],"mappings":"AAAA;AACA,OAAO,SAAA,YAAA,CAAA,OAAA,EACP;AACC;AACA,MAAIA,OAAO,CAAPA,cAAAA,KAA2BA,OAAO,CAAtC,YAAA,EACA;AACC;AACA;;AAED,SAAO;AAAEC,IAAAA,KAAK,EAAED,OAAO,CAAhB,cAAA;AAAiCE,IAAAA,GAAG,EAAEF,OAAO,CAACG;AAA9C,GAAP;EAGD;;AACA,OAAO,IAAMC,IAAI,GACjB;AACCC,EAAAA,SAAS,EADV,CAAA;AAECC,EAAAA,MAAM,EAAM;AAFb,CADO,C,CAMP;AACA;;AACA,OAAO,SAAA,YAAA,CAAA,KAAA,EACP;AACC,UAAQC,KAAK,CAAb,OAAA;AAEC,SAAKH,IAAI,CAAT,SAAA;AACC,aAAA,WAAA;;AAED,SAAKA,IAAI,CAAT,MAAA;AACC,aAAA,QAAA;AANF;EAUD;;AACA,OAAO,SAAA,gBAAA,CAAA,OAAA,EACP;AACC,SAAOJ,OAAO,CAAd,cAAA;EAGD;;AACA,OAAO,SAAA,gBAAA,CAAA,OAAA,EAAA,cAAA,EACP;AACC;AACA,MAAIQ,cAAc,KAAlB,SAAA,EACA;AACC;AAJF,GAAA,CAOC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIC,SAAJ,EAAA,EAAiB;AACZC,IAAAA,UAAU,CAAC,YAAA;AAAA,aAAMV,OAAO,CAAPA,iBAAAA,CAAAA,cAAAA,EAAN,cAAMA,CAAN;AAAD,KAAA,EAAVU,CAAU,CAAVA;AADL,GAAA,MAEO;AACNV,IAAAA,OAAO,CAAPA,iBAAAA,CAAAA,cAAAA,EAAAA,cAAAA;AACA;AACD;;AAED,SAAA,SAAA,GAAqB;AACpB;AACA,MAAI,OAAA,SAAA,KAAJ,WAAA,EAAsC;AACrC,WAAOW,0BAA0B,CAA1BA,IAAAA,CAAgCC,SAAS,CAAhD,SAAOD,CAAP;AACA;AACD;;AAED,IAAMA,0BAA0B,GAAhC,UAAA","sourcesContent":["// Gets <input/> selection bounds\r\nexport function getSelection(element)\r\n{\r\n\t// If no selection, return nothing\r\n\tif (element.selectionStart === element.selectionEnd)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\treturn { start: element.selectionStart, end: element.selectionEnd }\r\n}\r\n\r\n// Key codes\r\nexport const Keys =\r\n{\r\n\tBackspace : 8,\r\n\tDelete    : 46\r\n}\r\n\r\n// Finds out the operation to be intercepted and performed\r\n// based on the key down event `keyCode`.\r\nexport function getOperation(event)\r\n{\r\n\tswitch (event.keyCode)\r\n\t{\r\n\t\tcase Keys.Backspace:\r\n\t\t\treturn 'Backspace'\r\n\r\n\t\tcase Keys.Delete:\r\n\t\t\treturn 'Delete'\r\n\t}\r\n}\r\n\r\n// Gets <input/> caret position\r\nexport function getCaretPosition(element)\r\n{\r\n\treturn element.selectionStart\r\n}\r\n\r\n// Sets <input/> caret position\r\nexport function setCaretPosition(element, caret_position)\r\n{\r\n\t// Sanity check\r\n\tif (caret_position === undefined)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\t// Set caret position.\r\n\t// There has been an issue with caret positioning on Android devices.\r\n\t// https://github.com/catamphetamine/input-format/issues/2\r\n\t// I was revisiting this issue and looked for similar issues in other libraries.\r\n\t// For example, there's [`text-mask`](https://github.com/text-mask/text-mask) library.\r\n\t// They've had exactly the same issue when the caret seemingly refused to be repositioned programmatically.\r\n\t// The symptoms were the same: whenever the caret passed through a non-digit character of a mask (a whitespace, a bracket, a dash, etc), it looked as if it placed itself one character before its correct position.\r\n\t// https://github.com/text-mask/text-mask/issues/300\r\n\t// They seem to have found a basic fix for it: calling `input.setSelectionRange()` in a timeout rather than instantly for Android devices.\r\n\t// https://github.com/text-mask/text-mask/pull/400/files\r\n\t// I've implemented the same workaround here.\r\n\tif (isAndroid()) {\r\n      setTimeout(() => element.setSelectionRange(caret_position, caret_position), 0)\r\n\t} else {\r\n\t\telement.setSelectionRange(caret_position, caret_position)\r\n\t}\r\n}\r\n\r\nfunction isAndroid() {\r\n\t// `navigator` is not defined when running mocha tests.\r\n\tif (typeof navigator !== 'undefined') {\r\n\t\treturn ANDROID_USER_AGENT_REG_EXP.test(navigator.userAgent)\r\n\t}\r\n}\r\n\r\nconst ANDROID_USER_AGENT_REG_EXP = /Android/i"]},"metadata":{},"sourceType":"module"}