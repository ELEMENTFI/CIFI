{"version":3,"sources":["../source/usePhoneDigits.js"],"names":["usePhoneDigits","value","onChange","country","defaultCountry","international","withCountryCallingCode","useNationalFormatForDefaultCountryValue","metadata","countryMismatchDetected","onCountryMismatch","actualCountry","console","error","current","getInitialPhoneDigits","getPhoneDigitsForValue","prevCountry","setPrevCountry","prevDefaultCountry","setPrevDefaultCountry","phoneDigits","setPhoneDigits","valueForPhoneDigits","setValueForPhoneDigits","rerenderTrigger","setRerenderTrigger","rerender","onSetPhoneDigits","prefix","indexOf","undefined","slice","asYouType","AsYouType","input","phoneNumber","getNumber","number","countryCallingCode","nationalNumber","formatNational"],"mappings":"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","sourcesContent":["import { useRef, useState, useCallback, useEffect } from 'react'\r\nimport { AsYouType, getCountryCallingCode, parseDigits } from 'libphonenumber-js/core'\r\n\r\nimport getInternationalPhoneNumberPrefix from './helpers/getInternationalPhoneNumberPrefix'\r\n\r\n/**\r\n * Returns `[phoneDigits, setPhoneDigits]`.\r\n * \"Phone digits\" includes not only \"digits\" but also a `+` sign.\r\n */\r\nexport default function usePhoneDigits({\r\n\tvalue,\r\n\tonChange,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\tuseNationalFormatForDefaultCountryValue,\r\n\tmetadata\r\n}) {\r\n\tconst countryMismatchDetected = useRef()\r\n\tconst onCountryMismatch = (value, country, actualCountry) => {\r\n\t\tconsole.error(`[react-phone-number-input] Expected phone number ${value} to correspond to country ${country} but ${actualCountry ? 'in reality it corresponds to country ' + actualCountry : 'it doesn\\'t'}.`)\r\n\t\tcountryMismatchDetected.current = true\r\n\t}\r\n\tconst getInitialPhoneDigits = () => getPhoneDigitsForValue(\r\n\t\tvalue,\r\n\t\tcountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tdefaultCountry,\r\n\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\tmetadata,\r\n\t\tonCountryMismatch\r\n\t)\r\n\t// This is only used to detect `country` property change.\r\n\tconst [prevCountry, setPrevCountry] = useState(country)\r\n\t// This is only used to detect `defaultCountry` property change.\r\n\tconst [prevDefaultCountry, setPrevDefaultCountry] = useState(defaultCountry)\r\n\t// `phoneDigits` is the `value` passed to the `<input/>`.\r\n\tconst [phoneDigits, setPhoneDigits] = useState(getInitialPhoneDigits())\r\n\t// This is only used to detect `value` property changes.\r\n\tconst [valueForPhoneDigits, setValueForPhoneDigits] = useState(value)\r\n\t// Rerender hack.\r\n\tconst [rerenderTrigger, setRerenderTrigger] = useState()\r\n\tconst rerender = useCallback(() => setRerenderTrigger({}), [setRerenderTrigger])\r\n\t// If `value` property has been changed externally\r\n\t// then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (value !== valueForPhoneDigits) {\r\n\t\t\tsetValueForPhoneDigits(value)\r\n\t\t\tsetPhoneDigits(getInitialPhoneDigits())\r\n\t\t}\r\n\t}, [value])\r\n\t// If the `country` has been changed then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (country !== prevCountry) {\r\n\t\t\tsetPrevCountry(country)\r\n\t\t\tsetPhoneDigits(getInitialPhoneDigits())\r\n\t\t}\r\n\t}, [country])\r\n\t// If the `defaultCountry` has been changed then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (defaultCountry !== prevDefaultCountry) {\r\n\t\t\tsetPrevDefaultCountry(defaultCountry)\r\n\t\t\tsetPhoneDigits(getInitialPhoneDigits())\r\n\t\t}\r\n\t}, [defaultCountry])\r\n\t// Update the `value` after `valueForPhoneDigits` has been updated.\r\n\tuseEffect(() => {\r\n\t\tif (valueForPhoneDigits !== value) {\r\n\t\t\tonChange(valueForPhoneDigits)\r\n\t\t}\r\n\t}, [valueForPhoneDigits])\r\n\tconst onSetPhoneDigits = useCallback((phoneDigits) => {\r\n\t\tlet value\r\n\t\tif (country) {\r\n\t\t\tif (international && withCountryCallingCode) {\r\n\t\t\t\t// The `<input/>` value must start with the country calling code.\r\n\t\t\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\t\t\t\tif (phoneDigits.indexOf(prefix) !== 0) {\r\n\t\t\t\t\t// If a user tabs into a phone number input field\r\n\t\t\t\t\t// that is `international` and `withCountryCallingCode`,\r\n\t\t\t\t\t// and then starts inputting local phone number digits,\r\n\t\t\t\t\t// the first digit would get \"swallowed\" if the fix below wasn't implemented.\r\n\t\t\t\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/43\r\n\t\t\t\t\tif (phoneDigits && phoneDigits[0] !== '+') {\r\n\t\t\t\t\t\tphoneDigits = prefix + phoneDigits\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// // Reset phone digits if they don't start with the correct prefix.\r\n\t\t\t\t\t\t// // Undo the `<input/>` value change if it doesn't.\r\n\t\t\t\t\t\tif (countryMismatchDetected.current) {\r\n\t\t\t\t\t\t\t// In case of a `country`/`value` mismatch,\r\n\t\t\t\t\t\t\t// if it performed an \"undo\" here, then\r\n\t\t\t\t\t\t\t// it wouldn't let a user edit their phone number at all,\r\n\t\t\t\t\t\t\t// so this special case at least allows phone number editing\r\n\t\t\t\t\t\t\t// when `value` already doesn't match the `country`.\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// If it simply did `phoneDigits = prefix` here,\r\n\t\t\t\t\t\t\t// then it could have no effect when erasing phone number\r\n\t\t\t\t\t\t\t// via Backspace, because `phoneDigits` in `state` wouldn't change\r\n\t\t\t\t\t\t\t// as a result, because it was `prefix` and it became `prefix`,\r\n\t\t\t\t\t\t\t// so the component wouldn't rerender, and the user would be able\r\n\t\t\t\t\t\t\t// to erase the country calling code part, and that part is\r\n\t\t\t\t\t\t\t// assumed to be non-eraseable. That's why the component is\r\n\t\t\t\t\t\t\t// forcefully rerendered here.\r\n\t\t\t\t\t\t\tsetPhoneDigits(prefix)\r\n\t\t\t\t\t\t\tsetValueForPhoneDigits(undefined)\r\n\t\t\t\t\t\t\t// Force a re-render of the `<input/>` with previous `phoneDigits` value.\r\n\t\t\t\t\t\t\treturn rerender()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Entering phone number either in \"national\" format\r\n\t\t\t\t// when `country` has been specified, or in \"international\" format\r\n\t\t\t\t// when `country` has been specified but `withCountryCallingCode` hasn't.\r\n\t\t\t\t// Therefore, `+` is not allowed.\r\n\t\t\t\tif (phoneDigits && phoneDigits[0] === '+') {\r\n\t\t\t\t\t// Remove the `+`.\r\n\t\t\t\t\tphoneDigits = phoneDigits.slice(1)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (!defaultCountry) {\r\n\t\t\t// Force a `+` in the beginning of a `value`\r\n\t\t\t// when no `country` and `defaultCountry` have been specified.\r\n\t\t\tif (phoneDigits && phoneDigits[0] !== '+') {\r\n\t\t\t\t// Prepend a `+`.\r\n\t\t\t\tphoneDigits = '+' + phoneDigits\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Convert `phoneDigits` to `value`.\r\n\t\tif (phoneDigits) {\r\n\t\t\tconst asYouType = new AsYouType(country || defaultCountry, metadata)\r\n\t\t\tasYouType.input(\r\n\t\t\t\tcountry && international && !withCountryCallingCode ?\r\n\t\t\t\t`+${getCountryCallingCode(country, metadata)}${phoneDigits}` :\r\n\t\t\t\tphoneDigits\r\n\t\t\t)\r\n\t\t\tconst phoneNumber = asYouType.getNumber()\r\n\t\t\t// If it's a \"possible\" incomplete phone number.\r\n\t\t\tif (phoneNumber) {\r\n\t\t\t\tvalue = phoneNumber.number\r\n\t\t\t}\r\n\t\t}\r\n\t\tsetPhoneDigits(phoneDigits)\r\n\t\tsetValueForPhoneDigits(value)\r\n\t}, [\r\n\t\tcountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tdefaultCountry,\r\n\t\tmetadata,\r\n\t\tsetPhoneDigits,\r\n\t\tsetValueForPhoneDigits,\r\n\t\trerender,\r\n\t\tcountryMismatchDetected\r\n\t])\r\n\treturn [\r\n\t\tphoneDigits,\r\n\t\tonSetPhoneDigits\r\n\t]\r\n}\r\n\r\n/**\r\n * Returns phone number input field value for a E.164 phone number `value`.\r\n * @param  {string} [value]\r\n * @param  {string} [country]\r\n * @param  {boolean} [international]\r\n * @param  {boolean} [withCountryCallingCode]\r\n * @param  {string} [defaultCountry]\r\n * @param  {boolean} [useNationalFormatForDefaultCountryValue]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nfunction getPhoneDigitsForValue(\r\n\tvalue,\r\n\tcountry,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\tdefaultCountry,\r\n\tuseNationalFormatForDefaultCountryValue,\r\n\tmetadata,\r\n\tonCountryMismatch\r\n) {\r\n\tif (country && international && withCountryCallingCode) {\r\n\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\t\tif (value) {\r\n\t\t\tif (value.indexOf(prefix) !== 0) {\r\n\t\t\t\tonCountryMismatch(value, country)\r\n\t\t\t}\r\n\t\t\treturn value\r\n\t\t}\r\n\t\treturn prefix\r\n\t}\r\n\tif (!value) {\r\n\t\treturn ''\r\n\t}\r\n\tif (!country && !defaultCountry) {\r\n\t\treturn value\r\n\t}\r\n\tconst asYouType = new AsYouType(undefined, metadata)\r\n\tasYouType.input(value)\r\n\tconst phoneNumber = asYouType.getNumber()\r\n\tif (phoneNumber) {\r\n\t\tif (country) {\r\n\t\t\tif (phoneNumber.country && phoneNumber.country !== country) {\r\n\t\t\t\tonCountryMismatch(value, country, phoneNumber.country)\r\n\t\t\t} else if (phoneNumber.countryCallingCode !== getCountryCallingCode(country, metadata)) {\r\n\t\t\t\tonCountryMismatch(value, country)\r\n\t\t\t}\r\n\t\t\tif (international) {\r\n\t\t\t\treturn phoneNumber.nationalNumber\r\n\t\t\t}\r\n\t\t\treturn parseDigits(phoneNumber.formatNational())\r\n\t\t} else {\r\n\t\t\t// `phoneNumber.countryCallingCode` is compared here  instead of\r\n\t\t\t// `phoneNumber.country`, because, for example, a person could have\r\n\t\t\t// previously input a phone number (in \"national\" format) that isn't\r\n\t\t\t// 100% valid for the `defaultCountry`, and if `phoneNumber.country`\r\n\t\t\t// was compared, then it wouldn't match, and such phone number\r\n\t\t\t// wouldn't be formatted as a \"national\" one, and instead would be\r\n\t\t\t// formatted as an \"international\" one, confusing the user.\r\n\t\t\t// Comparing `phoneNumber.countryCallingCode` works around such issues.\r\n\t\t\t//\r\n\t\t\t// Example: `defaultCountry=\"US\"` and the `<input/>` is empty.\r\n\t\t\t// The user inputs: \"222 333 4444\", which gets formatted to \"(222) 333-4444\".\r\n\t\t\t// The user then clicks \"Save\", the page is refreshed, and the user sees\r\n\t\t\t// that the `<input/>` value is now \"+1 222 333 4444\" which confuses the user:\r\n\t\t\t// the user expected the `<input/>` value to be \"(222) 333-4444\", same as it\r\n\t\t\t// was when they've just typed it in. The cause of the issue is that \"222 333 4444\"\r\n\t\t\t// is not a valid national number for US, and `phoneNumber.country` is compared\r\n\t\t\t// instead of `phoneNumber.countryCallingCode`. After the `phoneNumber.country`\r\n\t\t\t// comparison is replaced with `phoneNumber.countryCallingCode` one, the issue\r\n\t\t\t// is no longer the case.\r\n\t\t\t//\r\n\t\t\tif (phoneNumber.countryCallingCode && phoneNumber.countryCallingCode === getCountryCallingCode(defaultCountry, metadata) && useNationalFormatForDefaultCountryValue) {\r\n\t\t\t\treturn parseDigits(phoneNumber.formatNational())\r\n\t\t\t}\r\n\t\t\treturn value\r\n\t\t}\r\n\t} else {\r\n\t\treturn ''\r\n\t}\r\n}"],"file":"usePhoneDigits.js"}