{"ast":null,"code":"import Metadata from '../metadata';\nimport getNumberType from './getNumberType';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\nexport default function getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {\n  /* istanbul ignore if */\n  if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n    if (metadata.isNonGeographicCallingCode(callingCode)) {\n      return '001';\n    }\n  } // Is always non-empty, because `callingCode` is always valid\n\n\n  var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);\n\n  if (!possibleCountries) {\n    return;\n  } // If there's just one country corresponding to the country code,\n  // then just return it, without further phone number digits validation.\n\n\n  if (possibleCountries.length === 1) {\n    return possibleCountries[0];\n  }\n\n  return selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata.metadata);\n}\n\nfunction selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata) {\n  // Re-create `metadata` because it will be selecting a `country`.\n  metadata = new Metadata(metadata);\n\n  for (var _iterator = possibleCountries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var country = _ref;\n    metadata.country(country); // Leading digits check would be the simplest one\n\n    if (metadata.leadingDigits()) {\n      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\n        return country;\n      }\n    } // Else perform full validation with all of those\n    // fixed-line/mobile/etc regular expressions.\n    else if (getNumberType({\n        phone: nationalPhoneNumber,\n        country: country\n      }, undefined, metadata.metadata)) {\n        return country;\n      }\n  }\n}","map":{"version":3,"sources":["../../source/helpers/getCountryByCallingCode.js"],"names":["USE_NON_GEOGRAPHIC_COUNTRY_CODE","metadata","possibleCountries","selectCountryFromList","country","nationalPhoneNumber","getNumberType","phone"],"mappings":"AAAA,OAAA,QAAA,MAAA,aAAA;AACA,OAAA,aAAA,MAAA,iBAAA;AAEA,IAAMA,+BAA+B,GAArC,KAAA;AAEA,eAAe,SAAA,uBAAA,CAAA,WAAA,EAAA,mBAAA,EAAA,QAAA,EAA6E;AAC3F;AACA,MAAA,+BAAA,EAAqC;AACpC,QAAIC,QAAQ,CAARA,0BAAAA,CAAJ,WAAIA,CAAJ,EAAsD;AACrD,aAAA,KAAA;AACA;AALyF,GAAA,CAO3F;;;AACA,MAAMC,iBAAiB,GAAGD,QAAQ,CAARA,6BAAAA,CAA1B,WAA0BA,CAA1B;;AACA,MAAI,CAAJ,iBAAA,EAAwB;AACvB;AAV0F,GAAA,CAY3F;AACA;;;AACA,MAAIC,iBAAiB,CAAjBA,MAAAA,KAAJ,CAAA,EAAoC;AACnC,WAAOA,iBAAiB,CAAxB,CAAwB,CAAxB;AACA;;AACD,SAAOC,qBAAqB,CAAA,iBAAA,EAAA,mBAAA,EAAyCF,QAAQ,CAA7E,QAA4B,CAA5B;AACA;;AAED,SAAA,qBAAA,CAAA,iBAAA,EAAA,mBAAA,EAAA,QAAA,EAAiF;AAChF;AACAA,EAAAA,QAAQ,GAAG,IAAA,QAAA,CAAXA,QAAW,CAAXA;;AACA,OAAA,IAAA,SAAA,GAAA,iBAAA,EAAA,QAAA,GAAA,KAAA,CAAA,OAAA,CAAA,SAAA,CAAA,EAAA,EAAA,GAAA,CAAA,EAAA,SAAA,GAAA,QAAA,GAAA,SAAA,GAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,IAAyC;AAAA,QAAA,IAAA;;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,EAAA,IAAA,SAAA,CAAA,MAAA,EAAA;AAAA,MAAA,IAAA,GAAA,SAAA,CAAA,EAAA,EAAA,CAAA;AAAA,KAAA,MAAA;AAAA,MAAA,EAAA,GAAA,SAAA,CAAA,IAAA,EAAA;AAAA,UAAA,EAAA,CAAA,IAAA,EAAA;AAAA,MAAA,IAAA,GAAA,EAAA,CAAA,KAAA;AAAA;;AAAA,QAA9BG,OAA8B,GAAA,IAAA;AACxCH,IAAAA,QAAQ,CAARA,OAAAA,CADwC,OACxCA,EADwC,CAExC;;AACA,QAAIA,QAAQ,CAAZ,aAAIA,EAAJ,EAA8B;AAC7B,UAAII,mBAAmB,IACtBA,mBAAmB,CAAnBA,MAAAA,CAA2BJ,QAAQ,CAAnCI,aAA2BJ,EAA3BI,MADD,CAAA,EAC6D;AAC5D,eAAA,OAAA;AACA;AAJF,KAAA,CAMA;AACA;AAPA,SAQK,IAAIC,aAAa,CAAC;AAAEC,QAAAA,KAAK,EAAP,mBAAA;AAA8BH,QAAAA,OAAO,EAAPA;AAA9B,OAAD,EAAA,SAAA,EAAqDH,QAAQ,CAA9E,QAAiB,CAAjB,EAA0F;AAC9F,eAAA,OAAA;AACA;AACD;AACD","sourcesContent":["import Metadata from '../metadata'\r\nimport getNumberType from './getNumberType'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default function getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\tif (metadata.isNonGeographicCallingCode(callingCode)) {\r\n\t\t\treturn '001'\r\n\t\t}\r\n\t}\r\n\t// Is always non-empty, because `callingCode` is always valid\r\n\tconst possibleCountries = metadata.getCountryCodesForCallingCode(callingCode)\r\n\tif (!possibleCountries) {\r\n\t\treturn\r\n\t}\r\n\t// If there's just one country corresponding to the country code,\r\n\t// then just return it, without further phone number digits validation.\r\n\tif (possibleCountries.length === 1) {\r\n\t\treturn possibleCountries[0]\r\n\t}\r\n\treturn selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata.metadata)\r\n}\r\n\r\nfunction selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata) {\r\n\t// Re-create `metadata` because it will be selecting a `country`.\r\n\tmetadata = new Metadata(metadata)\r\n\tfor (const country of possibleCountries) {\r\n\t\tmetadata.country(country)\r\n\t\t// Leading digits check would be the simplest one\r\n\t\tif (metadata.leadingDigits()) {\r\n\t\t\tif (nationalPhoneNumber &&\r\n\t\t\t\tnationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\r\n\t\t\t\treturn country\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Else perform full validation with all of those\r\n\t\t// fixed-line/mobile/etc regular expressions.\r\n\t\telse if (getNumberType({ phone: nationalPhoneNumber, country }, undefined, metadata.metadata)) {\r\n\t\t\treturn country\r\n\t\t}\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}