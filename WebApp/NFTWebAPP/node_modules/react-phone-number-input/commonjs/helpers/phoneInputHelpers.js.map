{"version":3,"sources":["../../source/helpers/phoneInputHelpers.js"],"names":["getPreSelectedCountry","value","phoneNumber","defaultCountry","getAnyCountry","countries","required","metadata","country","couldNumberBelongToCountry","indexOf","undefined","length","getCountrySelectOptions","countryNames","addInternationalOption","compareStringsLocales","_compareStrings","compareStrings","countrySelectOptions","map","label","sort","a","b","unshift","ZZ","parsePhoneNumber","generateNationalNumberDigits","formatNational","replace","getPhoneDigitsForNewCountry","phoneDigits","prevCountry","newCountry","useNationalFormat","stripCountryCallingCode","newCountryPrefix","defaultValue","e164","number","partial_national_significant_number","getNationalSignificantNumberDigits","trimNumber","nationalSignificantNumberPart","overflowDigitsCount","getMaxNumberLength","slice","Metadata","numberingPlan","possibleLengths","getCountryForPartialE164Number","partialE164Number","derived_country","getCountryFromPossiblyIncompleteInternationalPhoneNumber","onPhoneDigitsChange","prevPhoneDigits","countryRequired","international","limitMaxLength","countryCallingCodeEditable","prefix","convertInternationalPhoneDigitsToNational","input","formatter","AsYouType","getNumber","getCountry","locales","String","prototype","localeCompare","countryCallingCodePrefix","Object","keys","country_calling_codes","country_calling_code","nationalNumber","intlPhoneNumberPrefix","i","getInitialPhoneDigits"],"mappings":"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","sourcesContent":["import {\r\n\tparsePhoneNumberFromString,\r\n\tgetCountryCallingCode,\r\n\tAsYouType,\r\n\tMetadata\r\n} from 'libphonenumber-js/core'\r\n\r\nimport getInternationalPhoneNumberPrefix from './getInternationalPhoneNumberPrefix'\r\n\r\n/**\r\n * Decides which country should be pre-selected\r\n * when the phone number input component is first mounted.\r\n * @param  {object?} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {string?} country - Pre-defined country (two-letter code).\r\n * @param  {string[]?} countries - A list of countries available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string?}\r\n */\r\nexport function getPreSelectedCountry({\r\n\tvalue,\r\n\tphoneNumber,\r\n\tdefaultCountry,\r\n\tgetAnyCountry,\r\n\tcountries,\r\n\trequired,\r\n\tmetadata\r\n}) {\r\n\tlet country\r\n\r\n\t// If can get country from E.164 phone number\r\n\t// then it overrides the `country` passed (or not passed).\r\n\tif (phoneNumber && phoneNumber.country) {\r\n\t\t// `country` will be left `undefined` in case of non-detection.\r\n\t\tcountry = phoneNumber.country\r\n\t} else if (defaultCountry) {\r\n\t\tif (!value || couldNumberBelongToCountry(value, defaultCountry, metadata)) {\r\n\t\t\tcountry = defaultCountry\r\n\t\t}\r\n\t}\r\n\r\n\t// Only pre-select a country if it's in the available `countries` list.\r\n\tif (countries && countries.indexOf(country) < 0) {\r\n\t\tcountry = undefined\r\n\t}\r\n\r\n\t// If there will be no \"International\" option\r\n\t// then some `country` must be selected.\r\n\t// It will still be the wrong country though.\r\n\t// But still country `<select/>` can't be left in a broken state.\r\n\tif (!country && required && countries && countries.length > 0) {\r\n\t\tcountry = getAnyCountry()\r\n\t\t// noCountryMatchesTheNumber = true\r\n\t}\r\n\r\n\treturn country\r\n}\r\n\r\n/**\r\n * Generates a sorted list of country `<select/>` options.\r\n * @param  {string[]} countries - A list of two-letter (\"ISO 3166-1 alpha-2\") country codes.\r\n * @param  {object} labels - Custom country labels. E.g. `{ RU: 'Россия', US: 'США', ... }`.\r\n * @param  {boolean} addInternationalOption - Whether should include \"International\" option at the top of the list.\r\n * @return {object[]} A list of objects having shape `{ value : string, label : string }`.\r\n */\r\nexport function getCountrySelectOptions({\r\n\tcountries,\r\n\tcountryNames,\r\n\taddInternationalOption,\r\n\t// `locales` are only used in country name comparator:\r\n\t// depending on locale, string sorting order could be different.\r\n\tcompareStringsLocales,\r\n\tcompareStrings: _compareStrings\r\n}) {\r\n\t// Default country name comparator uses `String.localeCompare()`.\r\n\tif (!_compareStrings) {\r\n\t\t_compareStrings = compareStrings\r\n\t}\r\n\r\n\t// Generates a `<Select/>` option for each country.\r\n\tconst countrySelectOptions = countries.map((country) => ({\r\n\t\tvalue: country,\r\n\t\t// All `locale` country names included in this library\r\n\t\t// include all countries (this is checked at build time).\r\n\t\t// The only case when a country name might be missing\r\n\t\t// is when a developer supplies their own `labels` property.\r\n\t\t// To guard against such cases, a missing country name\r\n\t\t// is substituted by country code.\r\n\t\tlabel: countryNames[country] || country\r\n\t}))\r\n\r\n\t// Sort the list of countries alphabetically.\r\n\tcountrySelectOptions.sort((a, b) => _compareStrings(a.label, b.label, compareStringsLocales))\r\n\r\n\t// Add the \"International\" option to the country list (if suitable)\r\n\tif (addInternationalOption) {\r\n\t\tcountrySelectOptions.unshift({\r\n\t\t\tlabel: countryNames.ZZ\r\n\t\t})\r\n\t}\r\n\r\n\treturn countrySelectOptions\r\n}\r\n\r\n/**\r\n * Parses a E.164 phone number to an instance of `PhoneNumber` class.\r\n * @param {string?} value = E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {object} Object having shape `{ country: string?, countryCallingCode: string, number: string }`. `PhoneNumber`: https://gitlab.com/catamphetamine/libphonenumber-js#phonenumber.\r\n * @example\r\n * parsePhoneNumber('+78005553535')\r\n */\r\nexport function parsePhoneNumber(value, metadata) {\r\n\treturn parsePhoneNumberFromString(value || '', metadata)\r\n}\r\n\r\n/**\r\n * Generates national number digits for a parsed phone.\r\n * May prepend national prefix.\r\n * The phone number must be a complete and valid phone number.\r\n * @param  {object} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string}\r\n * @example\r\n * getNationalNumberDigits({ country: 'RU', phone: '8005553535' })\r\n * // returns '88005553535'\r\n */\r\nexport function generateNationalNumberDigits(phoneNumber) {\r\n\treturn phoneNumber.formatNational().replace(/\\D/g, '')\r\n}\r\n\r\n/**\r\n * Migrates parsed `<input/>` `value` for the newly selected `country`.\r\n * @param {string?} phoneDigits - Phone number digits (and `+`) parsed from phone number `<input/>` (it's not the same as the `value` property).\r\n * @param {string?} prevCountry - Previously selected country.\r\n * @param {string?} newCountry - Newly selected country. Can't be same as previously selected country.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @param {boolean} useNationalFormat - whether should attempt to convert from international to national number for the new country.\r\n * @return {string?}\r\n */\r\nexport function getPhoneDigitsForNewCountry(phoneDigits, {\r\n\tprevCountry,\r\n\tnewCountry,\r\n\tmetadata,\r\n\tuseNationalFormat\r\n}) {\r\n\t// If `parsed_input` is empty\r\n\t// then no need to migrate anything.\r\n\tif (!phoneDigits) {\r\n\t\tif (useNationalFormat) {\r\n\t\t\treturn ''\r\n\t\t} else {\r\n\t\t\t// If `phoneDigits` is empty then set `phoneDigits` to\r\n\t\t\t// `+{getCountryCallingCode(newCountry)}`.\r\n\t\t\treturn getInternationalPhoneNumberPrefix(newCountry, metadata)\r\n\t\t}\r\n\t}\r\n\r\n\t// If switching to some country.\r\n\t// (from \"International\" or another country)\r\n\t// If switching from \"International\" then `phoneDigits` starts with a `+`.\r\n\t// Otherwise it may or may not start with a `+`.\r\n\tif (newCountry) {\r\n\t\t// If the phone number was entered in international format\r\n\t\t// then migrate it to the newly selected country.\r\n\t\t// The phone number may be incomplete.\r\n\t\t// The phone number entered not necessarily starts with\r\n\t\t// the previously selected country phone prefix.\r\n\t\tif (phoneDigits[0] === '+') {\r\n\t\t\t// If the international phone number is for the new country\r\n\t\t\t// then convert it to local if required.\r\n\t\t\tif (useNationalFormat) {\r\n\t\t\t\t// // If a phone number is being input in international form\r\n\t\t\t\t// // and the country can already be derived from it,\r\n\t\t\t\t// // and if it is the new country, then format as a national number.\r\n\t\t\t\t// const derived_country = getCountryFromPossiblyIncompleteInternationalPhoneNumber(phoneDigits, metadata)\r\n\t\t\t\t// if (derived_country === newCountry) {\r\n\t\t\t\t// \treturn stripCountryCallingCode(phoneDigits, derived_country, metadata)\r\n\t\t\t\t// }\r\n\r\n\t\t\t\t// Actually, the two countries don't necessarily need to match:\r\n\t\t\t\t// the condition could be looser here, because several countries\r\n\t\t\t\t// might share the same international phone number format\r\n\t\t\t\t// (for example, \"NANPA\" countries like US, Canada, etc).\r\n\t\t\t\t// The looser condition would be just \"same nternational phone number format\"\r\n\t\t\t\t// which would mean \"same country calling code\" in the context of `libphonenumber-js`.\r\n\t\t\t\tif (phoneDigits.indexOf('+' + getCountryCallingCode(newCountry, metadata)) === 0) {\r\n\t\t\t\t\treturn stripCountryCallingCode(phoneDigits, newCountry, metadata)\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Simply discard the previously entered international phone number,\r\n\t\t\t\t// because otherwise any \"smart\" transformation like getting the\r\n\t\t\t\t// \"national (significant) number\" part and then prepending the\r\n\t\t\t\t// newly selected country's \"country calling code\" to it\r\n\t\t\t\t// would just be confusing for a user without being actually useful.\r\n\t\t\t\treturn ''\r\n\r\n\t\t\t\t// // Simply strip the leading `+` character\r\n\t\t\t\t// // therefore simply converting all digits into a \"local\" phone number.\r\n\t\t\t\t// // https://github.com/catamphetamine/react-phone-number-input/issues/287\r\n\t\t\t\t// return phoneDigits.slice(1)\r\n\t\t\t}\r\n\r\n\t\t\tif (prevCountry) {\r\n\t\t\t\tconst newCountryPrefix = getInternationalPhoneNumberPrefix(newCountry, metadata)\r\n\t\t\t\tif (phoneDigits.indexOf(newCountryPrefix) === 0) {\r\n\t\t\t\t\treturn phoneDigits\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn newCountryPrefix\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconst defaultValue = getInternationalPhoneNumberPrefix(newCountry, metadata)\r\n\t\t\t\t// If `phoneDigits`'s country calling code part is the same\r\n\t\t\t\t// as for the new `country`, then leave `phoneDigits` as is.\r\n\t\t\t\tif (phoneDigits.indexOf(defaultValue) === 0) {\r\n\t\t\t\t\treturn phoneDigits\r\n\t\t\t\t}\r\n\t\t\t\t// If `phoneDigits`'s country calling code part is not the same\r\n\t\t\t\t// as for the new `country`, then set `phoneDigits` to\r\n\t\t\t\t// `+{getCountryCallingCode(newCountry)}`.\r\n\t\t\t\treturn defaultValue\r\n\t\t\t}\r\n\r\n\t\t\t// // If the international phone number already contains\r\n\t\t\t// // any country calling code then trim the country calling code part.\r\n\t\t\t// // (that could also be the newly selected country phone code prefix as well)\r\n\t\t\t// // `phoneDigits` doesn't neccessarily belong to `prevCountry`.\r\n\t\t\t// // (e.g. if a user enters an international number\r\n\t\t\t// //  not belonging to any of the reduced `countries` list).\r\n\t\t\t// phoneDigits = stripCountryCallingCode(phoneDigits, prevCountry, metadata)\r\n\r\n\t\t\t// // Prepend country calling code prefix\r\n\t\t\t// // for the newly selected country.\r\n\t\t\t// return e164(phoneDigits, newCountry, metadata) || `+${getCountryCallingCode(newCountry, metadata)}`\r\n\t\t}\r\n\t}\r\n\t// If switching to \"International\" from a country.\r\n\telse {\r\n\t\t// If the phone number was entered in national format.\r\n\t\tif (phoneDigits[0] !== '+') {\r\n\t\t\t// Format the national phone number as an international one.\r\n\t\t\t// The phone number entered not necessarily even starts with\r\n\t\t\t// the previously selected country phone prefix.\r\n\t\t\t// Even if the phone number belongs to whole another country\r\n\t\t\t// it will still be parsed into some national phone number.\r\n\t\t\treturn e164(phoneDigits, prevCountry, metadata) || ''\r\n\t\t}\r\n\t}\r\n\r\n\treturn phoneDigits\r\n}\r\n\r\n/**\r\n * Converts phone number digits to a (possibly incomplete) E.164 phone number.\r\n * @param  {string?} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string?} country\r\n * @param  {[object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function e164(number, country, metadata) {\r\n\tif (!number) {\r\n\t\treturn\r\n\t}\r\n\t// If the phone number is being input in international format.\r\n\tif (number[0] === '+') {\r\n\t\t// If it's just the `+` sign then return nothing.\r\n\t\tif (number === '+') {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// If there are any digits then the `value` is returned as is.\r\n\t\treturn number\r\n\t}\r\n\t// For non-international phone numbers\r\n\t// an accompanying country code is required.\r\n\tif (!country) {\r\n\t\treturn\r\n\t}\r\n\tconst partial_national_significant_number = getNationalSignificantNumberDigits(number, country, metadata)\r\n\tif (partial_national_significant_number) {\r\n\t\treturn `+${getCountryCallingCode(country, metadata)}${partial_national_significant_number}`\r\n\t}\r\n}\r\n\r\n/**\r\n * Trims phone number digits if they exceed the maximum possible length\r\n * for a national (significant) number for the country.\r\n * @param  {string} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} Can be empty.\r\n */\r\nexport function trimNumber(number, country, metadata) {\r\n\tconst nationalSignificantNumberPart = getNationalSignificantNumberDigits(number, country, metadata)\r\n\tif (nationalSignificantNumberPart) {\r\n\t\tconst overflowDigitsCount = nationalSignificantNumberPart.length - getMaxNumberLength(country, metadata)\r\n\t\tif (overflowDigitsCount > 0) {\r\n\t\t\treturn number.slice(0, number.length - overflowDigitsCount)\r\n\t\t}\r\n\t}\r\n\treturn number\r\n}\r\n\r\nfunction getMaxNumberLength(country, metadata) {\r\n\t// Get \"possible lengths\" for a phone number of the country.\r\n\tmetadata = new Metadata(metadata)\r\n\tmetadata.country(country)\r\n\t// Return the last \"possible length\".\r\n\treturn metadata.numberingPlan.possibleLengths()[metadata.numberingPlan.possibleLengths().length - 1]\r\n}\r\n\r\n// If the phone number being input is an international one\r\n// then tries to derive the country from the phone number.\r\n// (regardless of whether there's any country currently selected)\r\n/**\r\n * @param {string} partialE164Number - A possibly incomplete E.164 phone number.\r\n * @param {string?} country - Currently selected country.\r\n * @param {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function getCountryForPartialE164Number(partialE164Number, {\r\n\tcountry,\r\n\tcountries,\r\n\trequired,\r\n\tmetadata\r\n}) {\r\n\tif (partialE164Number === '+') {\r\n\t\t// Don't change the currently selected country yet.\r\n\t\treturn country\r\n\t}\r\n\r\n\tconst derived_country = getCountryFromPossiblyIncompleteInternationalPhoneNumber(partialE164Number, metadata)\r\n\r\n\t// If a phone number is being input in international form\r\n\t// and the country can already be derived from it,\r\n\t// then select that country.\r\n\tif (derived_country && (!countries || (countries.indexOf(derived_country) >= 0))) {\r\n\t\treturn derived_country\r\n\t}\r\n\t// If \"International\" country option has not been disabled\r\n\t// and the international phone number entered doesn't correspond\r\n\t// to the currently selected country then reset the currently selected country.\r\n\telse if (country &&\r\n\t\t!required &&\r\n\t\t!couldNumberBelongToCountry(partialE164Number, country, metadata)) {\r\n\t\treturn undefined\r\n\t}\r\n\r\n\t// Don't change the currently selected country.\r\n\treturn country\r\n}\r\n\r\n/**\r\n * Parses `<input/>` value. Derives `country` from `input`. Derives an E.164 `value`.\r\n * @param  {string?} phoneDigits — Parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} prevPhoneDigits — Previous parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} country - Currently selected country.\r\n * @param  {boolean} countryRequired - Is selecting some country required.\r\n * @param  {function} getAnyCountry - Can be used to get any country when selecting some country required.\r\n * @param  {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {boolean} international - Set to `true` to force international phone number format (leading `+`). Set to `false` to force \"national\" phone number format. Is `undefined` by default.\r\n * @param  {boolean} limitMaxLength — Whether to enable limiting phone number max length.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {object} An object of shape `{ input, country, value }`.\r\n */\r\nexport function onPhoneDigitsChange(phoneDigits, {\r\n\tprevPhoneDigits,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tcountryRequired,\r\n\tgetAnyCountry,\r\n\tcountries,\r\n\tinternational,\r\n\tlimitMaxLength,\r\n\tcountryCallingCodeEditable,\r\n\tmetadata\r\n}) {\r\n\tif (international && countryCallingCodeEditable === false) {\r\n\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\t\t// The `<input/>` value must start with the country calling code.\r\n\t\tif (phoneDigits.indexOf(prefix) !== 0) {\r\n\t\t\t// If a user tabs into a phone number input field\r\n\t\t\t// that is `international` and `withCountryCallingCode`,\r\n\t\t\t// and then starts inputting local phone number digits,\r\n\t\t\t// the first digit would get \"swallowed\" without this `appendDigits` fix.\r\n\t\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/43\r\n\t\t\tif (phoneDigits && phoneDigits[0] !== '+') {\r\n\t\t\t\tphoneDigits = prefix + phoneDigits\r\n\t\t\t} else {\r\n\t\t\t\tphoneDigits = prefix\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tphoneDigits,\r\n\t\t\t\tvalue: undefined,\r\n\t\t\t\tcountry\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If `international` property is `false`, then it means\r\n\t// \"enforce national-only format during input\",\r\n\t// so, if that's the case, then remove all `+` characters,\r\n\t// but only if some country is currently selected.\r\n\t// (not if \"International\" country is selected).\r\n\tif (international === false && country && phoneDigits && phoneDigits[0] === '+') {\r\n\t\tphoneDigits = convertInternationalPhoneDigitsToNational(phoneDigits, country, metadata)\r\n\t}\r\n\r\n\t// Trim the input to not exceed the maximum possible number length.\r\n\tif (phoneDigits && country && limitMaxLength) {\r\n\t\tphoneDigits = trimNumber(phoneDigits, country, metadata)\r\n\t}\r\n\r\n\t// If this `onChange()` event was triggered\r\n\t// as a result of selecting \"International\" country,\r\n\t// then force-prepend a `+` sign if the phone number\r\n\t// `<input/>` value isn't in international format.\r\n\t// Also, force-prepend a `+` sign if international\r\n\t// phone number input format is set.\r\n\tif (phoneDigits && phoneDigits[0] !== '+' && (!country || international)) {\r\n\t\tphoneDigits = '+' + phoneDigits\r\n\t}\r\n\r\n\t// If the previously entered phone number\r\n\t// has been entered in international format\r\n\t// and the user decides to erase it,\r\n\t// then also reset the `country`\r\n\t// because it was most likely automatically selected\r\n\t// while the user was typing in the phone number\r\n\t// in international format.\r\n\t// This fixes the issue when a user is presented\r\n\t// with a phone number input with no country selected\r\n\t// and then types in their local phone number\r\n\t// then discovers that the input's messed up\r\n\t// (a `+` has been prepended at the start of their input\r\n\t//  and a random country has been selected),\r\n\t// decides to undo it all by erasing everything\r\n\t// and then types in their local phone number again\r\n\t// resulting in a seemingly correct phone number\r\n\t// but in reality that phone number has incorrect country.\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/273\r\n\tif (!phoneDigits && prevPhoneDigits && prevPhoneDigits[0] === '+') {\r\n\t\tif (international) {\r\n\t\t\tcountry = undefined\r\n\t\t} else {\r\n\t\t\tcountry = defaultCountry\r\n\t\t}\r\n\t}\r\n\t// Also resets such \"randomly\" selected country\r\n\t// as soon as the user erases the number\r\n\t// digit-by-digit up to the leading `+` sign.\r\n\tif (phoneDigits === '+' && prevPhoneDigits && prevPhoneDigits[0] === '+' && prevPhoneDigits.length > '+'.length) {\r\n\t\tcountry = undefined\r\n\t}\r\n\r\n\t// Generate the new `value` property.\r\n\tlet value\r\n\tif (phoneDigits) {\r\n\t\tif (phoneDigits[0] === '+') {\r\n\t\t\tif (phoneDigits === '+') {\r\n\t\t\t\tvalue = undefined\r\n\t\t\t} else if (country && getInternationalPhoneNumberPrefix(country, metadata).indexOf(phoneDigits) === 0) {\r\n\t\t\t\tvalue = undefined\r\n\t\t\t} else {\r\n\t\t\t\tvalue = phoneDigits\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvalue = e164(phoneDigits, country, metadata)\r\n\t\t}\r\n\t}\r\n\r\n\t// Derive the country from the phone number.\r\n\t// (regardless of whether there's any country currently selected,\r\n\t//  because there could be several countries corresponding to one country calling code)\r\n\tif (value) {\r\n\t\tcountry = getCountryForPartialE164Number(value, {\r\n\t\t\tcountry,\r\n\t\t\tcountries,\r\n\t\t\tmetadata\r\n\t\t})\r\n\t\t// If `international` property is `false`, then it means\r\n\t\t// \"enforce national-only format during input\",\r\n\t\t// so, if that's the case, then remove all `+` characters,\r\n\t\t// but only if some country is currently selected.\r\n\t\t// (not if \"International\" country is selected).\r\n\t\tif (international === false && country && phoneDigits && phoneDigits[0] === '+') {\r\n\t\t\tphoneDigits = convertInternationalPhoneDigitsToNational(phoneDigits, country, metadata)\r\n\t\t\t// Re-calculate `value` because `phoneDigits` has changed.\r\n\t\t\tvalue = e164(phoneDigits, country, metadata)\r\n\t\t}\r\n\t}\r\n\r\n\tif (!country && countryRequired) {\r\n\t\tcountry = defaultCountry || getAnyCountry()\r\n\t}\r\n\r\n\treturn {\r\n\t\tphoneDigits,\r\n\t\tcountry,\r\n\t\tvalue\r\n\t}\r\n}\r\n\r\nfunction convertInternationalPhoneDigitsToNational(input, country, metadata) {\r\n\t// Handle the case when a user might have pasted\r\n\t// a phone number in international format.\r\n\tif (input.indexOf(getInternationalPhoneNumberPrefix(country, metadata)) === 0) {\r\n\t\t// Create \"as you type\" formatter.\r\n\t\tconst formatter = new AsYouType(country, metadata)\r\n\t\t// Input partial national phone number.\r\n\t\tformatter.input(input)\r\n\t\t// Return the parsed partial national phone number.\r\n\t\tconst phoneNumber = formatter.getNumber()\r\n\t\tif (phoneNumber) {\r\n\t\t\t// Transform the number to a national one,\r\n\t\t\t// and remove all non-digits.\r\n\t\t\treturn phoneNumber.formatNational().replace(/\\D/g, '')\r\n\t\t} else {\r\n\t\t\treturn ''\r\n\t\t}\r\n\t} else {\r\n\t\t// Just remove the `+` sign.\r\n\t\treturn input.replace(/\\D/g, '')\r\n\t}\r\n}\r\n\r\n/**\r\n * Determines the country for a given (possibly incomplete) E.164 phone number.\r\n * @param  {string} number - A possibly incomplete E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function getCountryFromPossiblyIncompleteInternationalPhoneNumber(number, metadata) {\r\n\tconst formatter = new AsYouType(null, metadata)\r\n\tformatter.input(number)\r\n\t// // `001` is a special \"non-geograpical entity\" code\r\n\t// // in Google's `libphonenumber` library.\r\n\t// if (formatter.getCountry() === '001') {\r\n\t// \treturn\r\n\t// }\r\n\treturn formatter.getCountry()\r\n}\r\n\r\n/**\r\n * Compares two strings.\r\n * A helper for `Array.sort()`.\r\n * @param {string} a — First string.\r\n * @param {string} b — Second string.\r\n * @param {(string[]|string)} [locales] — The `locales` argument of `String.localeCompare`.\r\n */\r\nexport function compareStrings(a, b, locales) {\r\n  // Use `String.localeCompare` if it's available.\r\n  // https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\r\n  // Which means everyone except IE <= 10 and Safari <= 10.\r\n  // `localeCompare()` is available in latest Node.js versions.\r\n  /* istanbul ignore else */\r\n  if (String.prototype.localeCompare) {\r\n    return a.localeCompare(b, locales);\r\n  }\r\n  /* istanbul ignore next */\r\n  return a < b ? -1 : (a > b ? 1 : 0);\r\n}\r\n\r\n/**\r\n * Strips `+${countryCallingCode}` prefix from an E.164 phone number.\r\n * @param {string} number - (possibly incomplete) E.164 phone number.\r\n * @param {string?} country - A possible country for this phone number.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string}\r\n */\r\nexport function stripCountryCallingCode(number, country, metadata) {\r\n\t// Just an optimization, so that it\r\n\t// doesn't have to iterate through all country calling codes.\r\n\tif (country) {\r\n\t\tconst countryCallingCodePrefix = '+' + getCountryCallingCode(country, metadata)\r\n\r\n\t\t// If `country` fits the actual `number`.\r\n\t\tif (number.length < countryCallingCodePrefix.length) {\r\n\t\t\tif (countryCallingCodePrefix.indexOf(number) === 0) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (number.indexOf(countryCallingCodePrefix) === 0) {\r\n\t\t\t\treturn number.slice(countryCallingCodePrefix.length)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If `country` doesn't fit the actual `number`.\r\n\t// Try all available country calling codes.\r\n\tfor (const country_calling_code of Object.keys(metadata.country_calling_codes)) {\r\n\t\tif (number.indexOf(country_calling_code) === '+'.length) {\r\n\t\t\treturn number.slice('+'.length + country_calling_code.length)\r\n\t\t}\r\n\t}\r\n\r\n\treturn ''\r\n}\r\n\r\n/**\r\n * Parses a partially entered national phone number digits\r\n * (or a partially entered E.164 international phone number)\r\n * and returns the national significant number part.\r\n * National significant number returned doesn't come with a national prefix.\r\n * @param {string} number - National number digits. Or possibly incomplete E.164 phone number.\r\n * @param {string?} country\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} [result]\r\n */\r\nexport function getNationalSignificantNumberDigits(number, country, metadata) {\r\n\t// Create \"as you type\" formatter.\r\n\tconst formatter = new AsYouType(country, metadata)\r\n\t// Input partial national phone number.\r\n\tformatter.input(number)\r\n\t// Return the parsed partial national phone number.\r\n\tconst phoneNumber = formatter.getNumber()\r\n\treturn phoneNumber && phoneNumber.nationalNumber\r\n}\r\n\r\n/**\r\n * Checks if a partially entered E.164 phone number could belong to a country.\r\n * @param  {string} number\r\n * @param  {string} country\r\n * @return {boolean}\r\n */\r\nexport function couldNumberBelongToCountry(number, country, metadata) {\r\n\tconst intlPhoneNumberPrefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\tlet i = 0\r\n\twhile (i < number.length && i < intlPhoneNumberPrefix.length) {\r\n\t\tif (number[i] !== intlPhoneNumberPrefix[i]) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn true\r\n}\r\n\r\n/**\r\n * Gets initial \"phone digits\" (including `+`, if using international format).\r\n * @return {string} [phoneDigits] Returns `undefined` if there should be no initial \"phone digits\".\r\n */\r\nexport function getInitialPhoneDigits({\r\n\tvalue,\r\n\tphoneNumber,\r\n\tdefaultCountry,\r\n\tinternational,\r\n\tuseNationalFormat,\r\n\tmetadata\r\n}) {\r\n\t// If the `value` (E.164 phone number)\r\n\t// belongs to the currently selected country\r\n\t// and `useNationalFormat` is `true`\r\n\t// then convert `value` (E.164 phone number)\r\n\t// to a local phone number digits.\r\n\t// E.g. '+78005553535' -> '88005553535'.\r\n\tif ((international === false || useNationalFormat) && phoneNumber && phoneNumber.country) {\r\n\t\treturn generateNationalNumberDigits(phoneNumber)\r\n\t}\r\n\t// If `international` property is `true`,\r\n\t// meaning \"enforce international phone number format\",\r\n\t// then always show country calling code in the input field.\r\n\tif (!value && international && defaultCountry) {\r\n\t\treturn getInternationalPhoneNumberPrefix(defaultCountry, metadata)\r\n\t}\r\n\treturn value\r\n}"],"file":"phoneInputHelpers.js"}