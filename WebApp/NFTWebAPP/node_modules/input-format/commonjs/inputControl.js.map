{"version":3,"sources":["../source/inputControl.js"],"names":["onCut","event","input","_parse","_format","on_change","setTimeout","formatInputText","undefined","onPaste","selection","eraseSelection","onChange","onKeyDown","operation","preventDefault","text","value","slice","start","end","caret","newValueAndCaret","formatted"],"mappings":"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","sourcesContent":["import edit   from './edit'\r\nimport parse  from './parse'\r\nimport format from './format'\r\n\r\nimport\r\n{\r\n\tgetOperation,\r\n\tgetSelection,\r\n\tgetCaretPosition,\r\n\tsetCaretPosition\r\n}\r\nfrom './dom'\r\n\r\n// Deprecated.\r\n// I don't know why this function exists.\r\nexport function onCut(event, input, _parse, _format, on_change)\r\n{\r\n\t// The actual cut hasn't happened just yet hence the timeout.\r\n\tsetTimeout(() => formatInputText(input, _parse, _format, undefined, on_change), 0)\r\n}\r\n\r\n// Deprecated.\r\n// I don't know why this function exists.\r\nexport function onPaste(event, input, _parse, _format, on_change)\r\n{\r\n\tconst selection = getSelection(input)\r\n\r\n\t// If selection is made,\r\n\t// just erase the selected text\r\n\t// prior to pasting\r\n\tif (selection)\r\n\t{\r\n\t\teraseSelection(input, selection)\r\n\t}\r\n\r\n\tformatInputText(input, _parse, _format, undefined, on_change)\r\n}\r\n\r\nexport function onChange(event, input, _parse, _format, on_change)\r\n{\r\n\tformatInputText(input, _parse, _format, undefined, on_change)\r\n}\r\n\r\n// \"Delete\" and \"Backspace\" keys are special\r\n// in a way that they're not handled by the regular `onChange()` handler\r\n// and instead are intercepted and re-applied manually.\r\n// The reason is that normally hitting \"Backspace\" or \"Delete\"\r\n// results in erasing a character, but that character might be any character,\r\n// while it would be a better \"user experience\" if it erased not just any character\r\n// but the closest \"meaningful\" character.\r\n// For example, if a template is `(xxx) xxx-xxxx`,\r\n// and the `<input/>` value is `(111) 222-3333`,\r\n// then, if a user begins erasing the `3333` part via \"Backspace\"\r\n// and reaches the \"-\" character, then it would just erase the \"-\" character.\r\n// Nothing wrong with that, but it would be a better \"user experience\"\r\n// if hitting \"Backspace\" at that position would erase the closest \"meaningful\"\r\n// character, which would be the rightmost `2`.\r\n// So, what this `onKeyDown()` handler does is it intercepts\r\n// \"Backspace\" and \"Delete\" keys and re-applies those operations manually\r\n// following the logic described above.\r\nexport function onKeyDown(event, input, _parse, _format, on_change)\r\n{\r\n\tconst operation = getOperation(event)\r\n\tswitch (operation)\r\n\t{\r\n\t\tcase 'Delete':\r\n\t\tcase 'Backspace':\r\n\t\t\t// Intercept this operation and perform it manually.\r\n\t\t\tevent.preventDefault()\r\n\r\n\t\t\tconst selection = getSelection(input)\r\n\r\n\t\t\t// If a selection is made, just erase the selected text.\r\n\t\t\tif (selection)\r\n\t\t\t{\r\n\t\t\t\teraseSelection(input, selection)\r\n\t\t\t\treturn formatInputText(input, _parse, _format, undefined, on_change)\r\n\t\t\t}\r\n\r\n\t\t\t// Else, perform the (character erasing) operation manually.\r\n\t\t\treturn formatInputText(input, _parse, _format, operation, on_change)\r\n\r\n\t\tdefault:\r\n\t\t\t// Will be handled normally as part of the `onChange` handler.\r\n\t}\r\n}\r\n\r\n/**\r\n * Erases the selected text inside an `<input/>`.\r\n * @param  {DOMElement} input\r\n * @param  {Selection} selection\r\n */\r\nfunction eraseSelection(input, selection)\r\n{\r\n\tlet text = input.value\r\n\ttext = text.slice(0, selection.start) + text.slice(selection.end)\r\n\r\n\tinput.value = text\r\n\tsetCaretPosition(input, selection.start)\r\n}\r\n\r\n/**\r\n * Parses and re-formats `<input/>` textual value.\r\n * E.g. when a user enters something into the `<input/>`\r\n * that raw input must first be parsed and the re-formatted properly.\r\n * Is called either after some user input (e.g. entered a character, pasted something)\r\n * or after the user performed an `operation` (e.g. \"Backspace\", \"Delete\").\r\n * @param  {DOMElement} input\r\n * @param  {Function} parse\r\n * @param  {Function} format\r\n * @param  {string} [operation] - The operation that triggered `<input/>` textual value change. E.g. \"Backspace\", \"Delete\".\r\n * @param  {Function} onChange\r\n */\r\nfunction formatInputText(input, _parse, _format, operation, on_change)\r\n{\r\n\t// Parse `<input/>` textual value.\r\n\t// Get the `value` and `caret` position.\r\n\tlet { value, caret } = parse(input.value, getCaretPosition(input), _parse)\r\n\r\n\t// If a user performed an operation (\"Backspace\", \"Delete\")\r\n\t// then apply that operation and get the new `value` and `caret` position.\r\n\tif (operation)\r\n\t{\r\n\t\tconst newValueAndCaret = edit(value, caret, operation)\r\n\r\n\t\tvalue = newValueAndCaret.value\r\n\t\tcaret = newValueAndCaret.caret\r\n\t}\r\n\r\n\t// Format the `value`.\r\n\t// (and reposition the caret accordingly)\r\n\tconst formatted = format(value, caret, _format)\r\n\r\n\tconst text = formatted.text\r\n\tcaret      = formatted.caret\r\n\r\n\t// Set `<input/>` textual value manually\r\n\t// to prevent React from resetting the caret position\r\n\t// later inside a subsequent `render()`.\r\n\t// Doesn't work for custom `inputComponent`s for some reason.\r\n\tinput.value = text\r\n\t// Position the caret properly.\r\n\tsetCaretPosition(input, caret)\r\n\r\n\t// If the `<input/>` textual value did change,\r\n\t// then the parsed `value` may have changed too.\r\n\ton_change(value)\r\n}"],"file":"inputControl.js"}